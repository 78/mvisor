/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.SweetProtocol.DisplayStreamConfig', null, global);
goog.exportSymbol('proto.SweetProtocol.DisplayStreamStartEvent', null, global);
goog.exportSymbol('proto.SweetProtocol.MonitorsConfig', null, global);
goog.exportSymbol('proto.SweetProtocol.MonitorsConfig.Monitor', null, global);
goog.exportSymbol('proto.SweetProtocol.PlaybackStartEvent', null, global);
goog.exportSymbol('proto.SweetProtocol.PlaybackStreamConfig', null, global);
goog.exportSymbol('proto.SweetProtocol.QueryScreeenshot', null, global);
goog.exportSymbol('proto.SweetProtocol.QueryScreenshotResponse', null, global);
goog.exportSymbol('proto.SweetProtocol.QueryStatusResponse', null, global);
goog.exportSymbol('proto.SweetProtocol.SendKeyboardInput', null, global);
goog.exportSymbol('proto.SweetProtocol.SendPointerInput', null, global);
goog.exportSymbol('proto.SweetProtocol.SendPointerInput.PointerButtonBit', null, global);
goog.exportSymbol('proto.SweetProtocol.SetCursorEvent', null, global);
goog.exportSymbol('proto.SweetProtocol.SetCursorEvent.CursorShape', null, global);
goog.exportSymbol('proto.SweetProtocol.SweetCommand', null, global);
goog.exportSymbol('proto.SweetProtocol.SweetResponseAndEvent', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SweetProtocol.QueryStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.SweetProtocol.QueryStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SweetProtocol.QueryStatusResponse.displayName = 'proto.SweetProtocol.QueryStatusResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SweetProtocol.QueryStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SweetProtocol.QueryStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SweetProtocol.QueryStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SweetProtocol.QueryStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    debug: jspb.Message.getFieldWithDefault(msg, 1, false),
    paused: jspb.Message.getFieldWithDefault(msg, 2, false),
    hypervisor: jspb.Message.getFieldWithDefault(msg, 3, false),
    vcpuCount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    memorySize: jspb.Message.getFieldWithDefault(msg, 5, 0),
    vmUuid: jspb.Message.getFieldWithDefault(msg, 6, ""),
    vmName: jspb.Message.getFieldWithDefault(msg, 7, ""),
    configPath: jspb.Message.getFieldWithDefault(msg, 8, ""),
    spiceAgent: jspb.Message.getFieldWithDefault(msg, 1001, false),
    tenclassAgent: jspb.Message.getFieldWithDefault(msg, 1002, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SweetProtocol.QueryStatusResponse}
 */
proto.SweetProtocol.QueryStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SweetProtocol.QueryStatusResponse;
  return proto.SweetProtocol.QueryStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SweetProtocol.QueryStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SweetProtocol.QueryStatusResponse}
 */
proto.SweetProtocol.QueryStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDebug(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPaused(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHypervisor(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVcpuCount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMemorySize(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setVmUuid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setVmName(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfigPath(value);
      break;
    case 1001:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSpiceAgent(value);
      break;
    case 1002:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTenclassAgent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SweetProtocol.QueryStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SweetProtocol.QueryStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SweetProtocol.QueryStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SweetProtocol.QueryStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDebug();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getPaused();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getHypervisor();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getVcpuCount();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMemorySize();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getVmUuid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getVmName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getConfigPath();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getSpiceAgent();
  if (f) {
    writer.writeBool(
      1001,
      f
    );
  }
  f = message.getTenclassAgent();
  if (f) {
    writer.writeBool(
      1002,
      f
    );
  }
};


/**
 * optional bool debug = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SweetProtocol.QueryStatusResponse.prototype.getDebug = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.SweetProtocol.QueryStatusResponse.prototype.setDebug = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool paused = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SweetProtocol.QueryStatusResponse.prototype.getPaused = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.SweetProtocol.QueryStatusResponse.prototype.setPaused = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool hypervisor = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SweetProtocol.QueryStatusResponse.prototype.getHypervisor = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.SweetProtocol.QueryStatusResponse.prototype.setHypervisor = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional uint32 vcpu_count = 4;
 * @return {number}
 */
proto.SweetProtocol.QueryStatusResponse.prototype.getVcpuCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.SweetProtocol.QueryStatusResponse.prototype.setVcpuCount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 memory_size = 5;
 * @return {number}
 */
proto.SweetProtocol.QueryStatusResponse.prototype.getMemorySize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.SweetProtocol.QueryStatusResponse.prototype.setMemorySize = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string vm_uuid = 6;
 * @return {string}
 */
proto.SweetProtocol.QueryStatusResponse.prototype.getVmUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.SweetProtocol.QueryStatusResponse.prototype.setVmUuid = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string vm_name = 7;
 * @return {string}
 */
proto.SweetProtocol.QueryStatusResponse.prototype.getVmName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.SweetProtocol.QueryStatusResponse.prototype.setVmName = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string config_path = 8;
 * @return {string}
 */
proto.SweetProtocol.QueryStatusResponse.prototype.getConfigPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.SweetProtocol.QueryStatusResponse.prototype.setConfigPath = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional bool spice_agent = 1001;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SweetProtocol.QueryStatusResponse.prototype.getSpiceAgent = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1001, false));
};


/** @param {boolean} value */
proto.SweetProtocol.QueryStatusResponse.prototype.setSpiceAgent = function(value) {
  jspb.Message.setProto3BooleanField(this, 1001, value);
};


/**
 * optional bool tenclass_agent = 1002;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SweetProtocol.QueryStatusResponse.prototype.getTenclassAgent = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1002, false));
};


/** @param {boolean} value */
proto.SweetProtocol.QueryStatusResponse.prototype.setTenclassAgent = function(value) {
  jspb.Message.setProto3BooleanField(this, 1002, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SweetProtocol.SendKeyboardInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SweetProtocol.SendKeyboardInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SweetProtocol.SendKeyboardInput.displayName = 'proto.SweetProtocol.SendKeyboardInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SweetProtocol.SendKeyboardInput.prototype.toObject = function(opt_includeInstance) {
  return proto.SweetProtocol.SendKeyboardInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SweetProtocol.SendKeyboardInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SweetProtocol.SendKeyboardInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    scancode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pressed: jspb.Message.getFieldWithDefault(msg, 2, false),
    modifiers: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SweetProtocol.SendKeyboardInput}
 */
proto.SweetProtocol.SendKeyboardInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SweetProtocol.SendKeyboardInput;
  return proto.SweetProtocol.SendKeyboardInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SweetProtocol.SendKeyboardInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SweetProtocol.SendKeyboardInput}
 */
proto.SweetProtocol.SendKeyboardInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScancode(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPressed(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setModifiers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SweetProtocol.SendKeyboardInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SweetProtocol.SendKeyboardInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SweetProtocol.SendKeyboardInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SweetProtocol.SendKeyboardInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScancode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPressed();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getModifiers();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 scancode = 1;
 * @return {number}
 */
proto.SweetProtocol.SendKeyboardInput.prototype.getScancode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SweetProtocol.SendKeyboardInput.prototype.setScancode = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool pressed = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SweetProtocol.SendKeyboardInput.prototype.getPressed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.SweetProtocol.SendKeyboardInput.prototype.setPressed = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional uint32 modifiers = 3;
 * @return {number}
 */
proto.SweetProtocol.SendKeyboardInput.prototype.getModifiers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SweetProtocol.SendKeyboardInput.prototype.setModifiers = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SweetProtocol.SendPointerInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SweetProtocol.SendPointerInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SweetProtocol.SendPointerInput.displayName = 'proto.SweetProtocol.SendPointerInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SweetProtocol.SendPointerInput.prototype.toObject = function(opt_includeInstance) {
  return proto.SweetProtocol.SendPointerInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SweetProtocol.SendPointerInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SweetProtocol.SendPointerInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    buttons: jspb.Message.getFieldWithDefault(msg, 1, 0),
    x: jspb.Message.getFieldWithDefault(msg, 2, 0),
    y: jspb.Message.getFieldWithDefault(msg, 3, 0),
    z: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SweetProtocol.SendPointerInput}
 */
proto.SweetProtocol.SendPointerInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SweetProtocol.SendPointerInput;
  return proto.SweetProtocol.SendPointerInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SweetProtocol.SendPointerInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SweetProtocol.SendPointerInput}
 */
proto.SweetProtocol.SendPointerInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setButtons(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SweetProtocol.SendPointerInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SweetProtocol.SendPointerInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SweetProtocol.SendPointerInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SweetProtocol.SendPointerInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getButtons();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getZ();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.SweetProtocol.SendPointerInput.PointerButtonBit = {
  LEFT: 0,
  MIDDLE: 1,
  RIGHT: 2
};

/**
 * optional uint32 buttons = 1;
 * @return {number}
 */
proto.SweetProtocol.SendPointerInput.prototype.getButtons = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SweetProtocol.SendPointerInput.prototype.setButtons = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 x = 2;
 * @return {number}
 */
proto.SweetProtocol.SendPointerInput.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SweetProtocol.SendPointerInput.prototype.setX = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 y = 3;
 * @return {number}
 */
proto.SweetProtocol.SendPointerInput.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SweetProtocol.SendPointerInput.prototype.setY = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 z = 4;
 * @return {number}
 */
proto.SweetProtocol.SendPointerInput.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.SweetProtocol.SendPointerInput.prototype.setZ = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SweetProtocol.QueryScreeenshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SweetProtocol.QueryScreeenshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SweetProtocol.QueryScreeenshot.displayName = 'proto.SweetProtocol.QueryScreeenshot';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SweetProtocol.QueryScreeenshot.prototype.toObject = function(opt_includeInstance) {
  return proto.SweetProtocol.QueryScreeenshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SweetProtocol.QueryScreeenshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SweetProtocol.QueryScreeenshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    format: jspb.Message.getFieldWithDefault(msg, 1, ""),
    width: jspb.Message.getFieldWithDefault(msg, 2, 0),
    height: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SweetProtocol.QueryScreeenshot}
 */
proto.SweetProtocol.QueryScreeenshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SweetProtocol.QueryScreeenshot;
  return proto.SweetProtocol.QueryScreeenshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SweetProtocol.QueryScreeenshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SweetProtocol.QueryScreeenshot}
 */
proto.SweetProtocol.QueryScreeenshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFormat(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SweetProtocol.QueryScreeenshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SweetProtocol.QueryScreeenshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SweetProtocol.QueryScreeenshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SweetProtocol.QueryScreeenshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFormat();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string format = 1;
 * @return {string}
 */
proto.SweetProtocol.QueryScreeenshot.prototype.getFormat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.SweetProtocol.QueryScreeenshot.prototype.setFormat = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 width = 2;
 * @return {number}
 */
proto.SweetProtocol.QueryScreeenshot.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SweetProtocol.QueryScreeenshot.prototype.setWidth = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 height = 3;
 * @return {number}
 */
proto.SweetProtocol.QueryScreeenshot.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SweetProtocol.QueryScreeenshot.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SweetProtocol.QueryScreenshotResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SweetProtocol.QueryScreenshotResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SweetProtocol.QueryScreenshotResponse.displayName = 'proto.SweetProtocol.QueryScreenshotResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SweetProtocol.QueryScreenshotResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SweetProtocol.QueryScreenshotResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SweetProtocol.QueryScreenshotResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SweetProtocol.QueryScreenshotResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    format: jspb.Message.getFieldWithDefault(msg, 1, ""),
    width: jspb.Message.getFieldWithDefault(msg, 2, 0),
    height: jspb.Message.getFieldWithDefault(msg, 3, 0),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SweetProtocol.QueryScreenshotResponse}
 */
proto.SweetProtocol.QueryScreenshotResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SweetProtocol.QueryScreenshotResponse;
  return proto.SweetProtocol.QueryScreenshotResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SweetProtocol.QueryScreenshotResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SweetProtocol.QueryScreenshotResponse}
 */
proto.SweetProtocol.QueryScreenshotResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFormat(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SweetProtocol.QueryScreenshotResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SweetProtocol.QueryScreenshotResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SweetProtocol.QueryScreenshotResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SweetProtocol.QueryScreenshotResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFormat();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional string format = 1;
 * @return {string}
 */
proto.SweetProtocol.QueryScreenshotResponse.prototype.getFormat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.SweetProtocol.QueryScreenshotResponse.prototype.setFormat = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 width = 2;
 * @return {number}
 */
proto.SweetProtocol.QueryScreenshotResponse.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SweetProtocol.QueryScreenshotResponse.prototype.setWidth = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 height = 3;
 * @return {number}
 */
proto.SweetProtocol.QueryScreenshotResponse.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SweetProtocol.QueryScreenshotResponse.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes data = 4;
 * @return {!(string|Uint8Array)}
 */
proto.SweetProtocol.QueryScreenshotResponse.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes data = 4;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.SweetProtocol.QueryScreenshotResponse.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.SweetProtocol.QueryScreenshotResponse.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.SweetProtocol.QueryScreenshotResponse.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SweetProtocol.MonitorsConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SweetProtocol.MonitorsConfig.repeatedFields_, null);
};
goog.inherits(proto.SweetProtocol.MonitorsConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SweetProtocol.MonitorsConfig.displayName = 'proto.SweetProtocol.MonitorsConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SweetProtocol.MonitorsConfig.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SweetProtocol.MonitorsConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.SweetProtocol.MonitorsConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SweetProtocol.MonitorsConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SweetProtocol.MonitorsConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    count: jspb.Message.getFieldWithDefault(msg, 1, 0),
    monitorsList: jspb.Message.toObjectList(msg.getMonitorsList(),
    proto.SweetProtocol.MonitorsConfig.Monitor.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SweetProtocol.MonitorsConfig}
 */
proto.SweetProtocol.MonitorsConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SweetProtocol.MonitorsConfig;
  return proto.SweetProtocol.MonitorsConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SweetProtocol.MonitorsConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SweetProtocol.MonitorsConfig}
 */
proto.SweetProtocol.MonitorsConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    case 2:
      var value = new proto.SweetProtocol.MonitorsConfig.Monitor;
      reader.readMessage(value,proto.SweetProtocol.MonitorsConfig.Monitor.deserializeBinaryFromReader);
      msg.addMonitors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SweetProtocol.MonitorsConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SweetProtocol.MonitorsConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SweetProtocol.MonitorsConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SweetProtocol.MonitorsConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMonitorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.SweetProtocol.MonitorsConfig.Monitor.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SweetProtocol.MonitorsConfig.Monitor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SweetProtocol.MonitorsConfig.Monitor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SweetProtocol.MonitorsConfig.Monitor.displayName = 'proto.SweetProtocol.MonitorsConfig.Monitor';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SweetProtocol.MonitorsConfig.Monitor.prototype.toObject = function(opt_includeInstance) {
  return proto.SweetProtocol.MonitorsConfig.Monitor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SweetProtocol.MonitorsConfig.Monitor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SweetProtocol.MonitorsConfig.Monitor.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    left: jspb.Message.getFieldWithDefault(msg, 2, 0),
    top: jspb.Message.getFieldWithDefault(msg, 3, 0),
    width: jspb.Message.getFieldWithDefault(msg, 4, 0),
    height: jspb.Message.getFieldWithDefault(msg, 5, 0),
    depth: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SweetProtocol.MonitorsConfig.Monitor}
 */
proto.SweetProtocol.MonitorsConfig.Monitor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SweetProtocol.MonitorsConfig.Monitor;
  return proto.SweetProtocol.MonitorsConfig.Monitor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SweetProtocol.MonitorsConfig.Monitor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SweetProtocol.MonitorsConfig.Monitor}
 */
proto.SweetProtocol.MonitorsConfig.Monitor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLeft(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTop(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidth(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDepth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SweetProtocol.MonitorsConfig.Monitor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SweetProtocol.MonitorsConfig.Monitor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SweetProtocol.MonitorsConfig.Monitor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SweetProtocol.MonitorsConfig.Monitor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getLeft();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTop();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getDepth();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional uint32 index = 1;
 * @return {number}
 */
proto.SweetProtocol.MonitorsConfig.Monitor.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SweetProtocol.MonitorsConfig.Monitor.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 left = 2;
 * @return {number}
 */
proto.SweetProtocol.MonitorsConfig.Monitor.prototype.getLeft = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SweetProtocol.MonitorsConfig.Monitor.prototype.setLeft = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 top = 3;
 * @return {number}
 */
proto.SweetProtocol.MonitorsConfig.Monitor.prototype.getTop = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SweetProtocol.MonitorsConfig.Monitor.prototype.setTop = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 width = 4;
 * @return {number}
 */
proto.SweetProtocol.MonitorsConfig.Monitor.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.SweetProtocol.MonitorsConfig.Monitor.prototype.setWidth = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 height = 5;
 * @return {number}
 */
proto.SweetProtocol.MonitorsConfig.Monitor.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.SweetProtocol.MonitorsConfig.Monitor.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 depth = 6;
 * @return {number}
 */
proto.SweetProtocol.MonitorsConfig.Monitor.prototype.getDepth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.SweetProtocol.MonitorsConfig.Monitor.prototype.setDepth = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 count = 1;
 * @return {number}
 */
proto.SweetProtocol.MonitorsConfig.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SweetProtocol.MonitorsConfig.prototype.setCount = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Monitor monitors = 2;
 * @return {!Array.<!proto.SweetProtocol.MonitorsConfig.Monitor>}
 */
proto.SweetProtocol.MonitorsConfig.prototype.getMonitorsList = function() {
  return /** @type{!Array.<!proto.SweetProtocol.MonitorsConfig.Monitor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SweetProtocol.MonitorsConfig.Monitor, 2));
};


/** @param {!Array.<!proto.SweetProtocol.MonitorsConfig.Monitor>} value */
proto.SweetProtocol.MonitorsConfig.prototype.setMonitorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.SweetProtocol.MonitorsConfig.Monitor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SweetProtocol.MonitorsConfig.Monitor}
 */
proto.SweetProtocol.MonitorsConfig.prototype.addMonitors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.SweetProtocol.MonitorsConfig.Monitor, opt_index);
};


proto.SweetProtocol.MonitorsConfig.prototype.clearMonitorsList = function() {
  this.setMonitorsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SweetProtocol.SetCursorEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SweetProtocol.SetCursorEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SweetProtocol.SetCursorEvent.displayName = 'proto.SweetProtocol.SetCursorEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SweetProtocol.SetCursorEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.SweetProtocol.SetCursorEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SweetProtocol.SetCursorEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SweetProtocol.SetCursorEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    visible: jspb.Message.getFieldWithDefault(msg, 1, false),
    x: jspb.Message.getFieldWithDefault(msg, 2, 0),
    y: jspb.Message.getFieldWithDefault(msg, 3, 0),
    shape: (f = msg.getShape()) && proto.SweetProtocol.SetCursorEvent.CursorShape.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SweetProtocol.SetCursorEvent}
 */
proto.SweetProtocol.SetCursorEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SweetProtocol.SetCursorEvent;
  return proto.SweetProtocol.SetCursorEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SweetProtocol.SetCursorEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SweetProtocol.SetCursorEvent}
 */
proto.SweetProtocol.SetCursorEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVisible(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    case 4:
      var value = new proto.SweetProtocol.SetCursorEvent.CursorShape;
      reader.readMessage(value,proto.SweetProtocol.SetCursorEvent.CursorShape.deserializeBinaryFromReader);
      msg.setShape(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SweetProtocol.SetCursorEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SweetProtocol.SetCursorEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SweetProtocol.SetCursorEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SweetProtocol.SetCursorEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVisible();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getShape();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.SweetProtocol.SetCursorEvent.CursorShape.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SweetProtocol.SetCursorEvent.CursorShape = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SweetProtocol.SetCursorEvent.CursorShape, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SweetProtocol.SetCursorEvent.CursorShape.displayName = 'proto.SweetProtocol.SetCursorEvent.CursorShape';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SweetProtocol.SetCursorEvent.CursorShape.prototype.toObject = function(opt_includeInstance) {
  return proto.SweetProtocol.SetCursorEvent.CursorShape.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SweetProtocol.SetCursorEvent.CursorShape} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SweetProtocol.SetCursorEvent.CursorShape.toObject = function(includeInstance, msg) {
  var f, obj = {
    width: jspb.Message.getFieldWithDefault(msg, 1, 0),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hotspotX: jspb.Message.getFieldWithDefault(msg, 3, 0),
    hotspotY: jspb.Message.getFieldWithDefault(msg, 4, 0),
    type: jspb.Message.getFieldWithDefault(msg, 5, 0),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SweetProtocol.SetCursorEvent.CursorShape}
 */
proto.SweetProtocol.SetCursorEvent.CursorShape.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SweetProtocol.SetCursorEvent.CursorShape;
  return proto.SweetProtocol.SetCursorEvent.CursorShape.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SweetProtocol.SetCursorEvent.CursorShape} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SweetProtocol.SetCursorEvent.CursorShape}
 */
proto.SweetProtocol.SetCursorEvent.CursorShape.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHotspotX(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHotspotY(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SweetProtocol.SetCursorEvent.CursorShape.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SweetProtocol.SetCursorEvent.CursorShape.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SweetProtocol.SetCursorEvent.CursorShape} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SweetProtocol.SetCursorEvent.CursorShape.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWidth();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getHotspotX();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getHotspotY();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional uint32 width = 1;
 * @return {number}
 */
proto.SweetProtocol.SetCursorEvent.CursorShape.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SweetProtocol.SetCursorEvent.CursorShape.prototype.setWidth = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 height = 2;
 * @return {number}
 */
proto.SweetProtocol.SetCursorEvent.CursorShape.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SweetProtocol.SetCursorEvent.CursorShape.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 hotspot_x = 3;
 * @return {number}
 */
proto.SweetProtocol.SetCursorEvent.CursorShape.prototype.getHotspotX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SweetProtocol.SetCursorEvent.CursorShape.prototype.setHotspotX = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 hotspot_y = 4;
 * @return {number}
 */
proto.SweetProtocol.SetCursorEvent.CursorShape.prototype.getHotspotY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.SweetProtocol.SetCursorEvent.CursorShape.prototype.setHotspotY = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 type = 5;
 * @return {number}
 */
proto.SweetProtocol.SetCursorEvent.CursorShape.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.SweetProtocol.SetCursorEvent.CursorShape.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bytes data = 6;
 * @return {!(string|Uint8Array)}
 */
proto.SweetProtocol.SetCursorEvent.CursorShape.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes data = 6;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.SweetProtocol.SetCursorEvent.CursorShape.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.SweetProtocol.SetCursorEvent.CursorShape.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.SweetProtocol.SetCursorEvent.CursorShape.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bool visible = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SweetProtocol.SetCursorEvent.prototype.getVisible = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.SweetProtocol.SetCursorEvent.prototype.setVisible = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int32 x = 2;
 * @return {number}
 */
proto.SweetProtocol.SetCursorEvent.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SweetProtocol.SetCursorEvent.prototype.setX = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 y = 3;
 * @return {number}
 */
proto.SweetProtocol.SetCursorEvent.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SweetProtocol.SetCursorEvent.prototype.setY = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional CursorShape shape = 4;
 * @return {?proto.SweetProtocol.SetCursorEvent.CursorShape}
 */
proto.SweetProtocol.SetCursorEvent.prototype.getShape = function() {
  return /** @type{?proto.SweetProtocol.SetCursorEvent.CursorShape} */ (
    jspb.Message.getWrapperField(this, proto.SweetProtocol.SetCursorEvent.CursorShape, 4));
};


/** @param {?proto.SweetProtocol.SetCursorEvent.CursorShape|undefined} value */
proto.SweetProtocol.SetCursorEvent.prototype.setShape = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.SweetProtocol.SetCursorEvent.prototype.clearShape = function() {
  this.setShape(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SweetProtocol.SetCursorEvent.prototype.hasShape = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SweetProtocol.DisplayStreamConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SweetProtocol.DisplayStreamConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SweetProtocol.DisplayStreamConfig.displayName = 'proto.SweetProtocol.DisplayStreamConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SweetProtocol.DisplayStreamConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.SweetProtocol.DisplayStreamConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SweetProtocol.DisplayStreamConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SweetProtocol.DisplayStreamConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    codec: jspb.Message.getFieldWithDefault(msg, 1, ""),
    profile: jspb.Message.getFieldWithDefault(msg, 2, ""),
    preset: jspb.Message.getFieldWithDefault(msg, 3, ""),
    rateControl: jspb.Message.getFieldWithDefault(msg, 4, ""),
    fps: jspb.Message.getFieldWithDefault(msg, 5, 0),
    bitrate: jspb.Message.getFieldWithDefault(msg, 6, 0),
    qmin: jspb.Message.getFieldWithDefault(msg, 7, 0),
    threads: jspb.Message.getFieldWithDefault(msg, 8, 0),
    flags: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SweetProtocol.DisplayStreamConfig}
 */
proto.SweetProtocol.DisplayStreamConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SweetProtocol.DisplayStreamConfig;
  return proto.SweetProtocol.DisplayStreamConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SweetProtocol.DisplayStreamConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SweetProtocol.DisplayStreamConfig}
 */
proto.SweetProtocol.DisplayStreamConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCodec(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProfile(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreset(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRateControl(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFps(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBitrate(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setQmin(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setThreads(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SweetProtocol.DisplayStreamConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SweetProtocol.DisplayStreamConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SweetProtocol.DisplayStreamConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SweetProtocol.DisplayStreamConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCodec();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProfile();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPreset();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRateControl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFps();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getBitrate();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getQmin();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getThreads();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getFlags();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
};


/**
 * optional string codec = 1;
 * @return {string}
 */
proto.SweetProtocol.DisplayStreamConfig.prototype.getCodec = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.SweetProtocol.DisplayStreamConfig.prototype.setCodec = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string profile = 2;
 * @return {string}
 */
proto.SweetProtocol.DisplayStreamConfig.prototype.getProfile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.SweetProtocol.DisplayStreamConfig.prototype.setProfile = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string preset = 3;
 * @return {string}
 */
proto.SweetProtocol.DisplayStreamConfig.prototype.getPreset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.SweetProtocol.DisplayStreamConfig.prototype.setPreset = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string rate_control = 4;
 * @return {string}
 */
proto.SweetProtocol.DisplayStreamConfig.prototype.getRateControl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.SweetProtocol.DisplayStreamConfig.prototype.setRateControl = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 fps = 5;
 * @return {number}
 */
proto.SweetProtocol.DisplayStreamConfig.prototype.getFps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.SweetProtocol.DisplayStreamConfig.prototype.setFps = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 bitrate = 6;
 * @return {number}
 */
proto.SweetProtocol.DisplayStreamConfig.prototype.getBitrate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.SweetProtocol.DisplayStreamConfig.prototype.setBitrate = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 qmin = 7;
 * @return {number}
 */
proto.SweetProtocol.DisplayStreamConfig.prototype.getQmin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.SweetProtocol.DisplayStreamConfig.prototype.setQmin = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 threads = 8;
 * @return {number}
 */
proto.SweetProtocol.DisplayStreamConfig.prototype.getThreads = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.SweetProtocol.DisplayStreamConfig.prototype.setThreads = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 flags = 9;
 * @return {number}
 */
proto.SweetProtocol.DisplayStreamConfig.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.SweetProtocol.DisplayStreamConfig.prototype.setFlags = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SweetProtocol.PlaybackStreamConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SweetProtocol.PlaybackStreamConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SweetProtocol.PlaybackStreamConfig.displayName = 'proto.SweetProtocol.PlaybackStreamConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SweetProtocol.PlaybackStreamConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.SweetProtocol.PlaybackStreamConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SweetProtocol.PlaybackStreamConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SweetProtocol.PlaybackStreamConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    codec: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SweetProtocol.PlaybackStreamConfig}
 */
proto.SweetProtocol.PlaybackStreamConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SweetProtocol.PlaybackStreamConfig;
  return proto.SweetProtocol.PlaybackStreamConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SweetProtocol.PlaybackStreamConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SweetProtocol.PlaybackStreamConfig}
 */
proto.SweetProtocol.PlaybackStreamConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCodec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SweetProtocol.PlaybackStreamConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SweetProtocol.PlaybackStreamConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SweetProtocol.PlaybackStreamConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SweetProtocol.PlaybackStreamConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCodec();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string codec = 1;
 * @return {string}
 */
proto.SweetProtocol.PlaybackStreamConfig.prototype.getCodec = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.SweetProtocol.PlaybackStreamConfig.prototype.setCodec = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SweetProtocol.DisplayStreamStartEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SweetProtocol.DisplayStreamStartEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SweetProtocol.DisplayStreamStartEvent.displayName = 'proto.SweetProtocol.DisplayStreamStartEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SweetProtocol.DisplayStreamStartEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.SweetProtocol.DisplayStreamStartEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SweetProtocol.DisplayStreamStartEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SweetProtocol.DisplayStreamStartEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    width: jspb.Message.getFieldWithDefault(msg, 1, 0),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SweetProtocol.DisplayStreamStartEvent}
 */
proto.SweetProtocol.DisplayStreamStartEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SweetProtocol.DisplayStreamStartEvent;
  return proto.SweetProtocol.DisplayStreamStartEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SweetProtocol.DisplayStreamStartEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SweetProtocol.DisplayStreamStartEvent}
 */
proto.SweetProtocol.DisplayStreamStartEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SweetProtocol.DisplayStreamStartEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SweetProtocol.DisplayStreamStartEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SweetProtocol.DisplayStreamStartEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SweetProtocol.DisplayStreamStartEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWidth();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 width = 1;
 * @return {number}
 */
proto.SweetProtocol.DisplayStreamStartEvent.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SweetProtocol.DisplayStreamStartEvent.prototype.setWidth = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 height = 2;
 * @return {number}
 */
proto.SweetProtocol.DisplayStreamStartEvent.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SweetProtocol.DisplayStreamStartEvent.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SweetProtocol.PlaybackStartEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SweetProtocol.PlaybackStartEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SweetProtocol.PlaybackStartEvent.displayName = 'proto.SweetProtocol.PlaybackStartEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SweetProtocol.PlaybackStartEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.SweetProtocol.PlaybackStartEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SweetProtocol.PlaybackStartEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SweetProtocol.PlaybackStartEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    playbackId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    codec: jspb.Message.getFieldWithDefault(msg, 2, 0),
    format: jspb.Message.getFieldWithDefault(msg, 3, 0),
    channels: jspb.Message.getFieldWithDefault(msg, 4, 0),
    frequency: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SweetProtocol.PlaybackStartEvent}
 */
proto.SweetProtocol.PlaybackStartEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SweetProtocol.PlaybackStartEvent;
  return proto.SweetProtocol.PlaybackStartEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SweetProtocol.PlaybackStartEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SweetProtocol.PlaybackStartEvent}
 */
proto.SweetProtocol.PlaybackStartEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPlaybackId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCodec(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFormat(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChannels(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFrequency(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SweetProtocol.PlaybackStartEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SweetProtocol.PlaybackStartEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SweetProtocol.PlaybackStartEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SweetProtocol.PlaybackStartEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlaybackId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCodec();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getFormat();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getChannels();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getFrequency();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional uint32 playback_id = 1;
 * @return {number}
 */
proto.SweetProtocol.PlaybackStartEvent.prototype.getPlaybackId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SweetProtocol.PlaybackStartEvent.prototype.setPlaybackId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 codec = 2;
 * @return {number}
 */
proto.SweetProtocol.PlaybackStartEvent.prototype.getCodec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SweetProtocol.PlaybackStartEvent.prototype.setCodec = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 format = 3;
 * @return {number}
 */
proto.SweetProtocol.PlaybackStartEvent.prototype.getFormat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SweetProtocol.PlaybackStartEvent.prototype.setFormat = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 channels = 4;
 * @return {number}
 */
proto.SweetProtocol.PlaybackStartEvent.prototype.getChannels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.SweetProtocol.PlaybackStartEvent.prototype.setChannels = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 frequency = 5;
 * @return {number}
 */
proto.SweetProtocol.PlaybackStartEvent.prototype.getFrequency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.SweetProtocol.PlaybackStartEvent.prototype.setFrequency = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * @enum {number}
 */
proto.SweetProtocol.SweetCommand = {
  KINVALID: 0,
  KQUERYSTATUS: 16,
  KRESETMACHINE: 32,
  KSTARTUPMACHINE: 33,
  KSHUTDOWNMACHINE: 34,
  KPAUSEMACHINE: 35,
  KRESUMEMACHINE: 36,
  KSAVEMACHINE: 37,
  KFREEZEDISK: 48,
  KTHAWDISK: 49,
  KSAVEDISK: 50,
  KSENDKEYBOARDINPUT: 64,
  KSENDPOINTERINPUT: 65,
  KCONFIGMONITORS: 80,
  KQUERYSCREENSHOT: 81,
  KSTARTDISPLAYSTREAM: 82,
  KSTOPDISPLAYSTREAM: 83,
  KREFRESHDISPLAYSTREAM: 84,
  KSTARTPLAYBACKSTREAM: 96,
  KSTOPPLAYBACKSTREAM: 97,
  KSTARTRECORDSTREAM: 112,
  KSTOPRECORDSTREAM: 113,
  KSENDRECORDSTREAMDATA: 114,
  KCOPYTOGUEST: 128,
  KPASTEFROMGUEST: 129,
  KCONNECTUSB: 144,
  KDISCONNECTUSB: 145,
  KSENDUSBDATA: 146,
  KSTARTTCPSERVICE: 160,
  KCONNECTTCP: 161,
  KCLOSETCP: 162,
  KSENDTCPDATA: 163
};

/**
 * @enum {number}
 */
proto.SweetProtocol.SweetResponseAndEvent = {
  KINVALIDRESPONSE: 0,
  KQUERYSTATUSRESPONSE: 4112,
  KQUERYSCREENSHOTRESPONSE: 4176,
  KSETCURSOREVENT: 4177,
  KDISPLAYSTREAMSTARTEVENT: 4178,
  KDISPLAYSTREAMSTOPEVENT: 4179,
  KDISPLAYSTREAMDATAEVENT: 4180,
  KPLAYBACKSTARTEVENT: 4192,
  KPLAYBACKSTOPEVENT: 4193,
  KPLAYBACKDATAEVENT: 4194
};

goog.object.extend(exports, proto.SweetProtocol);
