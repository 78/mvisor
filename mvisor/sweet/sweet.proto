syntax = "proto3";
package SweetProtocol;

enum SweetCommand {
  kInvalid                = 0x00;
  kQueryStatus            = 0x10;
  /* Machine operations */
  kResetMachine           = 0x20;
  kStartupMachine         = 0x21;
  kShutdownMachine        = 0x22;
  kPauseMachine           = 0x23;
  kResumeMachine          = 0x24;
  kSaveMachine            = 0x25;
  kQuitMachine            = 0x26;
  /* Guest operations */
  kQemuGuestCommand       = 0x30;
  /* Input */
  kSendKeyboardInput      = 0x40;
  kSendPointerInput       = 0x41;
  /* Display */
  kConfigMonitors         = 0x50;
  kQueryScreenshot        = 0x51;
  kStartDisplayStream     = 0x52;
  kStopDisplayStream      = 0x53;
  kRefreshDisplayStream   = 0x54;
  /* Playback */
  kStartPlaybackStream    = 0x60;
  kStopPlaybackStream     = 0x61;
  /* Record */
  kStartRecordStream      = 0x70;
  kStopRecordStream       = 0x71;
  kSendRecordStreamData   = 0x72;
  /* Clipboard */
  kCopyToGuest            = 0x80;
  kPasteFromGuest         = 0x81;
  /* USB */
  kConnectUsb             = 0x90;
  kDisconnectUsb          = 0x91;
  kSendUsbData            = 0x92;
  /* Network */
  kStartTcpService        = 0xA0;
  kConnectTcp             = 0xA1;
  kCloseTcp               = 0xA2;
  kSendTcpData            = 0xA3;
}

enum SweetResponseAndEvent {
  kInvalidResponse            = 0x0000;
  kCommandAcknowledge         = 0x1000;
  kQueryStatusResponse        = 0x1010;
  kQemuGuestCommandResponse   = 0x1030;

  kQueryScreenshotResponse    = 0x1050;
  kSetCursorEvent             = 0x1051;
  kDisplayStreamStartEvent    = 0x1052;
  kDisplayStreamStopEvent     = 0x1053;
  kDisplayStreamDataEvent     = 0x1054;

  kPlaybackStreamStartEvent   = 0x1060;
  kPlaybackStreamStopEvent    = 0x1061;
  kPlaybackStreamDataEvent    = 0x1062;
}


message QueryStatusResponse {
  bool      debug       = 1;
  bool      hypervisor  = 2;
  string    status      = 3;
  uint32    vcpu_count  = 4;
  uint64    memory_size = 5;
  string    vm_uuid     = 6;
  string    vm_name     = 7;
  string    config_path = 8;

  /* capabilities */
  bool      spice_agent     = 1001;
  bool      qemu_agent      = 1002;
  bool      tenclass_agent  = 1005;
}

message SaveMachineOptions {
  string    path        = 1;
}

message SendKeyboardInput {
  uint32    scancode    = 1;
  bool      pressed     = 2;
  uint32    modifiers   = 3;
}

message SendPointerInput {
  enum PointerButtonBit {
    LEFT    = 0;
    MIDDLE  = 1;
    RIGHT   = 2;
  }

  uint32    buttons     = 1;
  int32     x           = 2;
  int32     y           = 3;
  int32     z           = 4;
}

message QueryScreeenshot {
  string    format      = 1;
  uint32    width       = 2;
  uint32    height      = 3;
}

message QueryScreenshotResponse {
  string    format      = 1;
  uint32    width       = 2;
  uint32    height      = 3;
  bytes     data        = 4;
}

message MonitorsConfig {
  message Monitor {
    uint32  index   = 1;
    uint32  left    = 2;
    uint32  top     = 3;
    uint32  width   = 4;
    uint32  height  = 5;
    uint32  depth   = 6;
  }
  uint32            count     = 1;
  repeated Monitor  monitors  = 2;
}

message SetCursorEvent {
  message CursorShape {
    uint32  width     = 1;
    uint32  height    = 2;
    int32   hotspot_x = 3;
    int32   hotspot_y = 4;
    uint32  type      = 5;
    bytes   data      = 6;
  }

  bool        visible   = 1;
  int32       x         = 2;
  int32       y         = 3;
  CursorShape shape     = 4;
}

message DisplayStreamConfig {
  /* codec: x264 / x265 / av1 */
  string    codec       = 1;
  /* profile: baseline / main / high */
  string    profile     = 2;
  /* preset: ultrafast / superfast / veryfast / faster / fast */
  string    preset      = 3;
  /* rc: vbr / cbr */
  string    rate_control= 4;
  /* fps: for QXL, 16 / 32 / 64 */
  uint32    fps         = 5;
  /* bitrate: for vbr, it's max bitrate */
  uint32    bitrate     = 6;
  /* qmin: for vbr, minimal quality */
  uint32    qmin        = 7;
  /* threads: number of sliced-threads */
  uint32    threads     = 8;
  /* codec specific flags: for x264, 1: fast decode, 2: cabac, 4: num_ref_frames=3 */
  uint32    flags       = 9;
}

message PlaybackStreamConfig {
  /* pcm / opus */
  string    codec       = 1;
}

message DisplayStreamStartEvent {
  uint32    width       = 1;
  uint32    height      = 2;
}

message PlaybackStreamStartEvent {
  uint32    playback_id = 1;
  string    codec       = 2;
  uint32    format      = 3;
  uint32    channels    = 4;
  uint32    frequency   = 5;
}

