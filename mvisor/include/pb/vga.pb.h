// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vga.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vga_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vga_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vga_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vga_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vga_2eproto;
class VbeState;
struct VbeStateDefaultTypeInternal;
extern VbeStateDefaultTypeInternal _VbeState_default_instance_;
class VgaState;
struct VgaStateDefaultTypeInternal;
extern VgaStateDefaultTypeInternal _VgaState_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::VbeState* Arena::CreateMaybeMessage<::VbeState>(Arena*);
template<> ::VgaState* Arena::CreateMaybeMessage<::VgaState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class VgaState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VgaState) */ {
 public:
  inline VgaState() : VgaState(nullptr) {}
  ~VgaState() override;
  explicit constexpr VgaState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VgaState(const VgaState& from);
  VgaState(VgaState&& from) noexcept
    : VgaState() {
    *this = ::std::move(from);
  }

  inline VgaState& operator=(const VgaState& from) {
    CopyFrom(from);
    return *this;
  }
  inline VgaState& operator=(VgaState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VgaState& default_instance() {
    return *internal_default_instance();
  }
  static inline const VgaState* internal_default_instance() {
    return reinterpret_cast<const VgaState*>(
               &_VgaState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VgaState& a, VgaState& b) {
    a.Swap(&b);
  }
  inline void Swap(VgaState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VgaState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VgaState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VgaState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VgaState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VgaState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VgaState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VgaState";
  }
  protected:
  explicit VgaState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSequenceFieldNumber = 4,
    kGfxFieldNumber = 6,
    kAttributeFieldNumber = 8,
    kCrtcFieldNumber = 10,
    kPalleteFieldNumber = 13,
    kMiscOutputFieldNumber = 1,
    kStatusFieldNumber = 2,
    kSequenceIndexFieldNumber = 3,
    kGfxIndexFieldNumber = 5,
    kAttributeIndexFieldNumber = 7,
    kCrtcIndexFieldNumber = 9,
    kPalleteReadIndexFieldNumber = 11,
    kPalleteWriteIndexFieldNumber = 12,
    kDacStateFieldNumber = 14,
    kFeatureControlFieldNumber = 15,
  };
  // bytes sequence = 4;
  void clear_sequence();
  const std::string& sequence() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sequence(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sequence();
  PROTOBUF_NODISCARD std::string* release_sequence();
  void set_allocated_sequence(std::string* sequence);
  private:
  const std::string& _internal_sequence() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sequence(const std::string& value);
  std::string* _internal_mutable_sequence();
  public:

  // bytes gfx = 6;
  void clear_gfx();
  const std::string& gfx() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gfx(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gfx();
  PROTOBUF_NODISCARD std::string* release_gfx();
  void set_allocated_gfx(std::string* gfx);
  private:
  const std::string& _internal_gfx() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gfx(const std::string& value);
  std::string* _internal_mutable_gfx();
  public:

  // bytes attribute = 8;
  void clear_attribute();
  const std::string& attribute() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attribute(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attribute();
  PROTOBUF_NODISCARD std::string* release_attribute();
  void set_allocated_attribute(std::string* attribute);
  private:
  const std::string& _internal_attribute() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attribute(const std::string& value);
  std::string* _internal_mutable_attribute();
  public:

  // bytes crtc = 10;
  void clear_crtc();
  const std::string& crtc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_crtc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_crtc();
  PROTOBUF_NODISCARD std::string* release_crtc();
  void set_allocated_crtc(std::string* crtc);
  private:
  const std::string& _internal_crtc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_crtc(const std::string& value);
  std::string* _internal_mutable_crtc();
  public:

  // bytes pallete = 13;
  void clear_pallete();
  const std::string& pallete() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pallete(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pallete();
  PROTOBUF_NODISCARD std::string* release_pallete();
  void set_allocated_pallete(std::string* pallete);
  private:
  const std::string& _internal_pallete() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pallete(const std::string& value);
  std::string* _internal_mutable_pallete();
  public:

  // uint32 misc_output = 1;
  void clear_misc_output();
  uint32_t misc_output() const;
  void set_misc_output(uint32_t value);
  private:
  uint32_t _internal_misc_output() const;
  void _internal_set_misc_output(uint32_t value);
  public:

  // uint32 status = 2;
  void clear_status();
  uint32_t status() const;
  void set_status(uint32_t value);
  private:
  uint32_t _internal_status() const;
  void _internal_set_status(uint32_t value);
  public:

  // uint32 sequence_index = 3;
  void clear_sequence_index();
  uint32_t sequence_index() const;
  void set_sequence_index(uint32_t value);
  private:
  uint32_t _internal_sequence_index() const;
  void _internal_set_sequence_index(uint32_t value);
  public:

  // uint32 gfx_index = 5;
  void clear_gfx_index();
  uint32_t gfx_index() const;
  void set_gfx_index(uint32_t value);
  private:
  uint32_t _internal_gfx_index() const;
  void _internal_set_gfx_index(uint32_t value);
  public:

  // uint32 attribute_index = 7;
  void clear_attribute_index();
  uint32_t attribute_index() const;
  void set_attribute_index(uint32_t value);
  private:
  uint32_t _internal_attribute_index() const;
  void _internal_set_attribute_index(uint32_t value);
  public:

  // uint32 crtc_index = 9;
  void clear_crtc_index();
  uint32_t crtc_index() const;
  void set_crtc_index(uint32_t value);
  private:
  uint32_t _internal_crtc_index() const;
  void _internal_set_crtc_index(uint32_t value);
  public:

  // uint32 pallete_read_index = 11;
  void clear_pallete_read_index();
  uint32_t pallete_read_index() const;
  void set_pallete_read_index(uint32_t value);
  private:
  uint32_t _internal_pallete_read_index() const;
  void _internal_set_pallete_read_index(uint32_t value);
  public:

  // uint32 pallete_write_index = 12;
  void clear_pallete_write_index();
  uint32_t pallete_write_index() const;
  void set_pallete_write_index(uint32_t value);
  private:
  uint32_t _internal_pallete_write_index() const;
  void _internal_set_pallete_write_index(uint32_t value);
  public:

  // uint32 dac_state = 14;
  void clear_dac_state();
  uint32_t dac_state() const;
  void set_dac_state(uint32_t value);
  private:
  uint32_t _internal_dac_state() const;
  void _internal_set_dac_state(uint32_t value);
  public:

  // uint32 feature_control = 15;
  void clear_feature_control();
  uint32_t feature_control() const;
  void set_feature_control(uint32_t value);
  private:
  uint32_t _internal_feature_control() const;
  void _internal_set_feature_control(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:VgaState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sequence_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gfx_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attribute_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crtc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pallete_;
  uint32_t misc_output_;
  uint32_t status_;
  uint32_t sequence_index_;
  uint32_t gfx_index_;
  uint32_t attribute_index_;
  uint32_t crtc_index_;
  uint32_t pallete_read_index_;
  uint32_t pallete_write_index_;
  uint32_t dac_state_;
  uint32_t feature_control_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vga_2eproto;
};
// -------------------------------------------------------------------

class VbeState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VbeState) */ {
 public:
  inline VbeState() : VbeState(nullptr) {}
  ~VbeState() override;
  explicit constexpr VbeState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VbeState(const VbeState& from);
  VbeState(VbeState&& from) noexcept
    : VbeState() {
    *this = ::std::move(from);
  }

  inline VbeState& operator=(const VbeState& from) {
    CopyFrom(from);
    return *this;
  }
  inline VbeState& operator=(VbeState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VbeState& default_instance() {
    return *internal_default_instance();
  }
  static inline const VbeState* internal_default_instance() {
    return reinterpret_cast<const VbeState*>(
               &_VbeState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VbeState& a, VbeState& b) {
    a.Swap(&b);
  }
  inline void Swap(VbeState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VbeState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VbeState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VbeState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VbeState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VbeState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VbeState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VbeState";
  }
  protected:
  explicit VbeState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegistersFieldNumber = 3,
    kVersionFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // bytes registers = 3;
  void clear_registers();
  const std::string& registers() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_registers(ArgT0&& arg0, ArgT... args);
  std::string* mutable_registers();
  PROTOBUF_NODISCARD std::string* release_registers();
  void set_allocated_registers(std::string* registers);
  private:
  const std::string& _internal_registers() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_registers(const std::string& value);
  std::string* _internal_mutable_registers();
  public:

  // uint32 version = 1;
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // uint32 index = 2;
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:VbeState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr registers_;
  uint32_t version_;
  uint32_t index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vga_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VgaState

// uint32 misc_output = 1;
inline void VgaState::clear_misc_output() {
  misc_output_ = 0u;
}
inline uint32_t VgaState::_internal_misc_output() const {
  return misc_output_;
}
inline uint32_t VgaState::misc_output() const {
  // @@protoc_insertion_point(field_get:VgaState.misc_output)
  return _internal_misc_output();
}
inline void VgaState::_internal_set_misc_output(uint32_t value) {
  
  misc_output_ = value;
}
inline void VgaState::set_misc_output(uint32_t value) {
  _internal_set_misc_output(value);
  // @@protoc_insertion_point(field_set:VgaState.misc_output)
}

// uint32 status = 2;
inline void VgaState::clear_status() {
  status_ = 0u;
}
inline uint32_t VgaState::_internal_status() const {
  return status_;
}
inline uint32_t VgaState::status() const {
  // @@protoc_insertion_point(field_get:VgaState.status)
  return _internal_status();
}
inline void VgaState::_internal_set_status(uint32_t value) {
  
  status_ = value;
}
inline void VgaState::set_status(uint32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:VgaState.status)
}

// uint32 sequence_index = 3;
inline void VgaState::clear_sequence_index() {
  sequence_index_ = 0u;
}
inline uint32_t VgaState::_internal_sequence_index() const {
  return sequence_index_;
}
inline uint32_t VgaState::sequence_index() const {
  // @@protoc_insertion_point(field_get:VgaState.sequence_index)
  return _internal_sequence_index();
}
inline void VgaState::_internal_set_sequence_index(uint32_t value) {
  
  sequence_index_ = value;
}
inline void VgaState::set_sequence_index(uint32_t value) {
  _internal_set_sequence_index(value);
  // @@protoc_insertion_point(field_set:VgaState.sequence_index)
}

// bytes sequence = 4;
inline void VgaState::clear_sequence() {
  sequence_.ClearToEmpty();
}
inline const std::string& VgaState::sequence() const {
  // @@protoc_insertion_point(field_get:VgaState.sequence)
  return _internal_sequence();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VgaState::set_sequence(ArgT0&& arg0, ArgT... args) {
 
 sequence_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:VgaState.sequence)
}
inline std::string* VgaState::mutable_sequence() {
  std::string* _s = _internal_mutable_sequence();
  // @@protoc_insertion_point(field_mutable:VgaState.sequence)
  return _s;
}
inline const std::string& VgaState::_internal_sequence() const {
  return sequence_.Get();
}
inline void VgaState::_internal_set_sequence(const std::string& value) {
  
  sequence_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VgaState::_internal_mutable_sequence() {
  
  return sequence_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VgaState::release_sequence() {
  // @@protoc_insertion_point(field_release:VgaState.sequence)
  return sequence_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VgaState::set_allocated_sequence(std::string* sequence) {
  if (sequence != nullptr) {
    
  } else {
    
  }
  sequence_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sequence,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sequence_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sequence_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:VgaState.sequence)
}

// uint32 gfx_index = 5;
inline void VgaState::clear_gfx_index() {
  gfx_index_ = 0u;
}
inline uint32_t VgaState::_internal_gfx_index() const {
  return gfx_index_;
}
inline uint32_t VgaState::gfx_index() const {
  // @@protoc_insertion_point(field_get:VgaState.gfx_index)
  return _internal_gfx_index();
}
inline void VgaState::_internal_set_gfx_index(uint32_t value) {
  
  gfx_index_ = value;
}
inline void VgaState::set_gfx_index(uint32_t value) {
  _internal_set_gfx_index(value);
  // @@protoc_insertion_point(field_set:VgaState.gfx_index)
}

// bytes gfx = 6;
inline void VgaState::clear_gfx() {
  gfx_.ClearToEmpty();
}
inline const std::string& VgaState::gfx() const {
  // @@protoc_insertion_point(field_get:VgaState.gfx)
  return _internal_gfx();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VgaState::set_gfx(ArgT0&& arg0, ArgT... args) {
 
 gfx_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:VgaState.gfx)
}
inline std::string* VgaState::mutable_gfx() {
  std::string* _s = _internal_mutable_gfx();
  // @@protoc_insertion_point(field_mutable:VgaState.gfx)
  return _s;
}
inline const std::string& VgaState::_internal_gfx() const {
  return gfx_.Get();
}
inline void VgaState::_internal_set_gfx(const std::string& value) {
  
  gfx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VgaState::_internal_mutable_gfx() {
  
  return gfx_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VgaState::release_gfx() {
  // @@protoc_insertion_point(field_release:VgaState.gfx)
  return gfx_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VgaState::set_allocated_gfx(std::string* gfx) {
  if (gfx != nullptr) {
    
  } else {
    
  }
  gfx_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gfx,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gfx_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gfx_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:VgaState.gfx)
}

// uint32 attribute_index = 7;
inline void VgaState::clear_attribute_index() {
  attribute_index_ = 0u;
}
inline uint32_t VgaState::_internal_attribute_index() const {
  return attribute_index_;
}
inline uint32_t VgaState::attribute_index() const {
  // @@protoc_insertion_point(field_get:VgaState.attribute_index)
  return _internal_attribute_index();
}
inline void VgaState::_internal_set_attribute_index(uint32_t value) {
  
  attribute_index_ = value;
}
inline void VgaState::set_attribute_index(uint32_t value) {
  _internal_set_attribute_index(value);
  // @@protoc_insertion_point(field_set:VgaState.attribute_index)
}

// bytes attribute = 8;
inline void VgaState::clear_attribute() {
  attribute_.ClearToEmpty();
}
inline const std::string& VgaState::attribute() const {
  // @@protoc_insertion_point(field_get:VgaState.attribute)
  return _internal_attribute();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VgaState::set_attribute(ArgT0&& arg0, ArgT... args) {
 
 attribute_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:VgaState.attribute)
}
inline std::string* VgaState::mutable_attribute() {
  std::string* _s = _internal_mutable_attribute();
  // @@protoc_insertion_point(field_mutable:VgaState.attribute)
  return _s;
}
inline const std::string& VgaState::_internal_attribute() const {
  return attribute_.Get();
}
inline void VgaState::_internal_set_attribute(const std::string& value) {
  
  attribute_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VgaState::_internal_mutable_attribute() {
  
  return attribute_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VgaState::release_attribute() {
  // @@protoc_insertion_point(field_release:VgaState.attribute)
  return attribute_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VgaState::set_allocated_attribute(std::string* attribute) {
  if (attribute != nullptr) {
    
  } else {
    
  }
  attribute_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attribute,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (attribute_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    attribute_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:VgaState.attribute)
}

// uint32 crtc_index = 9;
inline void VgaState::clear_crtc_index() {
  crtc_index_ = 0u;
}
inline uint32_t VgaState::_internal_crtc_index() const {
  return crtc_index_;
}
inline uint32_t VgaState::crtc_index() const {
  // @@protoc_insertion_point(field_get:VgaState.crtc_index)
  return _internal_crtc_index();
}
inline void VgaState::_internal_set_crtc_index(uint32_t value) {
  
  crtc_index_ = value;
}
inline void VgaState::set_crtc_index(uint32_t value) {
  _internal_set_crtc_index(value);
  // @@protoc_insertion_point(field_set:VgaState.crtc_index)
}

// bytes crtc = 10;
inline void VgaState::clear_crtc() {
  crtc_.ClearToEmpty();
}
inline const std::string& VgaState::crtc() const {
  // @@protoc_insertion_point(field_get:VgaState.crtc)
  return _internal_crtc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VgaState::set_crtc(ArgT0&& arg0, ArgT... args) {
 
 crtc_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:VgaState.crtc)
}
inline std::string* VgaState::mutable_crtc() {
  std::string* _s = _internal_mutable_crtc();
  // @@protoc_insertion_point(field_mutable:VgaState.crtc)
  return _s;
}
inline const std::string& VgaState::_internal_crtc() const {
  return crtc_.Get();
}
inline void VgaState::_internal_set_crtc(const std::string& value) {
  
  crtc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VgaState::_internal_mutable_crtc() {
  
  return crtc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VgaState::release_crtc() {
  // @@protoc_insertion_point(field_release:VgaState.crtc)
  return crtc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VgaState::set_allocated_crtc(std::string* crtc) {
  if (crtc != nullptr) {
    
  } else {
    
  }
  crtc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), crtc,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (crtc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    crtc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:VgaState.crtc)
}

// uint32 pallete_read_index = 11;
inline void VgaState::clear_pallete_read_index() {
  pallete_read_index_ = 0u;
}
inline uint32_t VgaState::_internal_pallete_read_index() const {
  return pallete_read_index_;
}
inline uint32_t VgaState::pallete_read_index() const {
  // @@protoc_insertion_point(field_get:VgaState.pallete_read_index)
  return _internal_pallete_read_index();
}
inline void VgaState::_internal_set_pallete_read_index(uint32_t value) {
  
  pallete_read_index_ = value;
}
inline void VgaState::set_pallete_read_index(uint32_t value) {
  _internal_set_pallete_read_index(value);
  // @@protoc_insertion_point(field_set:VgaState.pallete_read_index)
}

// uint32 pallete_write_index = 12;
inline void VgaState::clear_pallete_write_index() {
  pallete_write_index_ = 0u;
}
inline uint32_t VgaState::_internal_pallete_write_index() const {
  return pallete_write_index_;
}
inline uint32_t VgaState::pallete_write_index() const {
  // @@protoc_insertion_point(field_get:VgaState.pallete_write_index)
  return _internal_pallete_write_index();
}
inline void VgaState::_internal_set_pallete_write_index(uint32_t value) {
  
  pallete_write_index_ = value;
}
inline void VgaState::set_pallete_write_index(uint32_t value) {
  _internal_set_pallete_write_index(value);
  // @@protoc_insertion_point(field_set:VgaState.pallete_write_index)
}

// bytes pallete = 13;
inline void VgaState::clear_pallete() {
  pallete_.ClearToEmpty();
}
inline const std::string& VgaState::pallete() const {
  // @@protoc_insertion_point(field_get:VgaState.pallete)
  return _internal_pallete();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VgaState::set_pallete(ArgT0&& arg0, ArgT... args) {
 
 pallete_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:VgaState.pallete)
}
inline std::string* VgaState::mutable_pallete() {
  std::string* _s = _internal_mutable_pallete();
  // @@protoc_insertion_point(field_mutable:VgaState.pallete)
  return _s;
}
inline const std::string& VgaState::_internal_pallete() const {
  return pallete_.Get();
}
inline void VgaState::_internal_set_pallete(const std::string& value) {
  
  pallete_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VgaState::_internal_mutable_pallete() {
  
  return pallete_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VgaState::release_pallete() {
  // @@protoc_insertion_point(field_release:VgaState.pallete)
  return pallete_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VgaState::set_allocated_pallete(std::string* pallete) {
  if (pallete != nullptr) {
    
  } else {
    
  }
  pallete_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pallete,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pallete_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pallete_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:VgaState.pallete)
}

// uint32 dac_state = 14;
inline void VgaState::clear_dac_state() {
  dac_state_ = 0u;
}
inline uint32_t VgaState::_internal_dac_state() const {
  return dac_state_;
}
inline uint32_t VgaState::dac_state() const {
  // @@protoc_insertion_point(field_get:VgaState.dac_state)
  return _internal_dac_state();
}
inline void VgaState::_internal_set_dac_state(uint32_t value) {
  
  dac_state_ = value;
}
inline void VgaState::set_dac_state(uint32_t value) {
  _internal_set_dac_state(value);
  // @@protoc_insertion_point(field_set:VgaState.dac_state)
}

// uint32 feature_control = 15;
inline void VgaState::clear_feature_control() {
  feature_control_ = 0u;
}
inline uint32_t VgaState::_internal_feature_control() const {
  return feature_control_;
}
inline uint32_t VgaState::feature_control() const {
  // @@protoc_insertion_point(field_get:VgaState.feature_control)
  return _internal_feature_control();
}
inline void VgaState::_internal_set_feature_control(uint32_t value) {
  
  feature_control_ = value;
}
inline void VgaState::set_feature_control(uint32_t value) {
  _internal_set_feature_control(value);
  // @@protoc_insertion_point(field_set:VgaState.feature_control)
}

// -------------------------------------------------------------------

// VbeState

// uint32 version = 1;
inline void VbeState::clear_version() {
  version_ = 0u;
}
inline uint32_t VbeState::_internal_version() const {
  return version_;
}
inline uint32_t VbeState::version() const {
  // @@protoc_insertion_point(field_get:VbeState.version)
  return _internal_version();
}
inline void VbeState::_internal_set_version(uint32_t value) {
  
  version_ = value;
}
inline void VbeState::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:VbeState.version)
}

// uint32 index = 2;
inline void VbeState::clear_index() {
  index_ = 0u;
}
inline uint32_t VbeState::_internal_index() const {
  return index_;
}
inline uint32_t VbeState::index() const {
  // @@protoc_insertion_point(field_get:VbeState.index)
  return _internal_index();
}
inline void VbeState::_internal_set_index(uint32_t value) {
  
  index_ = value;
}
inline void VbeState::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:VbeState.index)
}

// bytes registers = 3;
inline void VbeState::clear_registers() {
  registers_.ClearToEmpty();
}
inline const std::string& VbeState::registers() const {
  // @@protoc_insertion_point(field_get:VbeState.registers)
  return _internal_registers();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VbeState::set_registers(ArgT0&& arg0, ArgT... args) {
 
 registers_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:VbeState.registers)
}
inline std::string* VbeState::mutable_registers() {
  std::string* _s = _internal_mutable_registers();
  // @@protoc_insertion_point(field_mutable:VbeState.registers)
  return _s;
}
inline const std::string& VbeState::_internal_registers() const {
  return registers_.Get();
}
inline void VbeState::_internal_set_registers(const std::string& value) {
  
  registers_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VbeState::_internal_mutable_registers() {
  
  return registers_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VbeState::release_registers() {
  // @@protoc_insertion_point(field_release:VbeState.registers)
  return registers_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VbeState::set_allocated_registers(std::string* registers) {
  if (registers != nullptr) {
    
  } else {
    
  }
  registers_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), registers,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (registers_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    registers_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:VbeState.registers)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vga_2eproto
