// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ahci_host.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ahci_5fhost_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ahci_5fhost_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ahci_5fhost_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ahci_5fhost_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ahci_5fhost_2eproto;
class AhciHostState;
struct AhciHostStateDefaultTypeInternal;
extern AhciHostStateDefaultTypeInternal _AhciHostState_default_instance_;
class AhciHostState_ControlRegisters;
struct AhciHostState_ControlRegistersDefaultTypeInternal;
extern AhciHostState_ControlRegistersDefaultTypeInternal _AhciHostState_ControlRegisters_default_instance_;
class AhciHostState_PortRegisters;
struct AhciHostState_PortRegistersDefaultTypeInternal;
extern AhciHostState_PortRegistersDefaultTypeInternal _AhciHostState_PortRegisters_default_instance_;
class AhciHostState_PortState;
struct AhciHostState_PortStateDefaultTypeInternal;
extern AhciHostState_PortStateDefaultTypeInternal _AhciHostState_PortState_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AhciHostState* Arena::CreateMaybeMessage<::AhciHostState>(Arena*);
template<> ::AhciHostState_ControlRegisters* Arena::CreateMaybeMessage<::AhciHostState_ControlRegisters>(Arena*);
template<> ::AhciHostState_PortRegisters* Arena::CreateMaybeMessage<::AhciHostState_PortRegisters>(Arena*);
template<> ::AhciHostState_PortState* Arena::CreateMaybeMessage<::AhciHostState_PortState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class AhciHostState_ControlRegisters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AhciHostState.ControlRegisters) */ {
 public:
  inline AhciHostState_ControlRegisters() : AhciHostState_ControlRegisters(nullptr) {}
  ~AhciHostState_ControlRegisters() override;
  explicit constexpr AhciHostState_ControlRegisters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AhciHostState_ControlRegisters(const AhciHostState_ControlRegisters& from);
  AhciHostState_ControlRegisters(AhciHostState_ControlRegisters&& from) noexcept
    : AhciHostState_ControlRegisters() {
    *this = ::std::move(from);
  }

  inline AhciHostState_ControlRegisters& operator=(const AhciHostState_ControlRegisters& from) {
    CopyFrom(from);
    return *this;
  }
  inline AhciHostState_ControlRegisters& operator=(AhciHostState_ControlRegisters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AhciHostState_ControlRegisters& default_instance() {
    return *internal_default_instance();
  }
  static inline const AhciHostState_ControlRegisters* internal_default_instance() {
    return reinterpret_cast<const AhciHostState_ControlRegisters*>(
               &_AhciHostState_ControlRegisters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AhciHostState_ControlRegisters& a, AhciHostState_ControlRegisters& b) {
    a.Swap(&b);
  }
  inline void Swap(AhciHostState_ControlRegisters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AhciHostState_ControlRegisters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AhciHostState_ControlRegisters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AhciHostState_ControlRegisters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AhciHostState_ControlRegisters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AhciHostState_ControlRegisters& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AhciHostState_ControlRegisters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AhciHostState.ControlRegisters";
  }
  protected:
  explicit AhciHostState_ControlRegisters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCapabilitiesFieldNumber = 1,
    kGlobalHostControlFieldNumber = 2,
    kIrqStatusFieldNumber = 3,
    kPortsImplementedFieldNumber = 4,
    kVersionFieldNumber = 5,
  };
  // uint32 capabilities = 1;
  void clear_capabilities();
  uint32_t capabilities() const;
  void set_capabilities(uint32_t value);
  private:
  uint32_t _internal_capabilities() const;
  void _internal_set_capabilities(uint32_t value);
  public:

  // uint32 global_host_control = 2;
  void clear_global_host_control();
  uint32_t global_host_control() const;
  void set_global_host_control(uint32_t value);
  private:
  uint32_t _internal_global_host_control() const;
  void _internal_set_global_host_control(uint32_t value);
  public:

  // uint32 irq_status = 3;
  void clear_irq_status();
  uint32_t irq_status() const;
  void set_irq_status(uint32_t value);
  private:
  uint32_t _internal_irq_status() const;
  void _internal_set_irq_status(uint32_t value);
  public:

  // uint32 ports_implemented = 4;
  void clear_ports_implemented();
  uint32_t ports_implemented() const;
  void set_ports_implemented(uint32_t value);
  private:
  uint32_t _internal_ports_implemented() const;
  void _internal_set_ports_implemented(uint32_t value);
  public:

  // uint32 version = 5;
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:AhciHostState.ControlRegisters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t capabilities_;
  uint32_t global_host_control_;
  uint32_t irq_status_;
  uint32_t ports_implemented_;
  uint32_t version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ahci_5fhost_2eproto;
};
// -------------------------------------------------------------------

class AhciHostState_PortRegisters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AhciHostState.PortRegisters) */ {
 public:
  inline AhciHostState_PortRegisters() : AhciHostState_PortRegisters(nullptr) {}
  ~AhciHostState_PortRegisters() override;
  explicit constexpr AhciHostState_PortRegisters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AhciHostState_PortRegisters(const AhciHostState_PortRegisters& from);
  AhciHostState_PortRegisters(AhciHostState_PortRegisters&& from) noexcept
    : AhciHostState_PortRegisters() {
    *this = ::std::move(from);
  }

  inline AhciHostState_PortRegisters& operator=(const AhciHostState_PortRegisters& from) {
    CopyFrom(from);
    return *this;
  }
  inline AhciHostState_PortRegisters& operator=(AhciHostState_PortRegisters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AhciHostState_PortRegisters& default_instance() {
    return *internal_default_instance();
  }
  static inline const AhciHostState_PortRegisters* internal_default_instance() {
    return reinterpret_cast<const AhciHostState_PortRegisters*>(
               &_AhciHostState_PortRegisters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AhciHostState_PortRegisters& a, AhciHostState_PortRegisters& b) {
    a.Swap(&b);
  }
  inline void Swap(AhciHostState_PortRegisters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AhciHostState_PortRegisters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AhciHostState_PortRegisters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AhciHostState_PortRegisters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AhciHostState_PortRegisters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AhciHostState_PortRegisters& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AhciHostState_PortRegisters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AhciHostState.PortRegisters";
  }
  protected:
  explicit AhciHostState_PortRegisters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandListBase0FieldNumber = 1,
    kCommandListBase1FieldNumber = 2,
    kFisBase0FieldNumber = 3,
    kFisBase1FieldNumber = 4,
    kIrqStatusFieldNumber = 5,
    kIrqMaskFieldNumber = 6,
    kCommandFieldNumber = 7,
    kTaskFlieDataFieldNumber = 8,
    kSignatureFieldNumber = 9,
    kSataStatusFieldNumber = 10,
    kSataControlFieldNumber = 11,
    kSataErrorFieldNumber = 12,
    kSataActiveFieldNumber = 13,
  };
  // uint32 command_list_base0 = 1;
  void clear_command_list_base0();
  uint32_t command_list_base0() const;
  void set_command_list_base0(uint32_t value);
  private:
  uint32_t _internal_command_list_base0() const;
  void _internal_set_command_list_base0(uint32_t value);
  public:

  // uint32 command_list_base1 = 2;
  void clear_command_list_base1();
  uint32_t command_list_base1() const;
  void set_command_list_base1(uint32_t value);
  private:
  uint32_t _internal_command_list_base1() const;
  void _internal_set_command_list_base1(uint32_t value);
  public:

  // uint32 fis_base0 = 3;
  void clear_fis_base0();
  uint32_t fis_base0() const;
  void set_fis_base0(uint32_t value);
  private:
  uint32_t _internal_fis_base0() const;
  void _internal_set_fis_base0(uint32_t value);
  public:

  // uint32 fis_base1 = 4;
  void clear_fis_base1();
  uint32_t fis_base1() const;
  void set_fis_base1(uint32_t value);
  private:
  uint32_t _internal_fis_base1() const;
  void _internal_set_fis_base1(uint32_t value);
  public:

  // uint32 irq_status = 5;
  void clear_irq_status();
  uint32_t irq_status() const;
  void set_irq_status(uint32_t value);
  private:
  uint32_t _internal_irq_status() const;
  void _internal_set_irq_status(uint32_t value);
  public:

  // uint32 irq_mask = 6;
  void clear_irq_mask();
  uint32_t irq_mask() const;
  void set_irq_mask(uint32_t value);
  private:
  uint32_t _internal_irq_mask() const;
  void _internal_set_irq_mask(uint32_t value);
  public:

  // uint32 command = 7;
  void clear_command();
  uint32_t command() const;
  void set_command(uint32_t value);
  private:
  uint32_t _internal_command() const;
  void _internal_set_command(uint32_t value);
  public:

  // uint32 task_flie_data = 8;
  void clear_task_flie_data();
  uint32_t task_flie_data() const;
  void set_task_flie_data(uint32_t value);
  private:
  uint32_t _internal_task_flie_data() const;
  void _internal_set_task_flie_data(uint32_t value);
  public:

  // uint32 signature = 9;
  void clear_signature();
  uint32_t signature() const;
  void set_signature(uint32_t value);
  private:
  uint32_t _internal_signature() const;
  void _internal_set_signature(uint32_t value);
  public:

  // uint32 sata_status = 10;
  void clear_sata_status();
  uint32_t sata_status() const;
  void set_sata_status(uint32_t value);
  private:
  uint32_t _internal_sata_status() const;
  void _internal_set_sata_status(uint32_t value);
  public:

  // uint32 sata_control = 11;
  void clear_sata_control();
  uint32_t sata_control() const;
  void set_sata_control(uint32_t value);
  private:
  uint32_t _internal_sata_control() const;
  void _internal_set_sata_control(uint32_t value);
  public:

  // uint32 sata_error = 12;
  void clear_sata_error();
  uint32_t sata_error() const;
  void set_sata_error(uint32_t value);
  private:
  uint32_t _internal_sata_error() const;
  void _internal_set_sata_error(uint32_t value);
  public:

  // uint32 sata_active = 13;
  void clear_sata_active();
  uint32_t sata_active() const;
  void set_sata_active(uint32_t value);
  private:
  uint32_t _internal_sata_active() const;
  void _internal_set_sata_active(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:AhciHostState.PortRegisters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t command_list_base0_;
  uint32_t command_list_base1_;
  uint32_t fis_base0_;
  uint32_t fis_base1_;
  uint32_t irq_status_;
  uint32_t irq_mask_;
  uint32_t command_;
  uint32_t task_flie_data_;
  uint32_t signature_;
  uint32_t sata_status_;
  uint32_t sata_control_;
  uint32_t sata_error_;
  uint32_t sata_active_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ahci_5fhost_2eproto;
};
// -------------------------------------------------------------------

class AhciHostState_PortState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AhciHostState.PortState) */ {
 public:
  inline AhciHostState_PortState() : AhciHostState_PortState(nullptr) {}
  ~AhciHostState_PortState() override;
  explicit constexpr AhciHostState_PortState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AhciHostState_PortState(const AhciHostState_PortState& from);
  AhciHostState_PortState(AhciHostState_PortState&& from) noexcept
    : AhciHostState_PortState() {
    *this = ::std::move(from);
  }

  inline AhciHostState_PortState& operator=(const AhciHostState_PortState& from) {
    CopyFrom(from);
    return *this;
  }
  inline AhciHostState_PortState& operator=(AhciHostState_PortState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AhciHostState_PortState& default_instance() {
    return *internal_default_instance();
  }
  static inline const AhciHostState_PortState* internal_default_instance() {
    return reinterpret_cast<const AhciHostState_PortState*>(
               &_AhciHostState_PortState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AhciHostState_PortState& a, AhciHostState_PortState& b) {
    a.Swap(&b);
  }
  inline void Swap(AhciHostState_PortState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AhciHostState_PortState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AhciHostState_PortState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AhciHostState_PortState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AhciHostState_PortState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AhciHostState_PortState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AhciHostState_PortState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AhciHostState.PortState";
  }
  protected:
  explicit AhciHostState_PortState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegistersFieldNumber = 4,
    kIndexFieldNumber = 1,
    kBusySlotFieldNumber = 2,
    kInitD2HSentFieldNumber = 3,
  };
  // .AhciHostState.PortRegisters registers = 4;
  bool has_registers() const;
  private:
  bool _internal_has_registers() const;
  public:
  void clear_registers();
  const ::AhciHostState_PortRegisters& registers() const;
  PROTOBUF_NODISCARD ::AhciHostState_PortRegisters* release_registers();
  ::AhciHostState_PortRegisters* mutable_registers();
  void set_allocated_registers(::AhciHostState_PortRegisters* registers);
  private:
  const ::AhciHostState_PortRegisters& _internal_registers() const;
  ::AhciHostState_PortRegisters* _internal_mutable_registers();
  public:
  void unsafe_arena_set_allocated_registers(
      ::AhciHostState_PortRegisters* registers);
  ::AhciHostState_PortRegisters* unsafe_arena_release_registers();

  // uint32 index = 1;
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // int32 busy_slot = 2;
  void clear_busy_slot();
  int32_t busy_slot() const;
  void set_busy_slot(int32_t value);
  private:
  int32_t _internal_busy_slot() const;
  void _internal_set_busy_slot(int32_t value);
  public:

  // bool init_d2h_sent = 3;
  void clear_init_d2h_sent();
  bool init_d2h_sent() const;
  void set_init_d2h_sent(bool value);
  private:
  bool _internal_init_d2h_sent() const;
  void _internal_set_init_d2h_sent(bool value);
  public:

  // @@protoc_insertion_point(class_scope:AhciHostState.PortState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::AhciHostState_PortRegisters* registers_;
  uint32_t index_;
  int32_t busy_slot_;
  bool init_d2h_sent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ahci_5fhost_2eproto;
};
// -------------------------------------------------------------------

class AhciHostState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AhciHostState) */ {
 public:
  inline AhciHostState() : AhciHostState(nullptr) {}
  ~AhciHostState() override;
  explicit constexpr AhciHostState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AhciHostState(const AhciHostState& from);
  AhciHostState(AhciHostState&& from) noexcept
    : AhciHostState() {
    *this = ::std::move(from);
  }

  inline AhciHostState& operator=(const AhciHostState& from) {
    CopyFrom(from);
    return *this;
  }
  inline AhciHostState& operator=(AhciHostState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AhciHostState& default_instance() {
    return *internal_default_instance();
  }
  static inline const AhciHostState* internal_default_instance() {
    return reinterpret_cast<const AhciHostState*>(
               &_AhciHostState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AhciHostState& a, AhciHostState& b) {
    a.Swap(&b);
  }
  inline void Swap(AhciHostState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AhciHostState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AhciHostState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AhciHostState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AhciHostState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AhciHostState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AhciHostState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AhciHostState";
  }
  protected:
  explicit AhciHostState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AhciHostState_ControlRegisters ControlRegisters;
  typedef AhciHostState_PortRegisters PortRegisters;
  typedef AhciHostState_PortState PortState;

  // accessors -------------------------------------------------------

  enum : int {
    kPortsFieldNumber = 2,
    kControlFieldNumber = 1,
  };
  // repeated .AhciHostState.PortState ports = 2;
  int ports_size() const;
  private:
  int _internal_ports_size() const;
  public:
  void clear_ports();
  ::AhciHostState_PortState* mutable_ports(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AhciHostState_PortState >*
      mutable_ports();
  private:
  const ::AhciHostState_PortState& _internal_ports(int index) const;
  ::AhciHostState_PortState* _internal_add_ports();
  public:
  const ::AhciHostState_PortState& ports(int index) const;
  ::AhciHostState_PortState* add_ports();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AhciHostState_PortState >&
      ports() const;

  // .AhciHostState.ControlRegisters control = 1;
  bool has_control() const;
  private:
  bool _internal_has_control() const;
  public:
  void clear_control();
  const ::AhciHostState_ControlRegisters& control() const;
  PROTOBUF_NODISCARD ::AhciHostState_ControlRegisters* release_control();
  ::AhciHostState_ControlRegisters* mutable_control();
  void set_allocated_control(::AhciHostState_ControlRegisters* control);
  private:
  const ::AhciHostState_ControlRegisters& _internal_control() const;
  ::AhciHostState_ControlRegisters* _internal_mutable_control();
  public:
  void unsafe_arena_set_allocated_control(
      ::AhciHostState_ControlRegisters* control);
  ::AhciHostState_ControlRegisters* unsafe_arena_release_control();

  // @@protoc_insertion_point(class_scope:AhciHostState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AhciHostState_PortState > ports_;
  ::AhciHostState_ControlRegisters* control_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ahci_5fhost_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AhciHostState_ControlRegisters

// uint32 capabilities = 1;
inline void AhciHostState_ControlRegisters::clear_capabilities() {
  capabilities_ = 0u;
}
inline uint32_t AhciHostState_ControlRegisters::_internal_capabilities() const {
  return capabilities_;
}
inline uint32_t AhciHostState_ControlRegisters::capabilities() const {
  // @@protoc_insertion_point(field_get:AhciHostState.ControlRegisters.capabilities)
  return _internal_capabilities();
}
inline void AhciHostState_ControlRegisters::_internal_set_capabilities(uint32_t value) {
  
  capabilities_ = value;
}
inline void AhciHostState_ControlRegisters::set_capabilities(uint32_t value) {
  _internal_set_capabilities(value);
  // @@protoc_insertion_point(field_set:AhciHostState.ControlRegisters.capabilities)
}

// uint32 global_host_control = 2;
inline void AhciHostState_ControlRegisters::clear_global_host_control() {
  global_host_control_ = 0u;
}
inline uint32_t AhciHostState_ControlRegisters::_internal_global_host_control() const {
  return global_host_control_;
}
inline uint32_t AhciHostState_ControlRegisters::global_host_control() const {
  // @@protoc_insertion_point(field_get:AhciHostState.ControlRegisters.global_host_control)
  return _internal_global_host_control();
}
inline void AhciHostState_ControlRegisters::_internal_set_global_host_control(uint32_t value) {
  
  global_host_control_ = value;
}
inline void AhciHostState_ControlRegisters::set_global_host_control(uint32_t value) {
  _internal_set_global_host_control(value);
  // @@protoc_insertion_point(field_set:AhciHostState.ControlRegisters.global_host_control)
}

// uint32 irq_status = 3;
inline void AhciHostState_ControlRegisters::clear_irq_status() {
  irq_status_ = 0u;
}
inline uint32_t AhciHostState_ControlRegisters::_internal_irq_status() const {
  return irq_status_;
}
inline uint32_t AhciHostState_ControlRegisters::irq_status() const {
  // @@protoc_insertion_point(field_get:AhciHostState.ControlRegisters.irq_status)
  return _internal_irq_status();
}
inline void AhciHostState_ControlRegisters::_internal_set_irq_status(uint32_t value) {
  
  irq_status_ = value;
}
inline void AhciHostState_ControlRegisters::set_irq_status(uint32_t value) {
  _internal_set_irq_status(value);
  // @@protoc_insertion_point(field_set:AhciHostState.ControlRegisters.irq_status)
}

// uint32 ports_implemented = 4;
inline void AhciHostState_ControlRegisters::clear_ports_implemented() {
  ports_implemented_ = 0u;
}
inline uint32_t AhciHostState_ControlRegisters::_internal_ports_implemented() const {
  return ports_implemented_;
}
inline uint32_t AhciHostState_ControlRegisters::ports_implemented() const {
  // @@protoc_insertion_point(field_get:AhciHostState.ControlRegisters.ports_implemented)
  return _internal_ports_implemented();
}
inline void AhciHostState_ControlRegisters::_internal_set_ports_implemented(uint32_t value) {
  
  ports_implemented_ = value;
}
inline void AhciHostState_ControlRegisters::set_ports_implemented(uint32_t value) {
  _internal_set_ports_implemented(value);
  // @@protoc_insertion_point(field_set:AhciHostState.ControlRegisters.ports_implemented)
}

// uint32 version = 5;
inline void AhciHostState_ControlRegisters::clear_version() {
  version_ = 0u;
}
inline uint32_t AhciHostState_ControlRegisters::_internal_version() const {
  return version_;
}
inline uint32_t AhciHostState_ControlRegisters::version() const {
  // @@protoc_insertion_point(field_get:AhciHostState.ControlRegisters.version)
  return _internal_version();
}
inline void AhciHostState_ControlRegisters::_internal_set_version(uint32_t value) {
  
  version_ = value;
}
inline void AhciHostState_ControlRegisters::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:AhciHostState.ControlRegisters.version)
}

// -------------------------------------------------------------------

// AhciHostState_PortRegisters

// uint32 command_list_base0 = 1;
inline void AhciHostState_PortRegisters::clear_command_list_base0() {
  command_list_base0_ = 0u;
}
inline uint32_t AhciHostState_PortRegisters::_internal_command_list_base0() const {
  return command_list_base0_;
}
inline uint32_t AhciHostState_PortRegisters::command_list_base0() const {
  // @@protoc_insertion_point(field_get:AhciHostState.PortRegisters.command_list_base0)
  return _internal_command_list_base0();
}
inline void AhciHostState_PortRegisters::_internal_set_command_list_base0(uint32_t value) {
  
  command_list_base0_ = value;
}
inline void AhciHostState_PortRegisters::set_command_list_base0(uint32_t value) {
  _internal_set_command_list_base0(value);
  // @@protoc_insertion_point(field_set:AhciHostState.PortRegisters.command_list_base0)
}

// uint32 command_list_base1 = 2;
inline void AhciHostState_PortRegisters::clear_command_list_base1() {
  command_list_base1_ = 0u;
}
inline uint32_t AhciHostState_PortRegisters::_internal_command_list_base1() const {
  return command_list_base1_;
}
inline uint32_t AhciHostState_PortRegisters::command_list_base1() const {
  // @@protoc_insertion_point(field_get:AhciHostState.PortRegisters.command_list_base1)
  return _internal_command_list_base1();
}
inline void AhciHostState_PortRegisters::_internal_set_command_list_base1(uint32_t value) {
  
  command_list_base1_ = value;
}
inline void AhciHostState_PortRegisters::set_command_list_base1(uint32_t value) {
  _internal_set_command_list_base1(value);
  // @@protoc_insertion_point(field_set:AhciHostState.PortRegisters.command_list_base1)
}

// uint32 fis_base0 = 3;
inline void AhciHostState_PortRegisters::clear_fis_base0() {
  fis_base0_ = 0u;
}
inline uint32_t AhciHostState_PortRegisters::_internal_fis_base0() const {
  return fis_base0_;
}
inline uint32_t AhciHostState_PortRegisters::fis_base0() const {
  // @@protoc_insertion_point(field_get:AhciHostState.PortRegisters.fis_base0)
  return _internal_fis_base0();
}
inline void AhciHostState_PortRegisters::_internal_set_fis_base0(uint32_t value) {
  
  fis_base0_ = value;
}
inline void AhciHostState_PortRegisters::set_fis_base0(uint32_t value) {
  _internal_set_fis_base0(value);
  // @@protoc_insertion_point(field_set:AhciHostState.PortRegisters.fis_base0)
}

// uint32 fis_base1 = 4;
inline void AhciHostState_PortRegisters::clear_fis_base1() {
  fis_base1_ = 0u;
}
inline uint32_t AhciHostState_PortRegisters::_internal_fis_base1() const {
  return fis_base1_;
}
inline uint32_t AhciHostState_PortRegisters::fis_base1() const {
  // @@protoc_insertion_point(field_get:AhciHostState.PortRegisters.fis_base1)
  return _internal_fis_base1();
}
inline void AhciHostState_PortRegisters::_internal_set_fis_base1(uint32_t value) {
  
  fis_base1_ = value;
}
inline void AhciHostState_PortRegisters::set_fis_base1(uint32_t value) {
  _internal_set_fis_base1(value);
  // @@protoc_insertion_point(field_set:AhciHostState.PortRegisters.fis_base1)
}

// uint32 irq_status = 5;
inline void AhciHostState_PortRegisters::clear_irq_status() {
  irq_status_ = 0u;
}
inline uint32_t AhciHostState_PortRegisters::_internal_irq_status() const {
  return irq_status_;
}
inline uint32_t AhciHostState_PortRegisters::irq_status() const {
  // @@protoc_insertion_point(field_get:AhciHostState.PortRegisters.irq_status)
  return _internal_irq_status();
}
inline void AhciHostState_PortRegisters::_internal_set_irq_status(uint32_t value) {
  
  irq_status_ = value;
}
inline void AhciHostState_PortRegisters::set_irq_status(uint32_t value) {
  _internal_set_irq_status(value);
  // @@protoc_insertion_point(field_set:AhciHostState.PortRegisters.irq_status)
}

// uint32 irq_mask = 6;
inline void AhciHostState_PortRegisters::clear_irq_mask() {
  irq_mask_ = 0u;
}
inline uint32_t AhciHostState_PortRegisters::_internal_irq_mask() const {
  return irq_mask_;
}
inline uint32_t AhciHostState_PortRegisters::irq_mask() const {
  // @@protoc_insertion_point(field_get:AhciHostState.PortRegisters.irq_mask)
  return _internal_irq_mask();
}
inline void AhciHostState_PortRegisters::_internal_set_irq_mask(uint32_t value) {
  
  irq_mask_ = value;
}
inline void AhciHostState_PortRegisters::set_irq_mask(uint32_t value) {
  _internal_set_irq_mask(value);
  // @@protoc_insertion_point(field_set:AhciHostState.PortRegisters.irq_mask)
}

// uint32 command = 7;
inline void AhciHostState_PortRegisters::clear_command() {
  command_ = 0u;
}
inline uint32_t AhciHostState_PortRegisters::_internal_command() const {
  return command_;
}
inline uint32_t AhciHostState_PortRegisters::command() const {
  // @@protoc_insertion_point(field_get:AhciHostState.PortRegisters.command)
  return _internal_command();
}
inline void AhciHostState_PortRegisters::_internal_set_command(uint32_t value) {
  
  command_ = value;
}
inline void AhciHostState_PortRegisters::set_command(uint32_t value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:AhciHostState.PortRegisters.command)
}

// uint32 task_flie_data = 8;
inline void AhciHostState_PortRegisters::clear_task_flie_data() {
  task_flie_data_ = 0u;
}
inline uint32_t AhciHostState_PortRegisters::_internal_task_flie_data() const {
  return task_flie_data_;
}
inline uint32_t AhciHostState_PortRegisters::task_flie_data() const {
  // @@protoc_insertion_point(field_get:AhciHostState.PortRegisters.task_flie_data)
  return _internal_task_flie_data();
}
inline void AhciHostState_PortRegisters::_internal_set_task_flie_data(uint32_t value) {
  
  task_flie_data_ = value;
}
inline void AhciHostState_PortRegisters::set_task_flie_data(uint32_t value) {
  _internal_set_task_flie_data(value);
  // @@protoc_insertion_point(field_set:AhciHostState.PortRegisters.task_flie_data)
}

// uint32 signature = 9;
inline void AhciHostState_PortRegisters::clear_signature() {
  signature_ = 0u;
}
inline uint32_t AhciHostState_PortRegisters::_internal_signature() const {
  return signature_;
}
inline uint32_t AhciHostState_PortRegisters::signature() const {
  // @@protoc_insertion_point(field_get:AhciHostState.PortRegisters.signature)
  return _internal_signature();
}
inline void AhciHostState_PortRegisters::_internal_set_signature(uint32_t value) {
  
  signature_ = value;
}
inline void AhciHostState_PortRegisters::set_signature(uint32_t value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:AhciHostState.PortRegisters.signature)
}

// uint32 sata_status = 10;
inline void AhciHostState_PortRegisters::clear_sata_status() {
  sata_status_ = 0u;
}
inline uint32_t AhciHostState_PortRegisters::_internal_sata_status() const {
  return sata_status_;
}
inline uint32_t AhciHostState_PortRegisters::sata_status() const {
  // @@protoc_insertion_point(field_get:AhciHostState.PortRegisters.sata_status)
  return _internal_sata_status();
}
inline void AhciHostState_PortRegisters::_internal_set_sata_status(uint32_t value) {
  
  sata_status_ = value;
}
inline void AhciHostState_PortRegisters::set_sata_status(uint32_t value) {
  _internal_set_sata_status(value);
  // @@protoc_insertion_point(field_set:AhciHostState.PortRegisters.sata_status)
}

// uint32 sata_control = 11;
inline void AhciHostState_PortRegisters::clear_sata_control() {
  sata_control_ = 0u;
}
inline uint32_t AhciHostState_PortRegisters::_internal_sata_control() const {
  return sata_control_;
}
inline uint32_t AhciHostState_PortRegisters::sata_control() const {
  // @@protoc_insertion_point(field_get:AhciHostState.PortRegisters.sata_control)
  return _internal_sata_control();
}
inline void AhciHostState_PortRegisters::_internal_set_sata_control(uint32_t value) {
  
  sata_control_ = value;
}
inline void AhciHostState_PortRegisters::set_sata_control(uint32_t value) {
  _internal_set_sata_control(value);
  // @@protoc_insertion_point(field_set:AhciHostState.PortRegisters.sata_control)
}

// uint32 sata_error = 12;
inline void AhciHostState_PortRegisters::clear_sata_error() {
  sata_error_ = 0u;
}
inline uint32_t AhciHostState_PortRegisters::_internal_sata_error() const {
  return sata_error_;
}
inline uint32_t AhciHostState_PortRegisters::sata_error() const {
  // @@protoc_insertion_point(field_get:AhciHostState.PortRegisters.sata_error)
  return _internal_sata_error();
}
inline void AhciHostState_PortRegisters::_internal_set_sata_error(uint32_t value) {
  
  sata_error_ = value;
}
inline void AhciHostState_PortRegisters::set_sata_error(uint32_t value) {
  _internal_set_sata_error(value);
  // @@protoc_insertion_point(field_set:AhciHostState.PortRegisters.sata_error)
}

// uint32 sata_active = 13;
inline void AhciHostState_PortRegisters::clear_sata_active() {
  sata_active_ = 0u;
}
inline uint32_t AhciHostState_PortRegisters::_internal_sata_active() const {
  return sata_active_;
}
inline uint32_t AhciHostState_PortRegisters::sata_active() const {
  // @@protoc_insertion_point(field_get:AhciHostState.PortRegisters.sata_active)
  return _internal_sata_active();
}
inline void AhciHostState_PortRegisters::_internal_set_sata_active(uint32_t value) {
  
  sata_active_ = value;
}
inline void AhciHostState_PortRegisters::set_sata_active(uint32_t value) {
  _internal_set_sata_active(value);
  // @@protoc_insertion_point(field_set:AhciHostState.PortRegisters.sata_active)
}

// -------------------------------------------------------------------

// AhciHostState_PortState

// uint32 index = 1;
inline void AhciHostState_PortState::clear_index() {
  index_ = 0u;
}
inline uint32_t AhciHostState_PortState::_internal_index() const {
  return index_;
}
inline uint32_t AhciHostState_PortState::index() const {
  // @@protoc_insertion_point(field_get:AhciHostState.PortState.index)
  return _internal_index();
}
inline void AhciHostState_PortState::_internal_set_index(uint32_t value) {
  
  index_ = value;
}
inline void AhciHostState_PortState::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:AhciHostState.PortState.index)
}

// int32 busy_slot = 2;
inline void AhciHostState_PortState::clear_busy_slot() {
  busy_slot_ = 0;
}
inline int32_t AhciHostState_PortState::_internal_busy_slot() const {
  return busy_slot_;
}
inline int32_t AhciHostState_PortState::busy_slot() const {
  // @@protoc_insertion_point(field_get:AhciHostState.PortState.busy_slot)
  return _internal_busy_slot();
}
inline void AhciHostState_PortState::_internal_set_busy_slot(int32_t value) {
  
  busy_slot_ = value;
}
inline void AhciHostState_PortState::set_busy_slot(int32_t value) {
  _internal_set_busy_slot(value);
  // @@protoc_insertion_point(field_set:AhciHostState.PortState.busy_slot)
}

// bool init_d2h_sent = 3;
inline void AhciHostState_PortState::clear_init_d2h_sent() {
  init_d2h_sent_ = false;
}
inline bool AhciHostState_PortState::_internal_init_d2h_sent() const {
  return init_d2h_sent_;
}
inline bool AhciHostState_PortState::init_d2h_sent() const {
  // @@protoc_insertion_point(field_get:AhciHostState.PortState.init_d2h_sent)
  return _internal_init_d2h_sent();
}
inline void AhciHostState_PortState::_internal_set_init_d2h_sent(bool value) {
  
  init_d2h_sent_ = value;
}
inline void AhciHostState_PortState::set_init_d2h_sent(bool value) {
  _internal_set_init_d2h_sent(value);
  // @@protoc_insertion_point(field_set:AhciHostState.PortState.init_d2h_sent)
}

// .AhciHostState.PortRegisters registers = 4;
inline bool AhciHostState_PortState::_internal_has_registers() const {
  return this != internal_default_instance() && registers_ != nullptr;
}
inline bool AhciHostState_PortState::has_registers() const {
  return _internal_has_registers();
}
inline void AhciHostState_PortState::clear_registers() {
  if (GetArenaForAllocation() == nullptr && registers_ != nullptr) {
    delete registers_;
  }
  registers_ = nullptr;
}
inline const ::AhciHostState_PortRegisters& AhciHostState_PortState::_internal_registers() const {
  const ::AhciHostState_PortRegisters* p = registers_;
  return p != nullptr ? *p : reinterpret_cast<const ::AhciHostState_PortRegisters&>(
      ::_AhciHostState_PortRegisters_default_instance_);
}
inline const ::AhciHostState_PortRegisters& AhciHostState_PortState::registers() const {
  // @@protoc_insertion_point(field_get:AhciHostState.PortState.registers)
  return _internal_registers();
}
inline void AhciHostState_PortState::unsafe_arena_set_allocated_registers(
    ::AhciHostState_PortRegisters* registers) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(registers_);
  }
  registers_ = registers;
  if (registers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AhciHostState.PortState.registers)
}
inline ::AhciHostState_PortRegisters* AhciHostState_PortState::release_registers() {
  
  ::AhciHostState_PortRegisters* temp = registers_;
  registers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AhciHostState_PortRegisters* AhciHostState_PortState::unsafe_arena_release_registers() {
  // @@protoc_insertion_point(field_release:AhciHostState.PortState.registers)
  
  ::AhciHostState_PortRegisters* temp = registers_;
  registers_ = nullptr;
  return temp;
}
inline ::AhciHostState_PortRegisters* AhciHostState_PortState::_internal_mutable_registers() {
  
  if (registers_ == nullptr) {
    auto* p = CreateMaybeMessage<::AhciHostState_PortRegisters>(GetArenaForAllocation());
    registers_ = p;
  }
  return registers_;
}
inline ::AhciHostState_PortRegisters* AhciHostState_PortState::mutable_registers() {
  ::AhciHostState_PortRegisters* _msg = _internal_mutable_registers();
  // @@protoc_insertion_point(field_mutable:AhciHostState.PortState.registers)
  return _msg;
}
inline void AhciHostState_PortState::set_allocated_registers(::AhciHostState_PortRegisters* registers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete registers_;
  }
  if (registers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::AhciHostState_PortRegisters>::GetOwningArena(registers);
    if (message_arena != submessage_arena) {
      registers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, registers, submessage_arena);
    }
    
  } else {
    
  }
  registers_ = registers;
  // @@protoc_insertion_point(field_set_allocated:AhciHostState.PortState.registers)
}

// -------------------------------------------------------------------

// AhciHostState

// .AhciHostState.ControlRegisters control = 1;
inline bool AhciHostState::_internal_has_control() const {
  return this != internal_default_instance() && control_ != nullptr;
}
inline bool AhciHostState::has_control() const {
  return _internal_has_control();
}
inline void AhciHostState::clear_control() {
  if (GetArenaForAllocation() == nullptr && control_ != nullptr) {
    delete control_;
  }
  control_ = nullptr;
}
inline const ::AhciHostState_ControlRegisters& AhciHostState::_internal_control() const {
  const ::AhciHostState_ControlRegisters* p = control_;
  return p != nullptr ? *p : reinterpret_cast<const ::AhciHostState_ControlRegisters&>(
      ::_AhciHostState_ControlRegisters_default_instance_);
}
inline const ::AhciHostState_ControlRegisters& AhciHostState::control() const {
  // @@protoc_insertion_point(field_get:AhciHostState.control)
  return _internal_control();
}
inline void AhciHostState::unsafe_arena_set_allocated_control(
    ::AhciHostState_ControlRegisters* control) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(control_);
  }
  control_ = control;
  if (control) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AhciHostState.control)
}
inline ::AhciHostState_ControlRegisters* AhciHostState::release_control() {
  
  ::AhciHostState_ControlRegisters* temp = control_;
  control_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AhciHostState_ControlRegisters* AhciHostState::unsafe_arena_release_control() {
  // @@protoc_insertion_point(field_release:AhciHostState.control)
  
  ::AhciHostState_ControlRegisters* temp = control_;
  control_ = nullptr;
  return temp;
}
inline ::AhciHostState_ControlRegisters* AhciHostState::_internal_mutable_control() {
  
  if (control_ == nullptr) {
    auto* p = CreateMaybeMessage<::AhciHostState_ControlRegisters>(GetArenaForAllocation());
    control_ = p;
  }
  return control_;
}
inline ::AhciHostState_ControlRegisters* AhciHostState::mutable_control() {
  ::AhciHostState_ControlRegisters* _msg = _internal_mutable_control();
  // @@protoc_insertion_point(field_mutable:AhciHostState.control)
  return _msg;
}
inline void AhciHostState::set_allocated_control(::AhciHostState_ControlRegisters* control) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete control_;
  }
  if (control) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::AhciHostState_ControlRegisters>::GetOwningArena(control);
    if (message_arena != submessage_arena) {
      control = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control, submessage_arena);
    }
    
  } else {
    
  }
  control_ = control;
  // @@protoc_insertion_point(field_set_allocated:AhciHostState.control)
}

// repeated .AhciHostState.PortState ports = 2;
inline int AhciHostState::_internal_ports_size() const {
  return ports_.size();
}
inline int AhciHostState::ports_size() const {
  return _internal_ports_size();
}
inline void AhciHostState::clear_ports() {
  ports_.Clear();
}
inline ::AhciHostState_PortState* AhciHostState::mutable_ports(int index) {
  // @@protoc_insertion_point(field_mutable:AhciHostState.ports)
  return ports_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AhciHostState_PortState >*
AhciHostState::mutable_ports() {
  // @@protoc_insertion_point(field_mutable_list:AhciHostState.ports)
  return &ports_;
}
inline const ::AhciHostState_PortState& AhciHostState::_internal_ports(int index) const {
  return ports_.Get(index);
}
inline const ::AhciHostState_PortState& AhciHostState::ports(int index) const {
  // @@protoc_insertion_point(field_get:AhciHostState.ports)
  return _internal_ports(index);
}
inline ::AhciHostState_PortState* AhciHostState::_internal_add_ports() {
  return ports_.Add();
}
inline ::AhciHostState_PortState* AhciHostState::add_ports() {
  ::AhciHostState_PortState* _add = _internal_add_ports();
  // @@protoc_insertion_point(field_add:AhciHostState.ports)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AhciHostState_PortState >&
AhciHostState::ports() const {
  // @@protoc_insertion_point(field_list:AhciHostState.ports)
  return ports_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ahci_5fhost_2eproto
