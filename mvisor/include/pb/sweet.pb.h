// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sweet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sweet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sweet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sweet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sweet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[21]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sweet_2eproto;
namespace SweetProtocol {
class ClipboardDataToGuest;
struct ClipboardDataToGuestDefaultTypeInternal;
extern ClipboardDataToGuestDefaultTypeInternal _ClipboardDataToGuest_default_instance_;
class ClipboardStreamDataEvent;
struct ClipboardStreamDataEventDefaultTypeInternal;
extern ClipboardStreamDataEventDefaultTypeInternal _ClipboardStreamDataEvent_default_instance_;
class DisplayStreamConfig;
struct DisplayStreamConfigDefaultTypeInternal;
extern DisplayStreamConfigDefaultTypeInternal _DisplayStreamConfig_default_instance_;
class DisplayStreamStartEvent;
struct DisplayStreamStartEventDefaultTypeInternal;
extern DisplayStreamStartEventDefaultTypeInternal _DisplayStreamStartEvent_default_instance_;
class MonitorsConfig;
struct MonitorsConfigDefaultTypeInternal;
extern MonitorsConfigDefaultTypeInternal _MonitorsConfig_default_instance_;
class MonitorsConfig_Monitor;
struct MonitorsConfig_MonitorDefaultTypeInternal;
extern MonitorsConfig_MonitorDefaultTypeInternal _MonitorsConfig_Monitor_default_instance_;
class PlaybackStreamConfig;
struct PlaybackStreamConfigDefaultTypeInternal;
extern PlaybackStreamConfigDefaultTypeInternal _PlaybackStreamConfig_default_instance_;
class PlaybackStreamStartEvent;
struct PlaybackStreamStartEventDefaultTypeInternal;
extern PlaybackStreamStartEventDefaultTypeInternal _PlaybackStreamStartEvent_default_instance_;
class QueryScreeenshot;
struct QueryScreeenshotDefaultTypeInternal;
extern QueryScreeenshotDefaultTypeInternal _QueryScreeenshot_default_instance_;
class QueryScreenshotResponse;
struct QueryScreenshotResponseDefaultTypeInternal;
extern QueryScreenshotResponseDefaultTypeInternal _QueryScreenshotResponse_default_instance_;
class QueryStatusResponse;
struct QueryStatusResponseDefaultTypeInternal;
extern QueryStatusResponseDefaultTypeInternal _QueryStatusResponse_default_instance_;
class RecordStreamConfig;
struct RecordStreamConfigDefaultTypeInternal;
extern RecordStreamConfigDefaultTypeInternal _RecordStreamConfig_default_instance_;
class SaveMachineOptions;
struct SaveMachineOptionsDefaultTypeInternal;
extern SaveMachineOptionsDefaultTypeInternal _SaveMachineOptions_default_instance_;
class SendKeyboardInput;
struct SendKeyboardInputDefaultTypeInternal;
extern SendKeyboardInputDefaultTypeInternal _SendKeyboardInput_default_instance_;
class SendMidiInput;
struct SendMidiInputDefaultTypeInternal;
extern SendMidiInputDefaultTypeInternal _SendMidiInput_default_instance_;
class SendPointerInput;
struct SendPointerInputDefaultTypeInternal;
extern SendPointerInputDefaultTypeInternal _SendPointerInput_default_instance_;
class SendRecordStreamData;
struct SendRecordStreamDataDefaultTypeInternal;
extern SendRecordStreamDataDefaultTypeInternal _SendRecordStreamData_default_instance_;
class SendWacomInput;
struct SendWacomInputDefaultTypeInternal;
extern SendWacomInputDefaultTypeInternal _SendWacomInput_default_instance_;
class SerialPortStatusEvent;
struct SerialPortStatusEventDefaultTypeInternal;
extern SerialPortStatusEventDefaultTypeInternal _SerialPortStatusEvent_default_instance_;
class SetCursorEvent;
struct SetCursorEventDefaultTypeInternal;
extern SetCursorEventDefaultTypeInternal _SetCursorEvent_default_instance_;
class SetCursorEvent_CursorShape;
struct SetCursorEvent_CursorShapeDefaultTypeInternal;
extern SetCursorEvent_CursorShapeDefaultTypeInternal _SetCursorEvent_CursorShape_default_instance_;
}  // namespace SweetProtocol
PROTOBUF_NAMESPACE_OPEN
template<> ::SweetProtocol::ClipboardDataToGuest* Arena::CreateMaybeMessage<::SweetProtocol::ClipboardDataToGuest>(Arena*);
template<> ::SweetProtocol::ClipboardStreamDataEvent* Arena::CreateMaybeMessage<::SweetProtocol::ClipboardStreamDataEvent>(Arena*);
template<> ::SweetProtocol::DisplayStreamConfig* Arena::CreateMaybeMessage<::SweetProtocol::DisplayStreamConfig>(Arena*);
template<> ::SweetProtocol::DisplayStreamStartEvent* Arena::CreateMaybeMessage<::SweetProtocol::DisplayStreamStartEvent>(Arena*);
template<> ::SweetProtocol::MonitorsConfig* Arena::CreateMaybeMessage<::SweetProtocol::MonitorsConfig>(Arena*);
template<> ::SweetProtocol::MonitorsConfig_Monitor* Arena::CreateMaybeMessage<::SweetProtocol::MonitorsConfig_Monitor>(Arena*);
template<> ::SweetProtocol::PlaybackStreamConfig* Arena::CreateMaybeMessage<::SweetProtocol::PlaybackStreamConfig>(Arena*);
template<> ::SweetProtocol::PlaybackStreamStartEvent* Arena::CreateMaybeMessage<::SweetProtocol::PlaybackStreamStartEvent>(Arena*);
template<> ::SweetProtocol::QueryScreeenshot* Arena::CreateMaybeMessage<::SweetProtocol::QueryScreeenshot>(Arena*);
template<> ::SweetProtocol::QueryScreenshotResponse* Arena::CreateMaybeMessage<::SweetProtocol::QueryScreenshotResponse>(Arena*);
template<> ::SweetProtocol::QueryStatusResponse* Arena::CreateMaybeMessage<::SweetProtocol::QueryStatusResponse>(Arena*);
template<> ::SweetProtocol::RecordStreamConfig* Arena::CreateMaybeMessage<::SweetProtocol::RecordStreamConfig>(Arena*);
template<> ::SweetProtocol::SaveMachineOptions* Arena::CreateMaybeMessage<::SweetProtocol::SaveMachineOptions>(Arena*);
template<> ::SweetProtocol::SendKeyboardInput* Arena::CreateMaybeMessage<::SweetProtocol::SendKeyboardInput>(Arena*);
template<> ::SweetProtocol::SendMidiInput* Arena::CreateMaybeMessage<::SweetProtocol::SendMidiInput>(Arena*);
template<> ::SweetProtocol::SendPointerInput* Arena::CreateMaybeMessage<::SweetProtocol::SendPointerInput>(Arena*);
template<> ::SweetProtocol::SendRecordStreamData* Arena::CreateMaybeMessage<::SweetProtocol::SendRecordStreamData>(Arena*);
template<> ::SweetProtocol::SendWacomInput* Arena::CreateMaybeMessage<::SweetProtocol::SendWacomInput>(Arena*);
template<> ::SweetProtocol::SerialPortStatusEvent* Arena::CreateMaybeMessage<::SweetProtocol::SerialPortStatusEvent>(Arena*);
template<> ::SweetProtocol::SetCursorEvent* Arena::CreateMaybeMessage<::SweetProtocol::SetCursorEvent>(Arena*);
template<> ::SweetProtocol::SetCursorEvent_CursorShape* Arena::CreateMaybeMessage<::SweetProtocol::SetCursorEvent_CursorShape>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SweetProtocol {

enum SendPointerInput_PointerButtonBit : int {
  SendPointerInput_PointerButtonBit_LEFT = 0,
  SendPointerInput_PointerButtonBit_MIDDLE = 1,
  SendPointerInput_PointerButtonBit_RIGHT = 2,
  SendPointerInput_PointerButtonBit_SendPointerInput_PointerButtonBit_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SendPointerInput_PointerButtonBit_SendPointerInput_PointerButtonBit_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SendPointerInput_PointerButtonBit_IsValid(int value);
constexpr SendPointerInput_PointerButtonBit SendPointerInput_PointerButtonBit_PointerButtonBit_MIN = SendPointerInput_PointerButtonBit_LEFT;
constexpr SendPointerInput_PointerButtonBit SendPointerInput_PointerButtonBit_PointerButtonBit_MAX = SendPointerInput_PointerButtonBit_RIGHT;
constexpr int SendPointerInput_PointerButtonBit_PointerButtonBit_ARRAYSIZE = SendPointerInput_PointerButtonBit_PointerButtonBit_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SendPointerInput_PointerButtonBit_descriptor();
template<typename T>
inline const std::string& SendPointerInput_PointerButtonBit_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SendPointerInput_PointerButtonBit>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SendPointerInput_PointerButtonBit_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SendPointerInput_PointerButtonBit_descriptor(), enum_t_value);
}
inline bool SendPointerInput_PointerButtonBit_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SendPointerInput_PointerButtonBit* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SendPointerInput_PointerButtonBit>(
    SendPointerInput_PointerButtonBit_descriptor(), name, value);
}
enum SweetCommand : int {
  kInvalid = 0,
  kQueryStatus = 16,
  kResetMachine = 32,
  kStartupMachine = 33,
  kShutdownMachine = 34,
  kPauseMachine = 35,
  kResumeMachine = 36,
  kSaveMachine = 37,
  kQuitMachine = 38,
  kQemuGuestCommand = 48,
  kSendKeyboardInput = 64,
  kSendPointerInput = 65,
  kConfigMonitors = 80,
  kQueryScreenshot = 81,
  kStartDisplayStream = 82,
  kStopDisplayStream = 83,
  kRefreshDisplayStream = 84,
  kStartPlaybackStream = 96,
  kStopPlaybackStream = 97,
  kStartRecordStream = 112,
  kStopRecordStream = 113,
  kSendRecordStreamData = 114,
  kClipboardDataToGuest = 128,
  kStartClipboardStream = 129,
  kStopClipboardStream = 130,
  kConnectUsb = 144,
  kDisconnectUsb = 145,
  kSendUsbData = 146,
  kStartTcpService = 160,
  kConnectTcp = 161,
  kCloseTcp = 162,
  kSendTcpData = 163,
  kStartVirtioFs = 176,
  kStopVirtioFs = 177,
  kStartMidi = 192,
  kStopMidi = 193,
  kSendMidiInput = 194,
  kStartWacom = 208,
  kStopWacom = 209,
  kSendWacomInput = 210,
  SweetCommand_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SweetCommand_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SweetCommand_IsValid(int value);
constexpr SweetCommand SweetCommand_MIN = kInvalid;
constexpr SweetCommand SweetCommand_MAX = kSendWacomInput;
constexpr int SweetCommand_ARRAYSIZE = SweetCommand_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SweetCommand_descriptor();
template<typename T>
inline const std::string& SweetCommand_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SweetCommand>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SweetCommand_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SweetCommand_descriptor(), enum_t_value);
}
inline bool SweetCommand_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SweetCommand* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SweetCommand>(
    SweetCommand_descriptor(), name, value);
}
enum SweetResponseAndEvent : int {
  kInvalidResponse = 0,
  kCommandAcknowledge = 4096,
  kQueryStatusResponse = 4112,
  kQemuGuestCommandResponse = 4144,
  kSerialPortStatusEvent = 4145,
  kQueryScreenshotResponse = 4176,
  kSetCursorEvent = 4177,
  kDisplayStreamStartEvent = 4178,
  kDisplayStreamStopEvent = 4179,
  kDisplayStreamDataEvent = 4180,
  kPlaybackStreamStartEvent = 4192,
  kPlaybackStreamStopEvent = 4193,
  kPlaybackStreamDataEvent = 4194,
  kAudioRecordStartEvent = 4208,
  kAudioRecoreStopEvent = 4209,
  kVirtioFsStartEvent = 4272,
  kVirtioFsStopEvent = 4273,
  kVirtioFsNotifyEvent = 4274,
  kClipboardStreamStartEvent = 4224,
  kClipboardStreamStopEvent = 4225,
  kClipboardStreamDataEvent = 4226,
  kMidiStartEvent = 4288,
  kMidiStopEvent = 4289,
  kWacomStartEvent = 4304,
  kWacomStopEvent = 4305,
  SweetResponseAndEvent_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SweetResponseAndEvent_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SweetResponseAndEvent_IsValid(int value);
constexpr SweetResponseAndEvent SweetResponseAndEvent_MIN = kInvalidResponse;
constexpr SweetResponseAndEvent SweetResponseAndEvent_MAX = kWacomStopEvent;
constexpr int SweetResponseAndEvent_ARRAYSIZE = SweetResponseAndEvent_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SweetResponseAndEvent_descriptor();
template<typename T>
inline const std::string& SweetResponseAndEvent_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SweetResponseAndEvent>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SweetResponseAndEvent_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SweetResponseAndEvent_descriptor(), enum_t_value);
}
inline bool SweetResponseAndEvent_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SweetResponseAndEvent* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SweetResponseAndEvent>(
    SweetResponseAndEvent_descriptor(), name, value);
}
enum ClipboardDataType : int {
  kSweetClipboard_NONE = 0,
  kSweetClipboard_UTF8_TEXT = 1,
  kSweetClipboard_IMAGE_PNG = 2,
  kSweetClipboard_IMAGE_BMP = 3,
  kSweetClipboard_IMAGE_TIFF = 4,
  kSweetClipboard_IMAGE_JPG = 5,
  kSweetClipboard_FILE_LIST = 6,
  ClipboardDataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ClipboardDataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ClipboardDataType_IsValid(int value);
constexpr ClipboardDataType ClipboardDataType_MIN = kSweetClipboard_NONE;
constexpr ClipboardDataType ClipboardDataType_MAX = kSweetClipboard_FILE_LIST;
constexpr int ClipboardDataType_ARRAYSIZE = ClipboardDataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClipboardDataType_descriptor();
template<typename T>
inline const std::string& ClipboardDataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClipboardDataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClipboardDataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClipboardDataType_descriptor(), enum_t_value);
}
inline bool ClipboardDataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClipboardDataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClipboardDataType>(
    ClipboardDataType_descriptor(), name, value);
}
// ===================================================================

class QueryStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.QueryStatusResponse) */ {
 public:
  inline QueryStatusResponse() : QueryStatusResponse(nullptr) {}
  ~QueryStatusResponse() override;
  explicit constexpr QueryStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryStatusResponse(const QueryStatusResponse& from);
  QueryStatusResponse(QueryStatusResponse&& from) noexcept
    : QueryStatusResponse() {
    *this = ::std::move(from);
  }

  inline QueryStatusResponse& operator=(const QueryStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryStatusResponse& operator=(QueryStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryStatusResponse* internal_default_instance() {
    return reinterpret_cast<const QueryStatusResponse*>(
               &_QueryStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryStatusResponse& a, QueryStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const QueryStatusResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SweetProtocol.QueryStatusResponse";
  }
  protected:
  explicit QueryStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 3,
    kVmUuidFieldNumber = 6,
    kVmNameFieldNumber = 7,
    kConfigPathFieldNumber = 8,
    kMemorySizeFieldNumber = 5,
    kTenclassAgentFieldNumber = 1005,
    kVcpuCountFieldNumber = 4,
    kDebugFieldNumber = 1,
    kHypervisorFieldNumber = 2,
    kSpiceAgentFieldNumber = 1001,
    kQemuAgentFieldNumber = 1002,
  };
  // string status = 3;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string vm_uuid = 6;
  void clear_vm_uuid();
  const std::string& vm_uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vm_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vm_uuid();
  PROTOBUF_NODISCARD std::string* release_vm_uuid();
  void set_allocated_vm_uuid(std::string* vm_uuid);
  private:
  const std::string& _internal_vm_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vm_uuid(const std::string& value);
  std::string* _internal_mutable_vm_uuid();
  public:

  // string vm_name = 7;
  void clear_vm_name();
  const std::string& vm_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vm_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vm_name();
  PROTOBUF_NODISCARD std::string* release_vm_name();
  void set_allocated_vm_name(std::string* vm_name);
  private:
  const std::string& _internal_vm_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vm_name(const std::string& value);
  std::string* _internal_mutable_vm_name();
  public:

  // string config_path = 8;
  void clear_config_path();
  const std::string& config_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_config_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_config_path();
  PROTOBUF_NODISCARD std::string* release_config_path();
  void set_allocated_config_path(std::string* config_path);
  private:
  const std::string& _internal_config_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_config_path(const std::string& value);
  std::string* _internal_mutable_config_path();
  public:

  // uint64 memory_size = 5;
  void clear_memory_size();
  uint64_t memory_size() const;
  void set_memory_size(uint64_t value);
  private:
  uint64_t _internal_memory_size() const;
  void _internal_set_memory_size(uint64_t value);
  public:

  // bool tenclass_agent = 1005;
  void clear_tenclass_agent();
  bool tenclass_agent() const;
  void set_tenclass_agent(bool value);
  private:
  bool _internal_tenclass_agent() const;
  void _internal_set_tenclass_agent(bool value);
  public:

  // uint32 vcpu_count = 4;
  void clear_vcpu_count();
  uint32_t vcpu_count() const;
  void set_vcpu_count(uint32_t value);
  private:
  uint32_t _internal_vcpu_count() const;
  void _internal_set_vcpu_count(uint32_t value);
  public:

  // bool debug = 1;
  void clear_debug();
  bool debug() const;
  void set_debug(bool value);
  private:
  bool _internal_debug() const;
  void _internal_set_debug(bool value);
  public:

  // bool hypervisor = 2;
  void clear_hypervisor();
  bool hypervisor() const;
  void set_hypervisor(bool value);
  private:
  bool _internal_hypervisor() const;
  void _internal_set_hypervisor(bool value);
  public:

  // bool spice_agent = 1001;
  void clear_spice_agent();
  bool spice_agent() const;
  void set_spice_agent(bool value);
  private:
  bool _internal_spice_agent() const;
  void _internal_set_spice_agent(bool value);
  public:

  // bool qemu_agent = 1002;
  void clear_qemu_agent();
  bool qemu_agent() const;
  void set_qemu_agent(bool value);
  private:
  bool _internal_qemu_agent() const;
  void _internal_set_qemu_agent(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SweetProtocol.QueryStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vm_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vm_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_path_;
  uint64_t memory_size_;
  bool tenclass_agent_;
  uint32_t vcpu_count_;
  bool debug_;
  bool hypervisor_;
  bool spice_agent_;
  bool qemu_agent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sweet_2eproto;
};
// -------------------------------------------------------------------

class SerialPortStatusEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.SerialPortStatusEvent) */ {
 public:
  inline SerialPortStatusEvent() : SerialPortStatusEvent(nullptr) {}
  ~SerialPortStatusEvent() override;
  explicit constexpr SerialPortStatusEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerialPortStatusEvent(const SerialPortStatusEvent& from);
  SerialPortStatusEvent(SerialPortStatusEvent&& from) noexcept
    : SerialPortStatusEvent() {
    *this = ::std::move(from);
  }

  inline SerialPortStatusEvent& operator=(const SerialPortStatusEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerialPortStatusEvent& operator=(SerialPortStatusEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerialPortStatusEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerialPortStatusEvent* internal_default_instance() {
    return reinterpret_cast<const SerialPortStatusEvent*>(
               &_SerialPortStatusEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SerialPortStatusEvent& a, SerialPortStatusEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SerialPortStatusEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerialPortStatusEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerialPortStatusEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerialPortStatusEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerialPortStatusEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SerialPortStatusEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerialPortStatusEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SweetProtocol.SerialPortStatusEvent";
  }
  protected:
  explicit SerialPortStatusEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortNameFieldNumber = 1,
    kReadyFieldNumber = 2,
  };
  // string port_name = 1;
  void clear_port_name();
  const std::string& port_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_port_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_port_name();
  PROTOBUF_NODISCARD std::string* release_port_name();
  void set_allocated_port_name(std::string* port_name);
  private:
  const std::string& _internal_port_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port_name(const std::string& value);
  std::string* _internal_mutable_port_name();
  public:

  // bool ready = 2;
  void clear_ready();
  bool ready() const;
  void set_ready(bool value);
  private:
  bool _internal_ready() const;
  void _internal_set_ready(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SweetProtocol.SerialPortStatusEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_name_;
  bool ready_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sweet_2eproto;
};
// -------------------------------------------------------------------

class SaveMachineOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.SaveMachineOptions) */ {
 public:
  inline SaveMachineOptions() : SaveMachineOptions(nullptr) {}
  ~SaveMachineOptions() override;
  explicit constexpr SaveMachineOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SaveMachineOptions(const SaveMachineOptions& from);
  SaveMachineOptions(SaveMachineOptions&& from) noexcept
    : SaveMachineOptions() {
    *this = ::std::move(from);
  }

  inline SaveMachineOptions& operator=(const SaveMachineOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveMachineOptions& operator=(SaveMachineOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SaveMachineOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const SaveMachineOptions* internal_default_instance() {
    return reinterpret_cast<const SaveMachineOptions*>(
               &_SaveMachineOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SaveMachineOptions& a, SaveMachineOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveMachineOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveMachineOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SaveMachineOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SaveMachineOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SaveMachineOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SaveMachineOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveMachineOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SweetProtocol.SaveMachineOptions";
  }
  protected:
  explicit SaveMachineOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:SweetProtocol.SaveMachineOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sweet_2eproto;
};
// -------------------------------------------------------------------

class SendKeyboardInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.SendKeyboardInput) */ {
 public:
  inline SendKeyboardInput() : SendKeyboardInput(nullptr) {}
  ~SendKeyboardInput() override;
  explicit constexpr SendKeyboardInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendKeyboardInput(const SendKeyboardInput& from);
  SendKeyboardInput(SendKeyboardInput&& from) noexcept
    : SendKeyboardInput() {
    *this = ::std::move(from);
  }

  inline SendKeyboardInput& operator=(const SendKeyboardInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendKeyboardInput& operator=(SendKeyboardInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendKeyboardInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendKeyboardInput* internal_default_instance() {
    return reinterpret_cast<const SendKeyboardInput*>(
               &_SendKeyboardInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SendKeyboardInput& a, SendKeyboardInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SendKeyboardInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendKeyboardInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendKeyboardInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendKeyboardInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendKeyboardInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendKeyboardInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendKeyboardInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SweetProtocol.SendKeyboardInput";
  }
  protected:
  explicit SendKeyboardInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScancodeFieldNumber = 1,
    kPressedFieldNumber = 2,
    kModifiersFieldNumber = 3,
  };
  // uint32 scancode = 1;
  void clear_scancode();
  uint32_t scancode() const;
  void set_scancode(uint32_t value);
  private:
  uint32_t _internal_scancode() const;
  void _internal_set_scancode(uint32_t value);
  public:

  // bool pressed = 2;
  void clear_pressed();
  bool pressed() const;
  void set_pressed(bool value);
  private:
  bool _internal_pressed() const;
  void _internal_set_pressed(bool value);
  public:

  // uint32 modifiers = 3;
  void clear_modifiers();
  uint32_t modifiers() const;
  void set_modifiers(uint32_t value);
  private:
  uint32_t _internal_modifiers() const;
  void _internal_set_modifiers(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SweetProtocol.SendKeyboardInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t scancode_;
  bool pressed_;
  uint32_t modifiers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sweet_2eproto;
};
// -------------------------------------------------------------------

class SendMidiInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.SendMidiInput) */ {
 public:
  inline SendMidiInput() : SendMidiInput(nullptr) {}
  ~SendMidiInput() override;
  explicit constexpr SendMidiInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendMidiInput(const SendMidiInput& from);
  SendMidiInput(SendMidiInput&& from) noexcept
    : SendMidiInput() {
    *this = ::std::move(from);
  }

  inline SendMidiInput& operator=(const SendMidiInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMidiInput& operator=(SendMidiInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendMidiInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendMidiInput* internal_default_instance() {
    return reinterpret_cast<const SendMidiInput*>(
               &_SendMidiInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SendMidiInput& a, SendMidiInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SendMidiInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendMidiInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendMidiInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendMidiInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendMidiInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendMidiInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMidiInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SweetProtocol.SendMidiInput";
  }
  protected:
  explicit SendMidiInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCableCodeIndexFieldNumber = 1,
    kMidi0FieldNumber = 2,
    kMidi1FieldNumber = 3,
    kMidi2FieldNumber = 4,
  };
  // uint32 cable_code_index = 1;
  void clear_cable_code_index();
  uint32_t cable_code_index() const;
  void set_cable_code_index(uint32_t value);
  private:
  uint32_t _internal_cable_code_index() const;
  void _internal_set_cable_code_index(uint32_t value);
  public:

  // uint32 midi_0 = 2;
  void clear_midi_0();
  uint32_t midi_0() const;
  void set_midi_0(uint32_t value);
  private:
  uint32_t _internal_midi_0() const;
  void _internal_set_midi_0(uint32_t value);
  public:

  // uint32 midi_1 = 3;
  void clear_midi_1();
  uint32_t midi_1() const;
  void set_midi_1(uint32_t value);
  private:
  uint32_t _internal_midi_1() const;
  void _internal_set_midi_1(uint32_t value);
  public:

  // uint32 midi_2 = 4;
  void clear_midi_2();
  uint32_t midi_2() const;
  void set_midi_2(uint32_t value);
  private:
  uint32_t _internal_midi_2() const;
  void _internal_set_midi_2(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SweetProtocol.SendMidiInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t cable_code_index_;
  uint32_t midi_0_;
  uint32_t midi_1_;
  uint32_t midi_2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sweet_2eproto;
};
// -------------------------------------------------------------------

class SendPointerInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.SendPointerInput) */ {
 public:
  inline SendPointerInput() : SendPointerInput(nullptr) {}
  ~SendPointerInput() override;
  explicit constexpr SendPointerInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendPointerInput(const SendPointerInput& from);
  SendPointerInput(SendPointerInput&& from) noexcept
    : SendPointerInput() {
    *this = ::std::move(from);
  }

  inline SendPointerInput& operator=(const SendPointerInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendPointerInput& operator=(SendPointerInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendPointerInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendPointerInput* internal_default_instance() {
    return reinterpret_cast<const SendPointerInput*>(
               &_SendPointerInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SendPointerInput& a, SendPointerInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SendPointerInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendPointerInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendPointerInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendPointerInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendPointerInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendPointerInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendPointerInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SweetProtocol.SendPointerInput";
  }
  protected:
  explicit SendPointerInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SendPointerInput_PointerButtonBit PointerButtonBit;
  static constexpr PointerButtonBit LEFT =
    SendPointerInput_PointerButtonBit_LEFT;
  static constexpr PointerButtonBit MIDDLE =
    SendPointerInput_PointerButtonBit_MIDDLE;
  static constexpr PointerButtonBit RIGHT =
    SendPointerInput_PointerButtonBit_RIGHT;
  static inline bool PointerButtonBit_IsValid(int value) {
    return SendPointerInput_PointerButtonBit_IsValid(value);
  }
  static constexpr PointerButtonBit PointerButtonBit_MIN =
    SendPointerInput_PointerButtonBit_PointerButtonBit_MIN;
  static constexpr PointerButtonBit PointerButtonBit_MAX =
    SendPointerInput_PointerButtonBit_PointerButtonBit_MAX;
  static constexpr int PointerButtonBit_ARRAYSIZE =
    SendPointerInput_PointerButtonBit_PointerButtonBit_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PointerButtonBit_descriptor() {
    return SendPointerInput_PointerButtonBit_descriptor();
  }
  template<typename T>
  static inline const std::string& PointerButtonBit_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PointerButtonBit>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PointerButtonBit_Name.");
    return SendPointerInput_PointerButtonBit_Name(enum_t_value);
  }
  static inline bool PointerButtonBit_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PointerButtonBit* value) {
    return SendPointerInput_PointerButtonBit_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kButtonsFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
  };
  // uint32 buttons = 1;
  void clear_buttons();
  uint32_t buttons() const;
  void set_buttons(uint32_t value);
  private:
  uint32_t _internal_buttons() const;
  void _internal_set_buttons(uint32_t value);
  public:

  // int32 x = 2;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 3;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // int32 z = 4;
  void clear_z();
  int32_t z() const;
  void set_z(int32_t value);
  private:
  int32_t _internal_z() const;
  void _internal_set_z(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SweetProtocol.SendPointerInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t buttons_;
  int32_t x_;
  int32_t y_;
  int32_t z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sweet_2eproto;
};
// -------------------------------------------------------------------

class QueryScreeenshot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.QueryScreeenshot) */ {
 public:
  inline QueryScreeenshot() : QueryScreeenshot(nullptr) {}
  ~QueryScreeenshot() override;
  explicit constexpr QueryScreeenshot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryScreeenshot(const QueryScreeenshot& from);
  QueryScreeenshot(QueryScreeenshot&& from) noexcept
    : QueryScreeenshot() {
    *this = ::std::move(from);
  }

  inline QueryScreeenshot& operator=(const QueryScreeenshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryScreeenshot& operator=(QueryScreeenshot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryScreeenshot& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryScreeenshot* internal_default_instance() {
    return reinterpret_cast<const QueryScreeenshot*>(
               &_QueryScreeenshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(QueryScreeenshot& a, QueryScreeenshot& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryScreeenshot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryScreeenshot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryScreeenshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryScreeenshot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryScreeenshot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const QueryScreeenshot& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryScreeenshot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SweetProtocol.QueryScreeenshot";
  }
  protected:
  explicit QueryScreeenshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormatFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // string format = 1;
  void clear_format();
  const std::string& format() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_format(ArgT0&& arg0, ArgT... args);
  std::string* mutable_format();
  PROTOBUF_NODISCARD std::string* release_format();
  void set_allocated_format(std::string* format);
  private:
  const std::string& _internal_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_format(const std::string& value);
  std::string* _internal_mutable_format();
  public:

  // uint32 width = 2;
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // uint32 height = 3;
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SweetProtocol.QueryScreeenshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_;
  uint32_t width_;
  uint32_t height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sweet_2eproto;
};
// -------------------------------------------------------------------

class QueryScreenshotResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.QueryScreenshotResponse) */ {
 public:
  inline QueryScreenshotResponse() : QueryScreenshotResponse(nullptr) {}
  ~QueryScreenshotResponse() override;
  explicit constexpr QueryScreenshotResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryScreenshotResponse(const QueryScreenshotResponse& from);
  QueryScreenshotResponse(QueryScreenshotResponse&& from) noexcept
    : QueryScreenshotResponse() {
    *this = ::std::move(from);
  }

  inline QueryScreenshotResponse& operator=(const QueryScreenshotResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryScreenshotResponse& operator=(QueryScreenshotResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryScreenshotResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryScreenshotResponse* internal_default_instance() {
    return reinterpret_cast<const QueryScreenshotResponse*>(
               &_QueryScreenshotResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(QueryScreenshotResponse& a, QueryScreenshotResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryScreenshotResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryScreenshotResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryScreenshotResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryScreenshotResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryScreenshotResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const QueryScreenshotResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryScreenshotResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SweetProtocol.QueryScreenshotResponse";
  }
  protected:
  explicit QueryScreenshotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormatFieldNumber = 1,
    kDataFieldNumber = 4,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // string format = 1;
  void clear_format();
  const std::string& format() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_format(ArgT0&& arg0, ArgT... args);
  std::string* mutable_format();
  PROTOBUF_NODISCARD std::string* release_format();
  void set_allocated_format(std::string* format);
  private:
  const std::string& _internal_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_format(const std::string& value);
  std::string* _internal_mutable_format();
  public:

  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 width = 2;
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // uint32 height = 3;
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SweetProtocol.QueryScreenshotResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  uint32_t width_;
  uint32_t height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sweet_2eproto;
};
// -------------------------------------------------------------------

class MonitorsConfig_Monitor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.MonitorsConfig.Monitor) */ {
 public:
  inline MonitorsConfig_Monitor() : MonitorsConfig_Monitor(nullptr) {}
  ~MonitorsConfig_Monitor() override;
  explicit constexpr MonitorsConfig_Monitor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonitorsConfig_Monitor(const MonitorsConfig_Monitor& from);
  MonitorsConfig_Monitor(MonitorsConfig_Monitor&& from) noexcept
    : MonitorsConfig_Monitor() {
    *this = ::std::move(from);
  }

  inline MonitorsConfig_Monitor& operator=(const MonitorsConfig_Monitor& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitorsConfig_Monitor& operator=(MonitorsConfig_Monitor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonitorsConfig_Monitor& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonitorsConfig_Monitor* internal_default_instance() {
    return reinterpret_cast<const MonitorsConfig_Monitor*>(
               &_MonitorsConfig_Monitor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MonitorsConfig_Monitor& a, MonitorsConfig_Monitor& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitorsConfig_Monitor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonitorsConfig_Monitor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MonitorsConfig_Monitor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MonitorsConfig_Monitor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MonitorsConfig_Monitor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MonitorsConfig_Monitor& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitorsConfig_Monitor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SweetProtocol.MonitorsConfig.Monitor";
  }
  protected:
  explicit MonitorsConfig_Monitor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kLeftFieldNumber = 2,
    kTopFieldNumber = 3,
    kWidthFieldNumber = 4,
    kHeightFieldNumber = 5,
    kDepthFieldNumber = 6,
  };
  // uint32 index = 1;
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // uint32 left = 2;
  void clear_left();
  uint32_t left() const;
  void set_left(uint32_t value);
  private:
  uint32_t _internal_left() const;
  void _internal_set_left(uint32_t value);
  public:

  // uint32 top = 3;
  void clear_top();
  uint32_t top() const;
  void set_top(uint32_t value);
  private:
  uint32_t _internal_top() const;
  void _internal_set_top(uint32_t value);
  public:

  // uint32 width = 4;
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // uint32 height = 5;
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // uint32 depth = 6;
  void clear_depth();
  uint32_t depth() const;
  void set_depth(uint32_t value);
  private:
  uint32_t _internal_depth() const;
  void _internal_set_depth(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SweetProtocol.MonitorsConfig.Monitor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t index_;
  uint32_t left_;
  uint32_t top_;
  uint32_t width_;
  uint32_t height_;
  uint32_t depth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sweet_2eproto;
};
// -------------------------------------------------------------------

class MonitorsConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.MonitorsConfig) */ {
 public:
  inline MonitorsConfig() : MonitorsConfig(nullptr) {}
  ~MonitorsConfig() override;
  explicit constexpr MonitorsConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonitorsConfig(const MonitorsConfig& from);
  MonitorsConfig(MonitorsConfig&& from) noexcept
    : MonitorsConfig() {
    *this = ::std::move(from);
  }

  inline MonitorsConfig& operator=(const MonitorsConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitorsConfig& operator=(MonitorsConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonitorsConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonitorsConfig* internal_default_instance() {
    return reinterpret_cast<const MonitorsConfig*>(
               &_MonitorsConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MonitorsConfig& a, MonitorsConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitorsConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonitorsConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MonitorsConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MonitorsConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MonitorsConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MonitorsConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitorsConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SweetProtocol.MonitorsConfig";
  }
  protected:
  explicit MonitorsConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MonitorsConfig_Monitor Monitor;

  // accessors -------------------------------------------------------

  enum : int {
    kMonitorsFieldNumber = 2,
    kCountFieldNumber = 1,
  };
  // repeated .SweetProtocol.MonitorsConfig.Monitor monitors = 2;
  int monitors_size() const;
  private:
  int _internal_monitors_size() const;
  public:
  void clear_monitors();
  ::SweetProtocol::MonitorsConfig_Monitor* mutable_monitors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SweetProtocol::MonitorsConfig_Monitor >*
      mutable_monitors();
  private:
  const ::SweetProtocol::MonitorsConfig_Monitor& _internal_monitors(int index) const;
  ::SweetProtocol::MonitorsConfig_Monitor* _internal_add_monitors();
  public:
  const ::SweetProtocol::MonitorsConfig_Monitor& monitors(int index) const;
  ::SweetProtocol::MonitorsConfig_Monitor* add_monitors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SweetProtocol::MonitorsConfig_Monitor >&
      monitors() const;

  // uint32 count = 1;
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SweetProtocol.MonitorsConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SweetProtocol::MonitorsConfig_Monitor > monitors_;
  uint32_t count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sweet_2eproto;
};
// -------------------------------------------------------------------

class SetCursorEvent_CursorShape final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.SetCursorEvent.CursorShape) */ {
 public:
  inline SetCursorEvent_CursorShape() : SetCursorEvent_CursorShape(nullptr) {}
  ~SetCursorEvent_CursorShape() override;
  explicit constexpr SetCursorEvent_CursorShape(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetCursorEvent_CursorShape(const SetCursorEvent_CursorShape& from);
  SetCursorEvent_CursorShape(SetCursorEvent_CursorShape&& from) noexcept
    : SetCursorEvent_CursorShape() {
    *this = ::std::move(from);
  }

  inline SetCursorEvent_CursorShape& operator=(const SetCursorEvent_CursorShape& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCursorEvent_CursorShape& operator=(SetCursorEvent_CursorShape&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetCursorEvent_CursorShape& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetCursorEvent_CursorShape* internal_default_instance() {
    return reinterpret_cast<const SetCursorEvent_CursorShape*>(
               &_SetCursorEvent_CursorShape_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SetCursorEvent_CursorShape& a, SetCursorEvent_CursorShape& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCursorEvent_CursorShape* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCursorEvent_CursorShape* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetCursorEvent_CursorShape* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetCursorEvent_CursorShape>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetCursorEvent_CursorShape& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetCursorEvent_CursorShape& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCursorEvent_CursorShape* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SweetProtocol.SetCursorEvent.CursorShape";
  }
  protected:
  explicit SetCursorEvent_CursorShape(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 6,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kHotspotXFieldNumber = 3,
    kHotspotYFieldNumber = 4,
    kTypeFieldNumber = 5,
  };
  // bytes data = 6;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 width = 1;
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // uint32 height = 2;
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // int32 hotspot_x = 3;
  void clear_hotspot_x();
  int32_t hotspot_x() const;
  void set_hotspot_x(int32_t value);
  private:
  int32_t _internal_hotspot_x() const;
  void _internal_set_hotspot_x(int32_t value);
  public:

  // int32 hotspot_y = 4;
  void clear_hotspot_y();
  int32_t hotspot_y() const;
  void set_hotspot_y(int32_t value);
  private:
  int32_t _internal_hotspot_y() const;
  void _internal_set_hotspot_y(int32_t value);
  public:

  // uint32 type = 5;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SweetProtocol.SetCursorEvent.CursorShape)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  uint32_t width_;
  uint32_t height_;
  int32_t hotspot_x_;
  int32_t hotspot_y_;
  uint32_t type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sweet_2eproto;
};
// -------------------------------------------------------------------

class SetCursorEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.SetCursorEvent) */ {
 public:
  inline SetCursorEvent() : SetCursorEvent(nullptr) {}
  ~SetCursorEvent() override;
  explicit constexpr SetCursorEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetCursorEvent(const SetCursorEvent& from);
  SetCursorEvent(SetCursorEvent&& from) noexcept
    : SetCursorEvent() {
    *this = ::std::move(from);
  }

  inline SetCursorEvent& operator=(const SetCursorEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCursorEvent& operator=(SetCursorEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetCursorEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetCursorEvent* internal_default_instance() {
    return reinterpret_cast<const SetCursorEvent*>(
               &_SetCursorEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SetCursorEvent& a, SetCursorEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCursorEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCursorEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetCursorEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetCursorEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetCursorEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetCursorEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCursorEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SweetProtocol.SetCursorEvent";
  }
  protected:
  explicit SetCursorEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetCursorEvent_CursorShape CursorShape;

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 4,
    kVisibleFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // .SweetProtocol.SetCursorEvent.CursorShape shape = 4;
  bool has_shape() const;
  private:
  bool _internal_has_shape() const;
  public:
  void clear_shape();
  const ::SweetProtocol::SetCursorEvent_CursorShape& shape() const;
  PROTOBUF_NODISCARD ::SweetProtocol::SetCursorEvent_CursorShape* release_shape();
  ::SweetProtocol::SetCursorEvent_CursorShape* mutable_shape();
  void set_allocated_shape(::SweetProtocol::SetCursorEvent_CursorShape* shape);
  private:
  const ::SweetProtocol::SetCursorEvent_CursorShape& _internal_shape() const;
  ::SweetProtocol::SetCursorEvent_CursorShape* _internal_mutable_shape();
  public:
  void unsafe_arena_set_allocated_shape(
      ::SweetProtocol::SetCursorEvent_CursorShape* shape);
  ::SweetProtocol::SetCursorEvent_CursorShape* unsafe_arena_release_shape();

  // bool visible = 1;
  void clear_visible();
  bool visible() const;
  void set_visible(bool value);
  private:
  bool _internal_visible() const;
  void _internal_set_visible(bool value);
  public:

  // int32 x = 2;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 3;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SweetProtocol.SetCursorEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::SweetProtocol::SetCursorEvent_CursorShape* shape_;
  bool visible_;
  int32_t x_;
  int32_t y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sweet_2eproto;
};
// -------------------------------------------------------------------

class DisplayStreamConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.DisplayStreamConfig) */ {
 public:
  inline DisplayStreamConfig() : DisplayStreamConfig(nullptr) {}
  ~DisplayStreamConfig() override;
  explicit constexpr DisplayStreamConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisplayStreamConfig(const DisplayStreamConfig& from);
  DisplayStreamConfig(DisplayStreamConfig&& from) noexcept
    : DisplayStreamConfig() {
    *this = ::std::move(from);
  }

  inline DisplayStreamConfig& operator=(const DisplayStreamConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisplayStreamConfig& operator=(DisplayStreamConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DisplayStreamConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisplayStreamConfig* internal_default_instance() {
    return reinterpret_cast<const DisplayStreamConfig*>(
               &_DisplayStreamConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DisplayStreamConfig& a, DisplayStreamConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DisplayStreamConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisplayStreamConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisplayStreamConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisplayStreamConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DisplayStreamConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DisplayStreamConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisplayStreamConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SweetProtocol.DisplayStreamConfig";
  }
  protected:
  explicit DisplayStreamConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodecFieldNumber = 1,
    kProfileFieldNumber = 2,
    kPresetFieldNumber = 3,
    kRateControlFieldNumber = 4,
    kFpsFieldNumber = 5,
    kBitrateFieldNumber = 6,
    kQminFieldNumber = 7,
    kThreadsFieldNumber = 8,
    kFlagsFieldNumber = 9,
  };
  // string codec = 1;
  void clear_codec();
  const std::string& codec() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_codec(ArgT0&& arg0, ArgT... args);
  std::string* mutable_codec();
  PROTOBUF_NODISCARD std::string* release_codec();
  void set_allocated_codec(std::string* codec);
  private:
  const std::string& _internal_codec() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_codec(const std::string& value);
  std::string* _internal_mutable_codec();
  public:

  // string profile = 2;
  void clear_profile();
  const std::string& profile() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_profile(ArgT0&& arg0, ArgT... args);
  std::string* mutable_profile();
  PROTOBUF_NODISCARD std::string* release_profile();
  void set_allocated_profile(std::string* profile);
  private:
  const std::string& _internal_profile() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_profile(const std::string& value);
  std::string* _internal_mutable_profile();
  public:

  // string preset = 3;
  void clear_preset();
  const std::string& preset() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_preset(ArgT0&& arg0, ArgT... args);
  std::string* mutable_preset();
  PROTOBUF_NODISCARD std::string* release_preset();
  void set_allocated_preset(std::string* preset);
  private:
  const std::string& _internal_preset() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_preset(const std::string& value);
  std::string* _internal_mutable_preset();
  public:

  // string rate_control = 4;
  void clear_rate_control();
  const std::string& rate_control() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rate_control(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rate_control();
  PROTOBUF_NODISCARD std::string* release_rate_control();
  void set_allocated_rate_control(std::string* rate_control);
  private:
  const std::string& _internal_rate_control() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rate_control(const std::string& value);
  std::string* _internal_mutable_rate_control();
  public:

  // uint32 fps = 5;
  void clear_fps();
  uint32_t fps() const;
  void set_fps(uint32_t value);
  private:
  uint32_t _internal_fps() const;
  void _internal_set_fps(uint32_t value);
  public:

  // uint32 bitrate = 6;
  void clear_bitrate();
  uint32_t bitrate() const;
  void set_bitrate(uint32_t value);
  private:
  uint32_t _internal_bitrate() const;
  void _internal_set_bitrate(uint32_t value);
  public:

  // uint32 qmin = 7;
  void clear_qmin();
  uint32_t qmin() const;
  void set_qmin(uint32_t value);
  private:
  uint32_t _internal_qmin() const;
  void _internal_set_qmin(uint32_t value);
  public:

  // uint32 threads = 8;
  void clear_threads();
  uint32_t threads() const;
  void set_threads(uint32_t value);
  private:
  uint32_t _internal_threads() const;
  void _internal_set_threads(uint32_t value);
  public:

  // uint32 flags = 9;
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SweetProtocol.DisplayStreamConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codec_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profile_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rate_control_;
  uint32_t fps_;
  uint32_t bitrate_;
  uint32_t qmin_;
  uint32_t threads_;
  uint32_t flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sweet_2eproto;
};
// -------------------------------------------------------------------

class PlaybackStreamConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.PlaybackStreamConfig) */ {
 public:
  inline PlaybackStreamConfig() : PlaybackStreamConfig(nullptr) {}
  ~PlaybackStreamConfig() override;
  explicit constexpr PlaybackStreamConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlaybackStreamConfig(const PlaybackStreamConfig& from);
  PlaybackStreamConfig(PlaybackStreamConfig&& from) noexcept
    : PlaybackStreamConfig() {
    *this = ::std::move(from);
  }

  inline PlaybackStreamConfig& operator=(const PlaybackStreamConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaybackStreamConfig& operator=(PlaybackStreamConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlaybackStreamConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlaybackStreamConfig* internal_default_instance() {
    return reinterpret_cast<const PlaybackStreamConfig*>(
               &_PlaybackStreamConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PlaybackStreamConfig& a, PlaybackStreamConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaybackStreamConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaybackStreamConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlaybackStreamConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlaybackStreamConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlaybackStreamConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlaybackStreamConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaybackStreamConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SweetProtocol.PlaybackStreamConfig";
  }
  protected:
  explicit PlaybackStreamConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodecFieldNumber = 1,
  };
  // string codec = 1;
  void clear_codec();
  const std::string& codec() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_codec(ArgT0&& arg0, ArgT... args);
  std::string* mutable_codec();
  PROTOBUF_NODISCARD std::string* release_codec();
  void set_allocated_codec(std::string* codec);
  private:
  const std::string& _internal_codec() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_codec(const std::string& value);
  std::string* _internal_mutable_codec();
  public:

  // @@protoc_insertion_point(class_scope:SweetProtocol.PlaybackStreamConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sweet_2eproto;
};
// -------------------------------------------------------------------

class DisplayStreamStartEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.DisplayStreamStartEvent) */ {
 public:
  inline DisplayStreamStartEvent() : DisplayStreamStartEvent(nullptr) {}
  ~DisplayStreamStartEvent() override;
  explicit constexpr DisplayStreamStartEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisplayStreamStartEvent(const DisplayStreamStartEvent& from);
  DisplayStreamStartEvent(DisplayStreamStartEvent&& from) noexcept
    : DisplayStreamStartEvent() {
    *this = ::std::move(from);
  }

  inline DisplayStreamStartEvent& operator=(const DisplayStreamStartEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisplayStreamStartEvent& operator=(DisplayStreamStartEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DisplayStreamStartEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisplayStreamStartEvent* internal_default_instance() {
    return reinterpret_cast<const DisplayStreamStartEvent*>(
               &_DisplayStreamStartEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DisplayStreamStartEvent& a, DisplayStreamStartEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(DisplayStreamStartEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisplayStreamStartEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisplayStreamStartEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisplayStreamStartEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DisplayStreamStartEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DisplayStreamStartEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisplayStreamStartEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SweetProtocol.DisplayStreamStartEvent";
  }
  protected:
  explicit DisplayStreamStartEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // uint32 width = 1;
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // uint32 height = 2;
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SweetProtocol.DisplayStreamStartEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t width_;
  uint32_t height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sweet_2eproto;
};
// -------------------------------------------------------------------

class PlaybackStreamStartEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.PlaybackStreamStartEvent) */ {
 public:
  inline PlaybackStreamStartEvent() : PlaybackStreamStartEvent(nullptr) {}
  ~PlaybackStreamStartEvent() override;
  explicit constexpr PlaybackStreamStartEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlaybackStreamStartEvent(const PlaybackStreamStartEvent& from);
  PlaybackStreamStartEvent(PlaybackStreamStartEvent&& from) noexcept
    : PlaybackStreamStartEvent() {
    *this = ::std::move(from);
  }

  inline PlaybackStreamStartEvent& operator=(const PlaybackStreamStartEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaybackStreamStartEvent& operator=(PlaybackStreamStartEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlaybackStreamStartEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlaybackStreamStartEvent* internal_default_instance() {
    return reinterpret_cast<const PlaybackStreamStartEvent*>(
               &_PlaybackStreamStartEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PlaybackStreamStartEvent& a, PlaybackStreamStartEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaybackStreamStartEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaybackStreamStartEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlaybackStreamStartEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlaybackStreamStartEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlaybackStreamStartEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlaybackStreamStartEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaybackStreamStartEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SweetProtocol.PlaybackStreamStartEvent";
  }
  protected:
  explicit PlaybackStreamStartEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodecFieldNumber = 2,
    kPlaybackIdFieldNumber = 1,
    kFormatFieldNumber = 3,
    kChannelsFieldNumber = 4,
    kFrequencyFieldNumber = 5,
  };
  // string codec = 2;
  void clear_codec();
  const std::string& codec() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_codec(ArgT0&& arg0, ArgT... args);
  std::string* mutable_codec();
  PROTOBUF_NODISCARD std::string* release_codec();
  void set_allocated_codec(std::string* codec);
  private:
  const std::string& _internal_codec() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_codec(const std::string& value);
  std::string* _internal_mutable_codec();
  public:

  // uint32 playback_id = 1;
  void clear_playback_id();
  uint32_t playback_id() const;
  void set_playback_id(uint32_t value);
  private:
  uint32_t _internal_playback_id() const;
  void _internal_set_playback_id(uint32_t value);
  public:

  // uint32 format = 3;
  void clear_format();
  uint32_t format() const;
  void set_format(uint32_t value);
  private:
  uint32_t _internal_format() const;
  void _internal_set_format(uint32_t value);
  public:

  // uint32 channels = 4;
  void clear_channels();
  uint32_t channels() const;
  void set_channels(uint32_t value);
  private:
  uint32_t _internal_channels() const;
  void _internal_set_channels(uint32_t value);
  public:

  // uint32 frequency = 5;
  void clear_frequency();
  uint32_t frequency() const;
  void set_frequency(uint32_t value);
  private:
  uint32_t _internal_frequency() const;
  void _internal_set_frequency(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SweetProtocol.PlaybackStreamStartEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codec_;
  uint32_t playback_id_;
  uint32_t format_;
  uint32_t channels_;
  uint32_t frequency_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sweet_2eproto;
};
// -------------------------------------------------------------------

class RecordStreamConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.RecordStreamConfig) */ {
 public:
  inline RecordStreamConfig() : RecordStreamConfig(nullptr) {}
  ~RecordStreamConfig() override;
  explicit constexpr RecordStreamConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordStreamConfig(const RecordStreamConfig& from);
  RecordStreamConfig(RecordStreamConfig&& from) noexcept
    : RecordStreamConfig() {
    *this = ::std::move(from);
  }

  inline RecordStreamConfig& operator=(const RecordStreamConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordStreamConfig& operator=(RecordStreamConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordStreamConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordStreamConfig* internal_default_instance() {
    return reinterpret_cast<const RecordStreamConfig*>(
               &_RecordStreamConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(RecordStreamConfig& a, RecordStreamConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordStreamConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordStreamConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordStreamConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordStreamConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordStreamConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordStreamConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordStreamConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SweetProtocol.RecordStreamConfig";
  }
  protected:
  explicit RecordStreamConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodecFieldNumber = 1,
    kChannelsFieldNumber = 2,
    kFrequencyFieldNumber = 3,
  };
  // string codec = 1;
  void clear_codec();
  const std::string& codec() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_codec(ArgT0&& arg0, ArgT... args);
  std::string* mutable_codec();
  PROTOBUF_NODISCARD std::string* release_codec();
  void set_allocated_codec(std::string* codec);
  private:
  const std::string& _internal_codec() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_codec(const std::string& value);
  std::string* _internal_mutable_codec();
  public:

  // uint32 channels = 2;
  void clear_channels();
  uint32_t channels() const;
  void set_channels(uint32_t value);
  private:
  uint32_t _internal_channels() const;
  void _internal_set_channels(uint32_t value);
  public:

  // uint32 frequency = 3;
  void clear_frequency();
  uint32_t frequency() const;
  void set_frequency(uint32_t value);
  private:
  uint32_t _internal_frequency() const;
  void _internal_set_frequency(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SweetProtocol.RecordStreamConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codec_;
  uint32_t channels_;
  uint32_t frequency_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sweet_2eproto;
};
// -------------------------------------------------------------------

class SendRecordStreamData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.SendRecordStreamData) */ {
 public:
  inline SendRecordStreamData() : SendRecordStreamData(nullptr) {}
  ~SendRecordStreamData() override;
  explicit constexpr SendRecordStreamData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendRecordStreamData(const SendRecordStreamData& from);
  SendRecordStreamData(SendRecordStreamData&& from) noexcept
    : SendRecordStreamData() {
    *this = ::std::move(from);
  }

  inline SendRecordStreamData& operator=(const SendRecordStreamData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendRecordStreamData& operator=(SendRecordStreamData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendRecordStreamData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendRecordStreamData* internal_default_instance() {
    return reinterpret_cast<const SendRecordStreamData*>(
               &_SendRecordStreamData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SendRecordStreamData& a, SendRecordStreamData& b) {
    a.Swap(&b);
  }
  inline void Swap(SendRecordStreamData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendRecordStreamData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendRecordStreamData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendRecordStreamData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendRecordStreamData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendRecordStreamData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendRecordStreamData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SweetProtocol.SendRecordStreamData";
  }
  protected:
  explicit SendRecordStreamData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 timestamp = 2;
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SweetProtocol.SendRecordStreamData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  uint32_t timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sweet_2eproto;
};
// -------------------------------------------------------------------

class ClipboardDataToGuest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.ClipboardDataToGuest) */ {
 public:
  inline ClipboardDataToGuest() : ClipboardDataToGuest(nullptr) {}
  ~ClipboardDataToGuest() override;
  explicit constexpr ClipboardDataToGuest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClipboardDataToGuest(const ClipboardDataToGuest& from);
  ClipboardDataToGuest(ClipboardDataToGuest&& from) noexcept
    : ClipboardDataToGuest() {
    *this = ::std::move(from);
  }

  inline ClipboardDataToGuest& operator=(const ClipboardDataToGuest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClipboardDataToGuest& operator=(ClipboardDataToGuest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClipboardDataToGuest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClipboardDataToGuest* internal_default_instance() {
    return reinterpret_cast<const ClipboardDataToGuest*>(
               &_ClipboardDataToGuest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ClipboardDataToGuest& a, ClipboardDataToGuest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClipboardDataToGuest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClipboardDataToGuest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClipboardDataToGuest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClipboardDataToGuest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClipboardDataToGuest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClipboardDataToGuest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClipboardDataToGuest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SweetProtocol.ClipboardDataToGuest";
  }
  protected:
  explicit ClipboardDataToGuest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kFileNameFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string file_name = 3;
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // .SweetProtocol.ClipboardDataType type = 1;
  void clear_type();
  ::SweetProtocol::ClipboardDataType type() const;
  void set_type(::SweetProtocol::ClipboardDataType value);
  private:
  ::SweetProtocol::ClipboardDataType _internal_type() const;
  void _internal_set_type(::SweetProtocol::ClipboardDataType value);
  public:

  // @@protoc_insertion_point(class_scope:SweetProtocol.ClipboardDataToGuest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sweet_2eproto;
};
// -------------------------------------------------------------------

class ClipboardStreamDataEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.ClipboardStreamDataEvent) */ {
 public:
  inline ClipboardStreamDataEvent() : ClipboardStreamDataEvent(nullptr) {}
  ~ClipboardStreamDataEvent() override;
  explicit constexpr ClipboardStreamDataEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClipboardStreamDataEvent(const ClipboardStreamDataEvent& from);
  ClipboardStreamDataEvent(ClipboardStreamDataEvent&& from) noexcept
    : ClipboardStreamDataEvent() {
    *this = ::std::move(from);
  }

  inline ClipboardStreamDataEvent& operator=(const ClipboardStreamDataEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClipboardStreamDataEvent& operator=(ClipboardStreamDataEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClipboardStreamDataEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClipboardStreamDataEvent* internal_default_instance() {
    return reinterpret_cast<const ClipboardStreamDataEvent*>(
               &_ClipboardStreamDataEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ClipboardStreamDataEvent& a, ClipboardStreamDataEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ClipboardStreamDataEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClipboardStreamDataEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClipboardStreamDataEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClipboardStreamDataEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClipboardStreamDataEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClipboardStreamDataEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClipboardStreamDataEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SweetProtocol.ClipboardStreamDataEvent";
  }
  protected:
  explicit ClipboardStreamDataEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kFileNameFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string file_name = 3;
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // .SweetProtocol.ClipboardDataType type = 1;
  void clear_type();
  ::SweetProtocol::ClipboardDataType type() const;
  void set_type(::SweetProtocol::ClipboardDataType value);
  private:
  ::SweetProtocol::ClipboardDataType _internal_type() const;
  void _internal_set_type(::SweetProtocol::ClipboardDataType value);
  public:

  // @@protoc_insertion_point(class_scope:SweetProtocol.ClipboardStreamDataEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sweet_2eproto;
};
// -------------------------------------------------------------------

class SendWacomInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.SendWacomInput) */ {
 public:
  inline SendWacomInput() : SendWacomInput(nullptr) {}
  ~SendWacomInput() override;
  explicit constexpr SendWacomInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendWacomInput(const SendWacomInput& from);
  SendWacomInput(SendWacomInput&& from) noexcept
    : SendWacomInput() {
    *this = ::std::move(from);
  }

  inline SendWacomInput& operator=(const SendWacomInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendWacomInput& operator=(SendWacomInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendWacomInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendWacomInput* internal_default_instance() {
    return reinterpret_cast<const SendWacomInput*>(
               &_SendWacomInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SendWacomInput& a, SendWacomInput& b) {
    a.Swap(&b);
  }
  inline void Swap(SendWacomInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendWacomInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendWacomInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendWacomInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendWacomInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendWacomInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendWacomInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SweetProtocol.SendWacomInput";
  }
  protected:
  explicit SendWacomInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kPressureFieldNumber = 3,
    kButtonsFieldNumber = 4,
    kTiltXFieldNumber = 5,
    kTiltYFieldNumber = 6,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double pressure = 3;
  void clear_pressure();
  double pressure() const;
  void set_pressure(double value);
  private:
  double _internal_pressure() const;
  void _internal_set_pressure(double value);
  public:

  // uint32 buttons = 4;
  void clear_buttons();
  uint32_t buttons() const;
  void set_buttons(uint32_t value);
  private:
  uint32_t _internal_buttons() const;
  void _internal_set_buttons(uint32_t value);
  public:

  // uint32 tilt_x = 5;
  void clear_tilt_x();
  uint32_t tilt_x() const;
  void set_tilt_x(uint32_t value);
  private:
  uint32_t _internal_tilt_x() const;
  void _internal_set_tilt_x(uint32_t value);
  public:

  // uint32 tilt_y = 6;
  void clear_tilt_y();
  uint32_t tilt_y() const;
  void set_tilt_y(uint32_t value);
  private:
  uint32_t _internal_tilt_y() const;
  void _internal_set_tilt_y(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SweetProtocol.SendWacomInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double pressure_;
  uint32_t buttons_;
  uint32_t tilt_x_;
  uint32_t tilt_y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sweet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QueryStatusResponse

// bool debug = 1;
inline void QueryStatusResponse::clear_debug() {
  debug_ = false;
}
inline bool QueryStatusResponse::_internal_debug() const {
  return debug_;
}
inline bool QueryStatusResponse::debug() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryStatusResponse.debug)
  return _internal_debug();
}
inline void QueryStatusResponse::_internal_set_debug(bool value) {
  
  debug_ = value;
}
inline void QueryStatusResponse::set_debug(bool value) {
  _internal_set_debug(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryStatusResponse.debug)
}

// bool hypervisor = 2;
inline void QueryStatusResponse::clear_hypervisor() {
  hypervisor_ = false;
}
inline bool QueryStatusResponse::_internal_hypervisor() const {
  return hypervisor_;
}
inline bool QueryStatusResponse::hypervisor() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryStatusResponse.hypervisor)
  return _internal_hypervisor();
}
inline void QueryStatusResponse::_internal_set_hypervisor(bool value) {
  
  hypervisor_ = value;
}
inline void QueryStatusResponse::set_hypervisor(bool value) {
  _internal_set_hypervisor(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryStatusResponse.hypervisor)
}

// string status = 3;
inline void QueryStatusResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& QueryStatusResponse::status() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryStatusResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryStatusResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryStatusResponse.status)
}
inline std::string* QueryStatusResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:SweetProtocol.QueryStatusResponse.status)
  return _s;
}
inline const std::string& QueryStatusResponse::_internal_status() const {
  return status_.Get();
}
inline void QueryStatusResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* QueryStatusResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* QueryStatusResponse::release_status() {
  // @@protoc_insertion_point(field_release:SweetProtocol.QueryStatusResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void QueryStatusResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.QueryStatusResponse.status)
}

// uint32 vcpu_count = 4;
inline void QueryStatusResponse::clear_vcpu_count() {
  vcpu_count_ = 0u;
}
inline uint32_t QueryStatusResponse::_internal_vcpu_count() const {
  return vcpu_count_;
}
inline uint32_t QueryStatusResponse::vcpu_count() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryStatusResponse.vcpu_count)
  return _internal_vcpu_count();
}
inline void QueryStatusResponse::_internal_set_vcpu_count(uint32_t value) {
  
  vcpu_count_ = value;
}
inline void QueryStatusResponse::set_vcpu_count(uint32_t value) {
  _internal_set_vcpu_count(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryStatusResponse.vcpu_count)
}

// uint64 memory_size = 5;
inline void QueryStatusResponse::clear_memory_size() {
  memory_size_ = uint64_t{0u};
}
inline uint64_t QueryStatusResponse::_internal_memory_size() const {
  return memory_size_;
}
inline uint64_t QueryStatusResponse::memory_size() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryStatusResponse.memory_size)
  return _internal_memory_size();
}
inline void QueryStatusResponse::_internal_set_memory_size(uint64_t value) {
  
  memory_size_ = value;
}
inline void QueryStatusResponse::set_memory_size(uint64_t value) {
  _internal_set_memory_size(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryStatusResponse.memory_size)
}

// string vm_uuid = 6;
inline void QueryStatusResponse::clear_vm_uuid() {
  vm_uuid_.ClearToEmpty();
}
inline const std::string& QueryStatusResponse::vm_uuid() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryStatusResponse.vm_uuid)
  return _internal_vm_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryStatusResponse::set_vm_uuid(ArgT0&& arg0, ArgT... args) {
 
 vm_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryStatusResponse.vm_uuid)
}
inline std::string* QueryStatusResponse::mutable_vm_uuid() {
  std::string* _s = _internal_mutable_vm_uuid();
  // @@protoc_insertion_point(field_mutable:SweetProtocol.QueryStatusResponse.vm_uuid)
  return _s;
}
inline const std::string& QueryStatusResponse::_internal_vm_uuid() const {
  return vm_uuid_.Get();
}
inline void QueryStatusResponse::_internal_set_vm_uuid(const std::string& value) {
  
  vm_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* QueryStatusResponse::_internal_mutable_vm_uuid() {
  
  return vm_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* QueryStatusResponse::release_vm_uuid() {
  // @@protoc_insertion_point(field_release:SweetProtocol.QueryStatusResponse.vm_uuid)
  return vm_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void QueryStatusResponse::set_allocated_vm_uuid(std::string* vm_uuid) {
  if (vm_uuid != nullptr) {
    
  } else {
    
  }
  vm_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vm_uuid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vm_uuid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vm_uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.QueryStatusResponse.vm_uuid)
}

// string vm_name = 7;
inline void QueryStatusResponse::clear_vm_name() {
  vm_name_.ClearToEmpty();
}
inline const std::string& QueryStatusResponse::vm_name() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryStatusResponse.vm_name)
  return _internal_vm_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryStatusResponse::set_vm_name(ArgT0&& arg0, ArgT... args) {
 
 vm_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryStatusResponse.vm_name)
}
inline std::string* QueryStatusResponse::mutable_vm_name() {
  std::string* _s = _internal_mutable_vm_name();
  // @@protoc_insertion_point(field_mutable:SweetProtocol.QueryStatusResponse.vm_name)
  return _s;
}
inline const std::string& QueryStatusResponse::_internal_vm_name() const {
  return vm_name_.Get();
}
inline void QueryStatusResponse::_internal_set_vm_name(const std::string& value) {
  
  vm_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* QueryStatusResponse::_internal_mutable_vm_name() {
  
  return vm_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* QueryStatusResponse::release_vm_name() {
  // @@protoc_insertion_point(field_release:SweetProtocol.QueryStatusResponse.vm_name)
  return vm_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void QueryStatusResponse::set_allocated_vm_name(std::string* vm_name) {
  if (vm_name != nullptr) {
    
  } else {
    
  }
  vm_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vm_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vm_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vm_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.QueryStatusResponse.vm_name)
}

// string config_path = 8;
inline void QueryStatusResponse::clear_config_path() {
  config_path_.ClearToEmpty();
}
inline const std::string& QueryStatusResponse::config_path() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryStatusResponse.config_path)
  return _internal_config_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryStatusResponse::set_config_path(ArgT0&& arg0, ArgT... args) {
 
 config_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryStatusResponse.config_path)
}
inline std::string* QueryStatusResponse::mutable_config_path() {
  std::string* _s = _internal_mutable_config_path();
  // @@protoc_insertion_point(field_mutable:SweetProtocol.QueryStatusResponse.config_path)
  return _s;
}
inline const std::string& QueryStatusResponse::_internal_config_path() const {
  return config_path_.Get();
}
inline void QueryStatusResponse::_internal_set_config_path(const std::string& value) {
  
  config_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* QueryStatusResponse::_internal_mutable_config_path() {
  
  return config_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* QueryStatusResponse::release_config_path() {
  // @@protoc_insertion_point(field_release:SweetProtocol.QueryStatusResponse.config_path)
  return config_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void QueryStatusResponse::set_allocated_config_path(std::string* config_path) {
  if (config_path != nullptr) {
    
  } else {
    
  }
  config_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config_path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (config_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    config_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.QueryStatusResponse.config_path)
}

// bool spice_agent = 1001;
inline void QueryStatusResponse::clear_spice_agent() {
  spice_agent_ = false;
}
inline bool QueryStatusResponse::_internal_spice_agent() const {
  return spice_agent_;
}
inline bool QueryStatusResponse::spice_agent() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryStatusResponse.spice_agent)
  return _internal_spice_agent();
}
inline void QueryStatusResponse::_internal_set_spice_agent(bool value) {
  
  spice_agent_ = value;
}
inline void QueryStatusResponse::set_spice_agent(bool value) {
  _internal_set_spice_agent(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryStatusResponse.spice_agent)
}

// bool qemu_agent = 1002;
inline void QueryStatusResponse::clear_qemu_agent() {
  qemu_agent_ = false;
}
inline bool QueryStatusResponse::_internal_qemu_agent() const {
  return qemu_agent_;
}
inline bool QueryStatusResponse::qemu_agent() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryStatusResponse.qemu_agent)
  return _internal_qemu_agent();
}
inline void QueryStatusResponse::_internal_set_qemu_agent(bool value) {
  
  qemu_agent_ = value;
}
inline void QueryStatusResponse::set_qemu_agent(bool value) {
  _internal_set_qemu_agent(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryStatusResponse.qemu_agent)
}

// bool tenclass_agent = 1005;
inline void QueryStatusResponse::clear_tenclass_agent() {
  tenclass_agent_ = false;
}
inline bool QueryStatusResponse::_internal_tenclass_agent() const {
  return tenclass_agent_;
}
inline bool QueryStatusResponse::tenclass_agent() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryStatusResponse.tenclass_agent)
  return _internal_tenclass_agent();
}
inline void QueryStatusResponse::_internal_set_tenclass_agent(bool value) {
  
  tenclass_agent_ = value;
}
inline void QueryStatusResponse::set_tenclass_agent(bool value) {
  _internal_set_tenclass_agent(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryStatusResponse.tenclass_agent)
}

// -------------------------------------------------------------------

// SerialPortStatusEvent

// string port_name = 1;
inline void SerialPortStatusEvent::clear_port_name() {
  port_name_.ClearToEmpty();
}
inline const std::string& SerialPortStatusEvent::port_name() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SerialPortStatusEvent.port_name)
  return _internal_port_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SerialPortStatusEvent::set_port_name(ArgT0&& arg0, ArgT... args) {
 
 port_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SweetProtocol.SerialPortStatusEvent.port_name)
}
inline std::string* SerialPortStatusEvent::mutable_port_name() {
  std::string* _s = _internal_mutable_port_name();
  // @@protoc_insertion_point(field_mutable:SweetProtocol.SerialPortStatusEvent.port_name)
  return _s;
}
inline const std::string& SerialPortStatusEvent::_internal_port_name() const {
  return port_name_.Get();
}
inline void SerialPortStatusEvent::_internal_set_port_name(const std::string& value) {
  
  port_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SerialPortStatusEvent::_internal_mutable_port_name() {
  
  return port_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SerialPortStatusEvent::release_port_name() {
  // @@protoc_insertion_point(field_release:SweetProtocol.SerialPortStatusEvent.port_name)
  return port_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SerialPortStatusEvent::set_allocated_port_name(std::string* port_name) {
  if (port_name != nullptr) {
    
  } else {
    
  }
  port_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (port_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    port_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.SerialPortStatusEvent.port_name)
}

// bool ready = 2;
inline void SerialPortStatusEvent::clear_ready() {
  ready_ = false;
}
inline bool SerialPortStatusEvent::_internal_ready() const {
  return ready_;
}
inline bool SerialPortStatusEvent::ready() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SerialPortStatusEvent.ready)
  return _internal_ready();
}
inline void SerialPortStatusEvent::_internal_set_ready(bool value) {
  
  ready_ = value;
}
inline void SerialPortStatusEvent::set_ready(bool value) {
  _internal_set_ready(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.SerialPortStatusEvent.ready)
}

// -------------------------------------------------------------------

// SaveMachineOptions

// string path = 1;
inline void SaveMachineOptions::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& SaveMachineOptions::path() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SaveMachineOptions.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SaveMachineOptions::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SweetProtocol.SaveMachineOptions.path)
}
inline std::string* SaveMachineOptions::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:SweetProtocol.SaveMachineOptions.path)
  return _s;
}
inline const std::string& SaveMachineOptions::_internal_path() const {
  return path_.Get();
}
inline void SaveMachineOptions::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SaveMachineOptions::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SaveMachineOptions::release_path() {
  // @@protoc_insertion_point(field_release:SweetProtocol.SaveMachineOptions.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SaveMachineOptions::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.SaveMachineOptions.path)
}

// -------------------------------------------------------------------

// SendKeyboardInput

// uint32 scancode = 1;
inline void SendKeyboardInput::clear_scancode() {
  scancode_ = 0u;
}
inline uint32_t SendKeyboardInput::_internal_scancode() const {
  return scancode_;
}
inline uint32_t SendKeyboardInput::scancode() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendKeyboardInput.scancode)
  return _internal_scancode();
}
inline void SendKeyboardInput::_internal_set_scancode(uint32_t value) {
  
  scancode_ = value;
}
inline void SendKeyboardInput::set_scancode(uint32_t value) {
  _internal_set_scancode(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.SendKeyboardInput.scancode)
}

// bool pressed = 2;
inline void SendKeyboardInput::clear_pressed() {
  pressed_ = false;
}
inline bool SendKeyboardInput::_internal_pressed() const {
  return pressed_;
}
inline bool SendKeyboardInput::pressed() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendKeyboardInput.pressed)
  return _internal_pressed();
}
inline void SendKeyboardInput::_internal_set_pressed(bool value) {
  
  pressed_ = value;
}
inline void SendKeyboardInput::set_pressed(bool value) {
  _internal_set_pressed(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.SendKeyboardInput.pressed)
}

// uint32 modifiers = 3;
inline void SendKeyboardInput::clear_modifiers() {
  modifiers_ = 0u;
}
inline uint32_t SendKeyboardInput::_internal_modifiers() const {
  return modifiers_;
}
inline uint32_t SendKeyboardInput::modifiers() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendKeyboardInput.modifiers)
  return _internal_modifiers();
}
inline void SendKeyboardInput::_internal_set_modifiers(uint32_t value) {
  
  modifiers_ = value;
}
inline void SendKeyboardInput::set_modifiers(uint32_t value) {
  _internal_set_modifiers(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.SendKeyboardInput.modifiers)
}

// -------------------------------------------------------------------

// SendMidiInput

// uint32 cable_code_index = 1;
inline void SendMidiInput::clear_cable_code_index() {
  cable_code_index_ = 0u;
}
inline uint32_t SendMidiInput::_internal_cable_code_index() const {
  return cable_code_index_;
}
inline uint32_t SendMidiInput::cable_code_index() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendMidiInput.cable_code_index)
  return _internal_cable_code_index();
}
inline void SendMidiInput::_internal_set_cable_code_index(uint32_t value) {
  
  cable_code_index_ = value;
}
inline void SendMidiInput::set_cable_code_index(uint32_t value) {
  _internal_set_cable_code_index(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.SendMidiInput.cable_code_index)
}

// uint32 midi_0 = 2;
inline void SendMidiInput::clear_midi_0() {
  midi_0_ = 0u;
}
inline uint32_t SendMidiInput::_internal_midi_0() const {
  return midi_0_;
}
inline uint32_t SendMidiInput::midi_0() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendMidiInput.midi_0)
  return _internal_midi_0();
}
inline void SendMidiInput::_internal_set_midi_0(uint32_t value) {
  
  midi_0_ = value;
}
inline void SendMidiInput::set_midi_0(uint32_t value) {
  _internal_set_midi_0(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.SendMidiInput.midi_0)
}

// uint32 midi_1 = 3;
inline void SendMidiInput::clear_midi_1() {
  midi_1_ = 0u;
}
inline uint32_t SendMidiInput::_internal_midi_1() const {
  return midi_1_;
}
inline uint32_t SendMidiInput::midi_1() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendMidiInput.midi_1)
  return _internal_midi_1();
}
inline void SendMidiInput::_internal_set_midi_1(uint32_t value) {
  
  midi_1_ = value;
}
inline void SendMidiInput::set_midi_1(uint32_t value) {
  _internal_set_midi_1(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.SendMidiInput.midi_1)
}

// uint32 midi_2 = 4;
inline void SendMidiInput::clear_midi_2() {
  midi_2_ = 0u;
}
inline uint32_t SendMidiInput::_internal_midi_2() const {
  return midi_2_;
}
inline uint32_t SendMidiInput::midi_2() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendMidiInput.midi_2)
  return _internal_midi_2();
}
inline void SendMidiInput::_internal_set_midi_2(uint32_t value) {
  
  midi_2_ = value;
}
inline void SendMidiInput::set_midi_2(uint32_t value) {
  _internal_set_midi_2(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.SendMidiInput.midi_2)
}

// -------------------------------------------------------------------

// SendPointerInput

// uint32 buttons = 1;
inline void SendPointerInput::clear_buttons() {
  buttons_ = 0u;
}
inline uint32_t SendPointerInput::_internal_buttons() const {
  return buttons_;
}
inline uint32_t SendPointerInput::buttons() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendPointerInput.buttons)
  return _internal_buttons();
}
inline void SendPointerInput::_internal_set_buttons(uint32_t value) {
  
  buttons_ = value;
}
inline void SendPointerInput::set_buttons(uint32_t value) {
  _internal_set_buttons(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.SendPointerInput.buttons)
}

// int32 x = 2;
inline void SendPointerInput::clear_x() {
  x_ = 0;
}
inline int32_t SendPointerInput::_internal_x() const {
  return x_;
}
inline int32_t SendPointerInput::x() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendPointerInput.x)
  return _internal_x();
}
inline void SendPointerInput::_internal_set_x(int32_t value) {
  
  x_ = value;
}
inline void SendPointerInput::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.SendPointerInput.x)
}

// int32 y = 3;
inline void SendPointerInput::clear_y() {
  y_ = 0;
}
inline int32_t SendPointerInput::_internal_y() const {
  return y_;
}
inline int32_t SendPointerInput::y() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendPointerInput.y)
  return _internal_y();
}
inline void SendPointerInput::_internal_set_y(int32_t value) {
  
  y_ = value;
}
inline void SendPointerInput::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.SendPointerInput.y)
}

// int32 z = 4;
inline void SendPointerInput::clear_z() {
  z_ = 0;
}
inline int32_t SendPointerInput::_internal_z() const {
  return z_;
}
inline int32_t SendPointerInput::z() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendPointerInput.z)
  return _internal_z();
}
inline void SendPointerInput::_internal_set_z(int32_t value) {
  
  z_ = value;
}
inline void SendPointerInput::set_z(int32_t value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.SendPointerInput.z)
}

// -------------------------------------------------------------------

// QueryScreeenshot

// string format = 1;
inline void QueryScreeenshot::clear_format() {
  format_.ClearToEmpty();
}
inline const std::string& QueryScreeenshot::format() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryScreeenshot.format)
  return _internal_format();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryScreeenshot::set_format(ArgT0&& arg0, ArgT... args) {
 
 format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryScreeenshot.format)
}
inline std::string* QueryScreeenshot::mutable_format() {
  std::string* _s = _internal_mutable_format();
  // @@protoc_insertion_point(field_mutable:SweetProtocol.QueryScreeenshot.format)
  return _s;
}
inline const std::string& QueryScreeenshot::_internal_format() const {
  return format_.Get();
}
inline void QueryScreeenshot::_internal_set_format(const std::string& value) {
  
  format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* QueryScreeenshot::_internal_mutable_format() {
  
  return format_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* QueryScreeenshot::release_format() {
  // @@protoc_insertion_point(field_release:SweetProtocol.QueryScreeenshot.format)
  return format_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void QueryScreeenshot::set_allocated_format(std::string* format) {
  if (format != nullptr) {
    
  } else {
    
  }
  format_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), format,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (format_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.QueryScreeenshot.format)
}

// uint32 width = 2;
inline void QueryScreeenshot::clear_width() {
  width_ = 0u;
}
inline uint32_t QueryScreeenshot::_internal_width() const {
  return width_;
}
inline uint32_t QueryScreeenshot::width() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryScreeenshot.width)
  return _internal_width();
}
inline void QueryScreeenshot::_internal_set_width(uint32_t value) {
  
  width_ = value;
}
inline void QueryScreeenshot::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryScreeenshot.width)
}

// uint32 height = 3;
inline void QueryScreeenshot::clear_height() {
  height_ = 0u;
}
inline uint32_t QueryScreeenshot::_internal_height() const {
  return height_;
}
inline uint32_t QueryScreeenshot::height() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryScreeenshot.height)
  return _internal_height();
}
inline void QueryScreeenshot::_internal_set_height(uint32_t value) {
  
  height_ = value;
}
inline void QueryScreeenshot::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryScreeenshot.height)
}

// -------------------------------------------------------------------

// QueryScreenshotResponse

// string format = 1;
inline void QueryScreenshotResponse::clear_format() {
  format_.ClearToEmpty();
}
inline const std::string& QueryScreenshotResponse::format() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryScreenshotResponse.format)
  return _internal_format();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryScreenshotResponse::set_format(ArgT0&& arg0, ArgT... args) {
 
 format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryScreenshotResponse.format)
}
inline std::string* QueryScreenshotResponse::mutable_format() {
  std::string* _s = _internal_mutable_format();
  // @@protoc_insertion_point(field_mutable:SweetProtocol.QueryScreenshotResponse.format)
  return _s;
}
inline const std::string& QueryScreenshotResponse::_internal_format() const {
  return format_.Get();
}
inline void QueryScreenshotResponse::_internal_set_format(const std::string& value) {
  
  format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* QueryScreenshotResponse::_internal_mutable_format() {
  
  return format_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* QueryScreenshotResponse::release_format() {
  // @@protoc_insertion_point(field_release:SweetProtocol.QueryScreenshotResponse.format)
  return format_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void QueryScreenshotResponse::set_allocated_format(std::string* format) {
  if (format != nullptr) {
    
  } else {
    
  }
  format_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), format,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (format_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.QueryScreenshotResponse.format)
}

// uint32 width = 2;
inline void QueryScreenshotResponse::clear_width() {
  width_ = 0u;
}
inline uint32_t QueryScreenshotResponse::_internal_width() const {
  return width_;
}
inline uint32_t QueryScreenshotResponse::width() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryScreenshotResponse.width)
  return _internal_width();
}
inline void QueryScreenshotResponse::_internal_set_width(uint32_t value) {
  
  width_ = value;
}
inline void QueryScreenshotResponse::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryScreenshotResponse.width)
}

// uint32 height = 3;
inline void QueryScreenshotResponse::clear_height() {
  height_ = 0u;
}
inline uint32_t QueryScreenshotResponse::_internal_height() const {
  return height_;
}
inline uint32_t QueryScreenshotResponse::height() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryScreenshotResponse.height)
  return _internal_height();
}
inline void QueryScreenshotResponse::_internal_set_height(uint32_t value) {
  
  height_ = value;
}
inline void QueryScreenshotResponse::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryScreenshotResponse.height)
}

// bytes data = 4;
inline void QueryScreenshotResponse::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& QueryScreenshotResponse::data() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryScreenshotResponse.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryScreenshotResponse::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryScreenshotResponse.data)
}
inline std::string* QueryScreenshotResponse::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:SweetProtocol.QueryScreenshotResponse.data)
  return _s;
}
inline const std::string& QueryScreenshotResponse::_internal_data() const {
  return data_.Get();
}
inline void QueryScreenshotResponse::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* QueryScreenshotResponse::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* QueryScreenshotResponse::release_data() {
  // @@protoc_insertion_point(field_release:SweetProtocol.QueryScreenshotResponse.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void QueryScreenshotResponse::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.QueryScreenshotResponse.data)
}

// -------------------------------------------------------------------

// MonitorsConfig_Monitor

// uint32 index = 1;
inline void MonitorsConfig_Monitor::clear_index() {
  index_ = 0u;
}
inline uint32_t MonitorsConfig_Monitor::_internal_index() const {
  return index_;
}
inline uint32_t MonitorsConfig_Monitor::index() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.MonitorsConfig.Monitor.index)
  return _internal_index();
}
inline void MonitorsConfig_Monitor::_internal_set_index(uint32_t value) {
  
  index_ = value;
}
inline void MonitorsConfig_Monitor::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.MonitorsConfig.Monitor.index)
}

// uint32 left = 2;
inline void MonitorsConfig_Monitor::clear_left() {
  left_ = 0u;
}
inline uint32_t MonitorsConfig_Monitor::_internal_left() const {
  return left_;
}
inline uint32_t MonitorsConfig_Monitor::left() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.MonitorsConfig.Monitor.left)
  return _internal_left();
}
inline void MonitorsConfig_Monitor::_internal_set_left(uint32_t value) {
  
  left_ = value;
}
inline void MonitorsConfig_Monitor::set_left(uint32_t value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.MonitorsConfig.Monitor.left)
}

// uint32 top = 3;
inline void MonitorsConfig_Monitor::clear_top() {
  top_ = 0u;
}
inline uint32_t MonitorsConfig_Monitor::_internal_top() const {
  return top_;
}
inline uint32_t MonitorsConfig_Monitor::top() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.MonitorsConfig.Monitor.top)
  return _internal_top();
}
inline void MonitorsConfig_Monitor::_internal_set_top(uint32_t value) {
  
  top_ = value;
}
inline void MonitorsConfig_Monitor::set_top(uint32_t value) {
  _internal_set_top(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.MonitorsConfig.Monitor.top)
}

// uint32 width = 4;
inline void MonitorsConfig_Monitor::clear_width() {
  width_ = 0u;
}
inline uint32_t MonitorsConfig_Monitor::_internal_width() const {
  return width_;
}
inline uint32_t MonitorsConfig_Monitor::width() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.MonitorsConfig.Monitor.width)
  return _internal_width();
}
inline void MonitorsConfig_Monitor::_internal_set_width(uint32_t value) {
  
  width_ = value;
}
inline void MonitorsConfig_Monitor::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.MonitorsConfig.Monitor.width)
}

// uint32 height = 5;
inline void MonitorsConfig_Monitor::clear_height() {
  height_ = 0u;
}
inline uint32_t MonitorsConfig_Monitor::_internal_height() const {
  return height_;
}
inline uint32_t MonitorsConfig_Monitor::height() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.MonitorsConfig.Monitor.height)
  return _internal_height();
}
inline void MonitorsConfig_Monitor::_internal_set_height(uint32_t value) {
  
  height_ = value;
}
inline void MonitorsConfig_Monitor::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.MonitorsConfig.Monitor.height)
}

// uint32 depth = 6;
inline void MonitorsConfig_Monitor::clear_depth() {
  depth_ = 0u;
}
inline uint32_t MonitorsConfig_Monitor::_internal_depth() const {
  return depth_;
}
inline uint32_t MonitorsConfig_Monitor::depth() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.MonitorsConfig.Monitor.depth)
  return _internal_depth();
}
inline void MonitorsConfig_Monitor::_internal_set_depth(uint32_t value) {
  
  depth_ = value;
}
inline void MonitorsConfig_Monitor::set_depth(uint32_t value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.MonitorsConfig.Monitor.depth)
}

// -------------------------------------------------------------------

// MonitorsConfig

// uint32 count = 1;
inline void MonitorsConfig::clear_count() {
  count_ = 0u;
}
inline uint32_t MonitorsConfig::_internal_count() const {
  return count_;
}
inline uint32_t MonitorsConfig::count() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.MonitorsConfig.count)
  return _internal_count();
}
inline void MonitorsConfig::_internal_set_count(uint32_t value) {
  
  count_ = value;
}
inline void MonitorsConfig::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.MonitorsConfig.count)
}

// repeated .SweetProtocol.MonitorsConfig.Monitor monitors = 2;
inline int MonitorsConfig::_internal_monitors_size() const {
  return monitors_.size();
}
inline int MonitorsConfig::monitors_size() const {
  return _internal_monitors_size();
}
inline void MonitorsConfig::clear_monitors() {
  monitors_.Clear();
}
inline ::SweetProtocol::MonitorsConfig_Monitor* MonitorsConfig::mutable_monitors(int index) {
  // @@protoc_insertion_point(field_mutable:SweetProtocol.MonitorsConfig.monitors)
  return monitors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SweetProtocol::MonitorsConfig_Monitor >*
MonitorsConfig::mutable_monitors() {
  // @@protoc_insertion_point(field_mutable_list:SweetProtocol.MonitorsConfig.monitors)
  return &monitors_;
}
inline const ::SweetProtocol::MonitorsConfig_Monitor& MonitorsConfig::_internal_monitors(int index) const {
  return monitors_.Get(index);
}
inline const ::SweetProtocol::MonitorsConfig_Monitor& MonitorsConfig::monitors(int index) const {
  // @@protoc_insertion_point(field_get:SweetProtocol.MonitorsConfig.monitors)
  return _internal_monitors(index);
}
inline ::SweetProtocol::MonitorsConfig_Monitor* MonitorsConfig::_internal_add_monitors() {
  return monitors_.Add();
}
inline ::SweetProtocol::MonitorsConfig_Monitor* MonitorsConfig::add_monitors() {
  ::SweetProtocol::MonitorsConfig_Monitor* _add = _internal_add_monitors();
  // @@protoc_insertion_point(field_add:SweetProtocol.MonitorsConfig.monitors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SweetProtocol::MonitorsConfig_Monitor >&
MonitorsConfig::monitors() const {
  // @@protoc_insertion_point(field_list:SweetProtocol.MonitorsConfig.monitors)
  return monitors_;
}

// -------------------------------------------------------------------

// SetCursorEvent_CursorShape

// uint32 width = 1;
inline void SetCursorEvent_CursorShape::clear_width() {
  width_ = 0u;
}
inline uint32_t SetCursorEvent_CursorShape::_internal_width() const {
  return width_;
}
inline uint32_t SetCursorEvent_CursorShape::width() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SetCursorEvent.CursorShape.width)
  return _internal_width();
}
inline void SetCursorEvent_CursorShape::_internal_set_width(uint32_t value) {
  
  width_ = value;
}
inline void SetCursorEvent_CursorShape::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.SetCursorEvent.CursorShape.width)
}

// uint32 height = 2;
inline void SetCursorEvent_CursorShape::clear_height() {
  height_ = 0u;
}
inline uint32_t SetCursorEvent_CursorShape::_internal_height() const {
  return height_;
}
inline uint32_t SetCursorEvent_CursorShape::height() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SetCursorEvent.CursorShape.height)
  return _internal_height();
}
inline void SetCursorEvent_CursorShape::_internal_set_height(uint32_t value) {
  
  height_ = value;
}
inline void SetCursorEvent_CursorShape::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.SetCursorEvent.CursorShape.height)
}

// int32 hotspot_x = 3;
inline void SetCursorEvent_CursorShape::clear_hotspot_x() {
  hotspot_x_ = 0;
}
inline int32_t SetCursorEvent_CursorShape::_internal_hotspot_x() const {
  return hotspot_x_;
}
inline int32_t SetCursorEvent_CursorShape::hotspot_x() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SetCursorEvent.CursorShape.hotspot_x)
  return _internal_hotspot_x();
}
inline void SetCursorEvent_CursorShape::_internal_set_hotspot_x(int32_t value) {
  
  hotspot_x_ = value;
}
inline void SetCursorEvent_CursorShape::set_hotspot_x(int32_t value) {
  _internal_set_hotspot_x(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.SetCursorEvent.CursorShape.hotspot_x)
}

// int32 hotspot_y = 4;
inline void SetCursorEvent_CursorShape::clear_hotspot_y() {
  hotspot_y_ = 0;
}
inline int32_t SetCursorEvent_CursorShape::_internal_hotspot_y() const {
  return hotspot_y_;
}
inline int32_t SetCursorEvent_CursorShape::hotspot_y() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SetCursorEvent.CursorShape.hotspot_y)
  return _internal_hotspot_y();
}
inline void SetCursorEvent_CursorShape::_internal_set_hotspot_y(int32_t value) {
  
  hotspot_y_ = value;
}
inline void SetCursorEvent_CursorShape::set_hotspot_y(int32_t value) {
  _internal_set_hotspot_y(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.SetCursorEvent.CursorShape.hotspot_y)
}

// uint32 type = 5;
inline void SetCursorEvent_CursorShape::clear_type() {
  type_ = 0u;
}
inline uint32_t SetCursorEvent_CursorShape::_internal_type() const {
  return type_;
}
inline uint32_t SetCursorEvent_CursorShape::type() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SetCursorEvent.CursorShape.type)
  return _internal_type();
}
inline void SetCursorEvent_CursorShape::_internal_set_type(uint32_t value) {
  
  type_ = value;
}
inline void SetCursorEvent_CursorShape::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.SetCursorEvent.CursorShape.type)
}

// bytes data = 6;
inline void SetCursorEvent_CursorShape::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& SetCursorEvent_CursorShape::data() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SetCursorEvent.CursorShape.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetCursorEvent_CursorShape::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SweetProtocol.SetCursorEvent.CursorShape.data)
}
inline std::string* SetCursorEvent_CursorShape::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:SweetProtocol.SetCursorEvent.CursorShape.data)
  return _s;
}
inline const std::string& SetCursorEvent_CursorShape::_internal_data() const {
  return data_.Get();
}
inline void SetCursorEvent_CursorShape::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetCursorEvent_CursorShape::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetCursorEvent_CursorShape::release_data() {
  // @@protoc_insertion_point(field_release:SweetProtocol.SetCursorEvent.CursorShape.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SetCursorEvent_CursorShape::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.SetCursorEvent.CursorShape.data)
}

// -------------------------------------------------------------------

// SetCursorEvent

// bool visible = 1;
inline void SetCursorEvent::clear_visible() {
  visible_ = false;
}
inline bool SetCursorEvent::_internal_visible() const {
  return visible_;
}
inline bool SetCursorEvent::visible() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SetCursorEvent.visible)
  return _internal_visible();
}
inline void SetCursorEvent::_internal_set_visible(bool value) {
  
  visible_ = value;
}
inline void SetCursorEvent::set_visible(bool value) {
  _internal_set_visible(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.SetCursorEvent.visible)
}

// int32 x = 2;
inline void SetCursorEvent::clear_x() {
  x_ = 0;
}
inline int32_t SetCursorEvent::_internal_x() const {
  return x_;
}
inline int32_t SetCursorEvent::x() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SetCursorEvent.x)
  return _internal_x();
}
inline void SetCursorEvent::_internal_set_x(int32_t value) {
  
  x_ = value;
}
inline void SetCursorEvent::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.SetCursorEvent.x)
}

// int32 y = 3;
inline void SetCursorEvent::clear_y() {
  y_ = 0;
}
inline int32_t SetCursorEvent::_internal_y() const {
  return y_;
}
inline int32_t SetCursorEvent::y() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SetCursorEvent.y)
  return _internal_y();
}
inline void SetCursorEvent::_internal_set_y(int32_t value) {
  
  y_ = value;
}
inline void SetCursorEvent::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.SetCursorEvent.y)
}

// .SweetProtocol.SetCursorEvent.CursorShape shape = 4;
inline bool SetCursorEvent::_internal_has_shape() const {
  return this != internal_default_instance() && shape_ != nullptr;
}
inline bool SetCursorEvent::has_shape() const {
  return _internal_has_shape();
}
inline void SetCursorEvent::clear_shape() {
  if (GetArenaForAllocation() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
}
inline const ::SweetProtocol::SetCursorEvent_CursorShape& SetCursorEvent::_internal_shape() const {
  const ::SweetProtocol::SetCursorEvent_CursorShape* p = shape_;
  return p != nullptr ? *p : reinterpret_cast<const ::SweetProtocol::SetCursorEvent_CursorShape&>(
      ::SweetProtocol::_SetCursorEvent_CursorShape_default_instance_);
}
inline const ::SweetProtocol::SetCursorEvent_CursorShape& SetCursorEvent::shape() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SetCursorEvent.shape)
  return _internal_shape();
}
inline void SetCursorEvent::unsafe_arena_set_allocated_shape(
    ::SweetProtocol::SetCursorEvent_CursorShape* shape) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SweetProtocol.SetCursorEvent.shape)
}
inline ::SweetProtocol::SetCursorEvent_CursorShape* SetCursorEvent::release_shape() {
  
  ::SweetProtocol::SetCursorEvent_CursorShape* temp = shape_;
  shape_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SweetProtocol::SetCursorEvent_CursorShape* SetCursorEvent::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_release:SweetProtocol.SetCursorEvent.shape)
  
  ::SweetProtocol::SetCursorEvent_CursorShape* temp = shape_;
  shape_ = nullptr;
  return temp;
}
inline ::SweetProtocol::SetCursorEvent_CursorShape* SetCursorEvent::_internal_mutable_shape() {
  
  if (shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::SweetProtocol::SetCursorEvent_CursorShape>(GetArenaForAllocation());
    shape_ = p;
  }
  return shape_;
}
inline ::SweetProtocol::SetCursorEvent_CursorShape* SetCursorEvent::mutable_shape() {
  ::SweetProtocol::SetCursorEvent_CursorShape* _msg = _internal_mutable_shape();
  // @@protoc_insertion_point(field_mutable:SweetProtocol.SetCursorEvent.shape)
  return _msg;
}
inline void SetCursorEvent::set_allocated_shape(::SweetProtocol::SetCursorEvent_CursorShape* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete shape_;
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::SweetProtocol::SetCursorEvent_CursorShape>::GetOwningArena(shape);
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    
  } else {
    
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.SetCursorEvent.shape)
}

// -------------------------------------------------------------------

// DisplayStreamConfig

// string codec = 1;
inline void DisplayStreamConfig::clear_codec() {
  codec_.ClearToEmpty();
}
inline const std::string& DisplayStreamConfig::codec() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.DisplayStreamConfig.codec)
  return _internal_codec();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DisplayStreamConfig::set_codec(ArgT0&& arg0, ArgT... args) {
 
 codec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SweetProtocol.DisplayStreamConfig.codec)
}
inline std::string* DisplayStreamConfig::mutable_codec() {
  std::string* _s = _internal_mutable_codec();
  // @@protoc_insertion_point(field_mutable:SweetProtocol.DisplayStreamConfig.codec)
  return _s;
}
inline const std::string& DisplayStreamConfig::_internal_codec() const {
  return codec_.Get();
}
inline void DisplayStreamConfig::_internal_set_codec(const std::string& value) {
  
  codec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DisplayStreamConfig::_internal_mutable_codec() {
  
  return codec_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DisplayStreamConfig::release_codec() {
  // @@protoc_insertion_point(field_release:SweetProtocol.DisplayStreamConfig.codec)
  return codec_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DisplayStreamConfig::set_allocated_codec(std::string* codec) {
  if (codec != nullptr) {
    
  } else {
    
  }
  codec_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), codec,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (codec_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    codec_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.DisplayStreamConfig.codec)
}

// string profile = 2;
inline void DisplayStreamConfig::clear_profile() {
  profile_.ClearToEmpty();
}
inline const std::string& DisplayStreamConfig::profile() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.DisplayStreamConfig.profile)
  return _internal_profile();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DisplayStreamConfig::set_profile(ArgT0&& arg0, ArgT... args) {
 
 profile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SweetProtocol.DisplayStreamConfig.profile)
}
inline std::string* DisplayStreamConfig::mutable_profile() {
  std::string* _s = _internal_mutable_profile();
  // @@protoc_insertion_point(field_mutable:SweetProtocol.DisplayStreamConfig.profile)
  return _s;
}
inline const std::string& DisplayStreamConfig::_internal_profile() const {
  return profile_.Get();
}
inline void DisplayStreamConfig::_internal_set_profile(const std::string& value) {
  
  profile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DisplayStreamConfig::_internal_mutable_profile() {
  
  return profile_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DisplayStreamConfig::release_profile() {
  // @@protoc_insertion_point(field_release:SweetProtocol.DisplayStreamConfig.profile)
  return profile_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DisplayStreamConfig::set_allocated_profile(std::string* profile) {
  if (profile != nullptr) {
    
  } else {
    
  }
  profile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), profile,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (profile_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    profile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.DisplayStreamConfig.profile)
}

// string preset = 3;
inline void DisplayStreamConfig::clear_preset() {
  preset_.ClearToEmpty();
}
inline const std::string& DisplayStreamConfig::preset() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.DisplayStreamConfig.preset)
  return _internal_preset();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DisplayStreamConfig::set_preset(ArgT0&& arg0, ArgT... args) {
 
 preset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SweetProtocol.DisplayStreamConfig.preset)
}
inline std::string* DisplayStreamConfig::mutable_preset() {
  std::string* _s = _internal_mutable_preset();
  // @@protoc_insertion_point(field_mutable:SweetProtocol.DisplayStreamConfig.preset)
  return _s;
}
inline const std::string& DisplayStreamConfig::_internal_preset() const {
  return preset_.Get();
}
inline void DisplayStreamConfig::_internal_set_preset(const std::string& value) {
  
  preset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DisplayStreamConfig::_internal_mutable_preset() {
  
  return preset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DisplayStreamConfig::release_preset() {
  // @@protoc_insertion_point(field_release:SweetProtocol.DisplayStreamConfig.preset)
  return preset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DisplayStreamConfig::set_allocated_preset(std::string* preset) {
  if (preset != nullptr) {
    
  } else {
    
  }
  preset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), preset,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (preset_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    preset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.DisplayStreamConfig.preset)
}

// string rate_control = 4;
inline void DisplayStreamConfig::clear_rate_control() {
  rate_control_.ClearToEmpty();
}
inline const std::string& DisplayStreamConfig::rate_control() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.DisplayStreamConfig.rate_control)
  return _internal_rate_control();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DisplayStreamConfig::set_rate_control(ArgT0&& arg0, ArgT... args) {
 
 rate_control_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SweetProtocol.DisplayStreamConfig.rate_control)
}
inline std::string* DisplayStreamConfig::mutable_rate_control() {
  std::string* _s = _internal_mutable_rate_control();
  // @@protoc_insertion_point(field_mutable:SweetProtocol.DisplayStreamConfig.rate_control)
  return _s;
}
inline const std::string& DisplayStreamConfig::_internal_rate_control() const {
  return rate_control_.Get();
}
inline void DisplayStreamConfig::_internal_set_rate_control(const std::string& value) {
  
  rate_control_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DisplayStreamConfig::_internal_mutable_rate_control() {
  
  return rate_control_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DisplayStreamConfig::release_rate_control() {
  // @@protoc_insertion_point(field_release:SweetProtocol.DisplayStreamConfig.rate_control)
  return rate_control_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DisplayStreamConfig::set_allocated_rate_control(std::string* rate_control) {
  if (rate_control != nullptr) {
    
  } else {
    
  }
  rate_control_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rate_control,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rate_control_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    rate_control_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.DisplayStreamConfig.rate_control)
}

// uint32 fps = 5;
inline void DisplayStreamConfig::clear_fps() {
  fps_ = 0u;
}
inline uint32_t DisplayStreamConfig::_internal_fps() const {
  return fps_;
}
inline uint32_t DisplayStreamConfig::fps() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.DisplayStreamConfig.fps)
  return _internal_fps();
}
inline void DisplayStreamConfig::_internal_set_fps(uint32_t value) {
  
  fps_ = value;
}
inline void DisplayStreamConfig::set_fps(uint32_t value) {
  _internal_set_fps(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.DisplayStreamConfig.fps)
}

// uint32 bitrate = 6;
inline void DisplayStreamConfig::clear_bitrate() {
  bitrate_ = 0u;
}
inline uint32_t DisplayStreamConfig::_internal_bitrate() const {
  return bitrate_;
}
inline uint32_t DisplayStreamConfig::bitrate() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.DisplayStreamConfig.bitrate)
  return _internal_bitrate();
}
inline void DisplayStreamConfig::_internal_set_bitrate(uint32_t value) {
  
  bitrate_ = value;
}
inline void DisplayStreamConfig::set_bitrate(uint32_t value) {
  _internal_set_bitrate(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.DisplayStreamConfig.bitrate)
}

// uint32 qmin = 7;
inline void DisplayStreamConfig::clear_qmin() {
  qmin_ = 0u;
}
inline uint32_t DisplayStreamConfig::_internal_qmin() const {
  return qmin_;
}
inline uint32_t DisplayStreamConfig::qmin() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.DisplayStreamConfig.qmin)
  return _internal_qmin();
}
inline void DisplayStreamConfig::_internal_set_qmin(uint32_t value) {
  
  qmin_ = value;
}
inline void DisplayStreamConfig::set_qmin(uint32_t value) {
  _internal_set_qmin(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.DisplayStreamConfig.qmin)
}

// uint32 threads = 8;
inline void DisplayStreamConfig::clear_threads() {
  threads_ = 0u;
}
inline uint32_t DisplayStreamConfig::_internal_threads() const {
  return threads_;
}
inline uint32_t DisplayStreamConfig::threads() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.DisplayStreamConfig.threads)
  return _internal_threads();
}
inline void DisplayStreamConfig::_internal_set_threads(uint32_t value) {
  
  threads_ = value;
}
inline void DisplayStreamConfig::set_threads(uint32_t value) {
  _internal_set_threads(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.DisplayStreamConfig.threads)
}

// uint32 flags = 9;
inline void DisplayStreamConfig::clear_flags() {
  flags_ = 0u;
}
inline uint32_t DisplayStreamConfig::_internal_flags() const {
  return flags_;
}
inline uint32_t DisplayStreamConfig::flags() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.DisplayStreamConfig.flags)
  return _internal_flags();
}
inline void DisplayStreamConfig::_internal_set_flags(uint32_t value) {
  
  flags_ = value;
}
inline void DisplayStreamConfig::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.DisplayStreamConfig.flags)
}

// -------------------------------------------------------------------

// PlaybackStreamConfig

// string codec = 1;
inline void PlaybackStreamConfig::clear_codec() {
  codec_.ClearToEmpty();
}
inline const std::string& PlaybackStreamConfig::codec() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.PlaybackStreamConfig.codec)
  return _internal_codec();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlaybackStreamConfig::set_codec(ArgT0&& arg0, ArgT... args) {
 
 codec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SweetProtocol.PlaybackStreamConfig.codec)
}
inline std::string* PlaybackStreamConfig::mutable_codec() {
  std::string* _s = _internal_mutable_codec();
  // @@protoc_insertion_point(field_mutable:SweetProtocol.PlaybackStreamConfig.codec)
  return _s;
}
inline const std::string& PlaybackStreamConfig::_internal_codec() const {
  return codec_.Get();
}
inline void PlaybackStreamConfig::_internal_set_codec(const std::string& value) {
  
  codec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlaybackStreamConfig::_internal_mutable_codec() {
  
  return codec_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlaybackStreamConfig::release_codec() {
  // @@protoc_insertion_point(field_release:SweetProtocol.PlaybackStreamConfig.codec)
  return codec_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlaybackStreamConfig::set_allocated_codec(std::string* codec) {
  if (codec != nullptr) {
    
  } else {
    
  }
  codec_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), codec,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (codec_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    codec_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.PlaybackStreamConfig.codec)
}

// -------------------------------------------------------------------

// DisplayStreamStartEvent

// uint32 width = 1;
inline void DisplayStreamStartEvent::clear_width() {
  width_ = 0u;
}
inline uint32_t DisplayStreamStartEvent::_internal_width() const {
  return width_;
}
inline uint32_t DisplayStreamStartEvent::width() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.DisplayStreamStartEvent.width)
  return _internal_width();
}
inline void DisplayStreamStartEvent::_internal_set_width(uint32_t value) {
  
  width_ = value;
}
inline void DisplayStreamStartEvent::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.DisplayStreamStartEvent.width)
}

// uint32 height = 2;
inline void DisplayStreamStartEvent::clear_height() {
  height_ = 0u;
}
inline uint32_t DisplayStreamStartEvent::_internal_height() const {
  return height_;
}
inline uint32_t DisplayStreamStartEvent::height() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.DisplayStreamStartEvent.height)
  return _internal_height();
}
inline void DisplayStreamStartEvent::_internal_set_height(uint32_t value) {
  
  height_ = value;
}
inline void DisplayStreamStartEvent::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.DisplayStreamStartEvent.height)
}

// -------------------------------------------------------------------

// PlaybackStreamStartEvent

// uint32 playback_id = 1;
inline void PlaybackStreamStartEvent::clear_playback_id() {
  playback_id_ = 0u;
}
inline uint32_t PlaybackStreamStartEvent::_internal_playback_id() const {
  return playback_id_;
}
inline uint32_t PlaybackStreamStartEvent::playback_id() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.PlaybackStreamStartEvent.playback_id)
  return _internal_playback_id();
}
inline void PlaybackStreamStartEvent::_internal_set_playback_id(uint32_t value) {
  
  playback_id_ = value;
}
inline void PlaybackStreamStartEvent::set_playback_id(uint32_t value) {
  _internal_set_playback_id(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.PlaybackStreamStartEvent.playback_id)
}

// string codec = 2;
inline void PlaybackStreamStartEvent::clear_codec() {
  codec_.ClearToEmpty();
}
inline const std::string& PlaybackStreamStartEvent::codec() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.PlaybackStreamStartEvent.codec)
  return _internal_codec();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlaybackStreamStartEvent::set_codec(ArgT0&& arg0, ArgT... args) {
 
 codec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SweetProtocol.PlaybackStreamStartEvent.codec)
}
inline std::string* PlaybackStreamStartEvent::mutable_codec() {
  std::string* _s = _internal_mutable_codec();
  // @@protoc_insertion_point(field_mutable:SweetProtocol.PlaybackStreamStartEvent.codec)
  return _s;
}
inline const std::string& PlaybackStreamStartEvent::_internal_codec() const {
  return codec_.Get();
}
inline void PlaybackStreamStartEvent::_internal_set_codec(const std::string& value) {
  
  codec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlaybackStreamStartEvent::_internal_mutable_codec() {
  
  return codec_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlaybackStreamStartEvent::release_codec() {
  // @@protoc_insertion_point(field_release:SweetProtocol.PlaybackStreamStartEvent.codec)
  return codec_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlaybackStreamStartEvent::set_allocated_codec(std::string* codec) {
  if (codec != nullptr) {
    
  } else {
    
  }
  codec_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), codec,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (codec_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    codec_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.PlaybackStreamStartEvent.codec)
}

// uint32 format = 3;
inline void PlaybackStreamStartEvent::clear_format() {
  format_ = 0u;
}
inline uint32_t PlaybackStreamStartEvent::_internal_format() const {
  return format_;
}
inline uint32_t PlaybackStreamStartEvent::format() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.PlaybackStreamStartEvent.format)
  return _internal_format();
}
inline void PlaybackStreamStartEvent::_internal_set_format(uint32_t value) {
  
  format_ = value;
}
inline void PlaybackStreamStartEvent::set_format(uint32_t value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.PlaybackStreamStartEvent.format)
}

// uint32 channels = 4;
inline void PlaybackStreamStartEvent::clear_channels() {
  channels_ = 0u;
}
inline uint32_t PlaybackStreamStartEvent::_internal_channels() const {
  return channels_;
}
inline uint32_t PlaybackStreamStartEvent::channels() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.PlaybackStreamStartEvent.channels)
  return _internal_channels();
}
inline void PlaybackStreamStartEvent::_internal_set_channels(uint32_t value) {
  
  channels_ = value;
}
inline void PlaybackStreamStartEvent::set_channels(uint32_t value) {
  _internal_set_channels(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.PlaybackStreamStartEvent.channels)
}

// uint32 frequency = 5;
inline void PlaybackStreamStartEvent::clear_frequency() {
  frequency_ = 0u;
}
inline uint32_t PlaybackStreamStartEvent::_internal_frequency() const {
  return frequency_;
}
inline uint32_t PlaybackStreamStartEvent::frequency() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.PlaybackStreamStartEvent.frequency)
  return _internal_frequency();
}
inline void PlaybackStreamStartEvent::_internal_set_frequency(uint32_t value) {
  
  frequency_ = value;
}
inline void PlaybackStreamStartEvent::set_frequency(uint32_t value) {
  _internal_set_frequency(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.PlaybackStreamStartEvent.frequency)
}

// -------------------------------------------------------------------

// RecordStreamConfig

// string codec = 1;
inline void RecordStreamConfig::clear_codec() {
  codec_.ClearToEmpty();
}
inline const std::string& RecordStreamConfig::codec() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.RecordStreamConfig.codec)
  return _internal_codec();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RecordStreamConfig::set_codec(ArgT0&& arg0, ArgT... args) {
 
 codec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SweetProtocol.RecordStreamConfig.codec)
}
inline std::string* RecordStreamConfig::mutable_codec() {
  std::string* _s = _internal_mutable_codec();
  // @@protoc_insertion_point(field_mutable:SweetProtocol.RecordStreamConfig.codec)
  return _s;
}
inline const std::string& RecordStreamConfig::_internal_codec() const {
  return codec_.Get();
}
inline void RecordStreamConfig::_internal_set_codec(const std::string& value) {
  
  codec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RecordStreamConfig::_internal_mutable_codec() {
  
  return codec_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RecordStreamConfig::release_codec() {
  // @@protoc_insertion_point(field_release:SweetProtocol.RecordStreamConfig.codec)
  return codec_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RecordStreamConfig::set_allocated_codec(std::string* codec) {
  if (codec != nullptr) {
    
  } else {
    
  }
  codec_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), codec,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (codec_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    codec_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.RecordStreamConfig.codec)
}

// uint32 channels = 2;
inline void RecordStreamConfig::clear_channels() {
  channels_ = 0u;
}
inline uint32_t RecordStreamConfig::_internal_channels() const {
  return channels_;
}
inline uint32_t RecordStreamConfig::channels() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.RecordStreamConfig.channels)
  return _internal_channels();
}
inline void RecordStreamConfig::_internal_set_channels(uint32_t value) {
  
  channels_ = value;
}
inline void RecordStreamConfig::set_channels(uint32_t value) {
  _internal_set_channels(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.RecordStreamConfig.channels)
}

// uint32 frequency = 3;
inline void RecordStreamConfig::clear_frequency() {
  frequency_ = 0u;
}
inline uint32_t RecordStreamConfig::_internal_frequency() const {
  return frequency_;
}
inline uint32_t RecordStreamConfig::frequency() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.RecordStreamConfig.frequency)
  return _internal_frequency();
}
inline void RecordStreamConfig::_internal_set_frequency(uint32_t value) {
  
  frequency_ = value;
}
inline void RecordStreamConfig::set_frequency(uint32_t value) {
  _internal_set_frequency(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.RecordStreamConfig.frequency)
}

// -------------------------------------------------------------------

// SendRecordStreamData

// bytes data = 1;
inline void SendRecordStreamData::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& SendRecordStreamData::data() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendRecordStreamData.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendRecordStreamData::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SweetProtocol.SendRecordStreamData.data)
}
inline std::string* SendRecordStreamData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:SweetProtocol.SendRecordStreamData.data)
  return _s;
}
inline const std::string& SendRecordStreamData::_internal_data() const {
  return data_.Get();
}
inline void SendRecordStreamData::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SendRecordStreamData::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SendRecordStreamData::release_data() {
  // @@protoc_insertion_point(field_release:SweetProtocol.SendRecordStreamData.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SendRecordStreamData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.SendRecordStreamData.data)
}

// uint32 timestamp = 2;
inline void SendRecordStreamData::clear_timestamp() {
  timestamp_ = 0u;
}
inline uint32_t SendRecordStreamData::_internal_timestamp() const {
  return timestamp_;
}
inline uint32_t SendRecordStreamData::timestamp() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendRecordStreamData.timestamp)
  return _internal_timestamp();
}
inline void SendRecordStreamData::_internal_set_timestamp(uint32_t value) {
  
  timestamp_ = value;
}
inline void SendRecordStreamData::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.SendRecordStreamData.timestamp)
}

// -------------------------------------------------------------------

// ClipboardDataToGuest

// .SweetProtocol.ClipboardDataType type = 1;
inline void ClipboardDataToGuest::clear_type() {
  type_ = 0;
}
inline ::SweetProtocol::ClipboardDataType ClipboardDataToGuest::_internal_type() const {
  return static_cast< ::SweetProtocol::ClipboardDataType >(type_);
}
inline ::SweetProtocol::ClipboardDataType ClipboardDataToGuest::type() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.ClipboardDataToGuest.type)
  return _internal_type();
}
inline void ClipboardDataToGuest::_internal_set_type(::SweetProtocol::ClipboardDataType value) {
  
  type_ = value;
}
inline void ClipboardDataToGuest::set_type(::SweetProtocol::ClipboardDataType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.ClipboardDataToGuest.type)
}

// bytes data = 2;
inline void ClipboardDataToGuest::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& ClipboardDataToGuest::data() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.ClipboardDataToGuest.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClipboardDataToGuest::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SweetProtocol.ClipboardDataToGuest.data)
}
inline std::string* ClipboardDataToGuest::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:SweetProtocol.ClipboardDataToGuest.data)
  return _s;
}
inline const std::string& ClipboardDataToGuest::_internal_data() const {
  return data_.Get();
}
inline void ClipboardDataToGuest::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ClipboardDataToGuest::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ClipboardDataToGuest::release_data() {
  // @@protoc_insertion_point(field_release:SweetProtocol.ClipboardDataToGuest.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ClipboardDataToGuest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.ClipboardDataToGuest.data)
}

// string file_name = 3;
inline void ClipboardDataToGuest::clear_file_name() {
  file_name_.ClearToEmpty();
}
inline const std::string& ClipboardDataToGuest::file_name() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.ClipboardDataToGuest.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClipboardDataToGuest::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SweetProtocol.ClipboardDataToGuest.file_name)
}
inline std::string* ClipboardDataToGuest::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:SweetProtocol.ClipboardDataToGuest.file_name)
  return _s;
}
inline const std::string& ClipboardDataToGuest::_internal_file_name() const {
  return file_name_.Get();
}
inline void ClipboardDataToGuest::_internal_set_file_name(const std::string& value) {
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ClipboardDataToGuest::_internal_mutable_file_name() {
  
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ClipboardDataToGuest::release_file_name() {
  // @@protoc_insertion_point(field_release:SweetProtocol.ClipboardDataToGuest.file_name)
  return file_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ClipboardDataToGuest::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.ClipboardDataToGuest.file_name)
}

// -------------------------------------------------------------------

// ClipboardStreamDataEvent

// .SweetProtocol.ClipboardDataType type = 1;
inline void ClipboardStreamDataEvent::clear_type() {
  type_ = 0;
}
inline ::SweetProtocol::ClipboardDataType ClipboardStreamDataEvent::_internal_type() const {
  return static_cast< ::SweetProtocol::ClipboardDataType >(type_);
}
inline ::SweetProtocol::ClipboardDataType ClipboardStreamDataEvent::type() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.ClipboardStreamDataEvent.type)
  return _internal_type();
}
inline void ClipboardStreamDataEvent::_internal_set_type(::SweetProtocol::ClipboardDataType value) {
  
  type_ = value;
}
inline void ClipboardStreamDataEvent::set_type(::SweetProtocol::ClipboardDataType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.ClipboardStreamDataEvent.type)
}

// bytes data = 2;
inline void ClipboardStreamDataEvent::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& ClipboardStreamDataEvent::data() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.ClipboardStreamDataEvent.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClipboardStreamDataEvent::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SweetProtocol.ClipboardStreamDataEvent.data)
}
inline std::string* ClipboardStreamDataEvent::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:SweetProtocol.ClipboardStreamDataEvent.data)
  return _s;
}
inline const std::string& ClipboardStreamDataEvent::_internal_data() const {
  return data_.Get();
}
inline void ClipboardStreamDataEvent::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ClipboardStreamDataEvent::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ClipboardStreamDataEvent::release_data() {
  // @@protoc_insertion_point(field_release:SweetProtocol.ClipboardStreamDataEvent.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ClipboardStreamDataEvent::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.ClipboardStreamDataEvent.data)
}

// string file_name = 3;
inline void ClipboardStreamDataEvent::clear_file_name() {
  file_name_.ClearToEmpty();
}
inline const std::string& ClipboardStreamDataEvent::file_name() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.ClipboardStreamDataEvent.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClipboardStreamDataEvent::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SweetProtocol.ClipboardStreamDataEvent.file_name)
}
inline std::string* ClipboardStreamDataEvent::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:SweetProtocol.ClipboardStreamDataEvent.file_name)
  return _s;
}
inline const std::string& ClipboardStreamDataEvent::_internal_file_name() const {
  return file_name_.Get();
}
inline void ClipboardStreamDataEvent::_internal_set_file_name(const std::string& value) {
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ClipboardStreamDataEvent::_internal_mutable_file_name() {
  
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ClipboardStreamDataEvent::release_file_name() {
  // @@protoc_insertion_point(field_release:SweetProtocol.ClipboardStreamDataEvent.file_name)
  return file_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ClipboardStreamDataEvent::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.ClipboardStreamDataEvent.file_name)
}

// -------------------------------------------------------------------

// SendWacomInput

// double x = 1;
inline void SendWacomInput::clear_x() {
  x_ = 0;
}
inline double SendWacomInput::_internal_x() const {
  return x_;
}
inline double SendWacomInput::x() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendWacomInput.x)
  return _internal_x();
}
inline void SendWacomInput::_internal_set_x(double value) {
  
  x_ = value;
}
inline void SendWacomInput::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.SendWacomInput.x)
}

// double y = 2;
inline void SendWacomInput::clear_y() {
  y_ = 0;
}
inline double SendWacomInput::_internal_y() const {
  return y_;
}
inline double SendWacomInput::y() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendWacomInput.y)
  return _internal_y();
}
inline void SendWacomInput::_internal_set_y(double value) {
  
  y_ = value;
}
inline void SendWacomInput::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.SendWacomInput.y)
}

// double pressure = 3;
inline void SendWacomInput::clear_pressure() {
  pressure_ = 0;
}
inline double SendWacomInput::_internal_pressure() const {
  return pressure_;
}
inline double SendWacomInput::pressure() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendWacomInput.pressure)
  return _internal_pressure();
}
inline void SendWacomInput::_internal_set_pressure(double value) {
  
  pressure_ = value;
}
inline void SendWacomInput::set_pressure(double value) {
  _internal_set_pressure(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.SendWacomInput.pressure)
}

// uint32 buttons = 4;
inline void SendWacomInput::clear_buttons() {
  buttons_ = 0u;
}
inline uint32_t SendWacomInput::_internal_buttons() const {
  return buttons_;
}
inline uint32_t SendWacomInput::buttons() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendWacomInput.buttons)
  return _internal_buttons();
}
inline void SendWacomInput::_internal_set_buttons(uint32_t value) {
  
  buttons_ = value;
}
inline void SendWacomInput::set_buttons(uint32_t value) {
  _internal_set_buttons(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.SendWacomInput.buttons)
}

// uint32 tilt_x = 5;
inline void SendWacomInput::clear_tilt_x() {
  tilt_x_ = 0u;
}
inline uint32_t SendWacomInput::_internal_tilt_x() const {
  return tilt_x_;
}
inline uint32_t SendWacomInput::tilt_x() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendWacomInput.tilt_x)
  return _internal_tilt_x();
}
inline void SendWacomInput::_internal_set_tilt_x(uint32_t value) {
  
  tilt_x_ = value;
}
inline void SendWacomInput::set_tilt_x(uint32_t value) {
  _internal_set_tilt_x(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.SendWacomInput.tilt_x)
}

// uint32 tilt_y = 6;
inline void SendWacomInput::clear_tilt_y() {
  tilt_y_ = 0u;
}
inline uint32_t SendWacomInput::_internal_tilt_y() const {
  return tilt_y_;
}
inline uint32_t SendWacomInput::tilt_y() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendWacomInput.tilt_y)
  return _internal_tilt_y();
}
inline void SendWacomInput::_internal_set_tilt_y(uint32_t value) {
  
  tilt_y_ = value;
}
inline void SendWacomInput::set_tilt_y(uint32_t value) {
  _internal_set_tilt_y(value);
  // @@protoc_insertion_point(field_set:SweetProtocol.SendWacomInput.tilt_y)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SweetProtocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SweetProtocol::SendPointerInput_PointerButtonBit> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SweetProtocol::SendPointerInput_PointerButtonBit>() {
  return ::SweetProtocol::SendPointerInput_PointerButtonBit_descriptor();
}
template <> struct is_proto_enum< ::SweetProtocol::SweetCommand> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SweetProtocol::SweetCommand>() {
  return ::SweetProtocol::SweetCommand_descriptor();
}
template <> struct is_proto_enum< ::SweetProtocol::SweetResponseAndEvent> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SweetProtocol::SweetResponseAndEvent>() {
  return ::SweetProtocol::SweetResponseAndEvent_descriptor();
}
template <> struct is_proto_enum< ::SweetProtocol::ClipboardDataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SweetProtocol::ClipboardDataType>() {
  return ::SweetProtocol::ClipboardDataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sweet_2eproto
