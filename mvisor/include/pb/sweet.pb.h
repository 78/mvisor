// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sweet.proto

#ifndef PROTOBUF_sweet_2eproto__INCLUDED
#define PROTOBUF_sweet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_sweet_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[13];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsQueryStatusResponseImpl();
void InitDefaultsQueryStatusResponse();
void InitDefaultsSendKeyboardInputCommandImpl();
void InitDefaultsSendKeyboardInputCommand();
void InitDefaultsSendPointerInputCommandImpl();
void InitDefaultsSendPointerInputCommand();
void InitDefaultsQueryScreeenshotCommandImpl();
void InitDefaultsQueryScreeenshotCommand();
void InitDefaultsQueryScreenshotResponseImpl();
void InitDefaultsQueryScreenshotResponse();
void InitDefaultsConfigMonitorsCommand_MonitorImpl();
void InitDefaultsConfigMonitorsCommand_Monitor();
void InitDefaultsConfigMonitorsCommandImpl();
void InitDefaultsConfigMonitorsCommand();
void InitDefaultsSetCursorEvent_CursorShapeImpl();
void InitDefaultsSetCursorEvent_CursorShape();
void InitDefaultsSetCursorEventImpl();
void InitDefaultsSetCursorEvent();
void InitDefaultsConnectDisplayCommandImpl();
void InitDefaultsConnectDisplayCommand();
void InitDefaultsConnectPlaybackCommandImpl();
void InitDefaultsConnectPlaybackCommand();
void InitDefaultsDisplayStreamStartEventImpl();
void InitDefaultsDisplayStreamStartEvent();
void InitDefaultsPlaybackStartEventImpl();
void InitDefaultsPlaybackStartEvent();
inline void InitDefaults() {
  InitDefaultsQueryStatusResponse();
  InitDefaultsSendKeyboardInputCommand();
  InitDefaultsSendPointerInputCommand();
  InitDefaultsQueryScreeenshotCommand();
  InitDefaultsQueryScreenshotResponse();
  InitDefaultsConfigMonitorsCommand_Monitor();
  InitDefaultsConfigMonitorsCommand();
  InitDefaultsSetCursorEvent_CursorShape();
  InitDefaultsSetCursorEvent();
  InitDefaultsConnectDisplayCommand();
  InitDefaultsConnectPlaybackCommand();
  InitDefaultsDisplayStreamStartEvent();
  InitDefaultsPlaybackStartEvent();
}
}  // namespace protobuf_sweet_2eproto
namespace SweetProtocol {
class ConfigMonitorsCommand;
class ConfigMonitorsCommandDefaultTypeInternal;
extern ConfigMonitorsCommandDefaultTypeInternal _ConfigMonitorsCommand_default_instance_;
class ConfigMonitorsCommand_Monitor;
class ConfigMonitorsCommand_MonitorDefaultTypeInternal;
extern ConfigMonitorsCommand_MonitorDefaultTypeInternal _ConfigMonitorsCommand_Monitor_default_instance_;
class ConnectDisplayCommand;
class ConnectDisplayCommandDefaultTypeInternal;
extern ConnectDisplayCommandDefaultTypeInternal _ConnectDisplayCommand_default_instance_;
class ConnectPlaybackCommand;
class ConnectPlaybackCommandDefaultTypeInternal;
extern ConnectPlaybackCommandDefaultTypeInternal _ConnectPlaybackCommand_default_instance_;
class DisplayStreamStartEvent;
class DisplayStreamStartEventDefaultTypeInternal;
extern DisplayStreamStartEventDefaultTypeInternal _DisplayStreamStartEvent_default_instance_;
class PlaybackStartEvent;
class PlaybackStartEventDefaultTypeInternal;
extern PlaybackStartEventDefaultTypeInternal _PlaybackStartEvent_default_instance_;
class QueryScreeenshotCommand;
class QueryScreeenshotCommandDefaultTypeInternal;
extern QueryScreeenshotCommandDefaultTypeInternal _QueryScreeenshotCommand_default_instance_;
class QueryScreenshotResponse;
class QueryScreenshotResponseDefaultTypeInternal;
extern QueryScreenshotResponseDefaultTypeInternal _QueryScreenshotResponse_default_instance_;
class QueryStatusResponse;
class QueryStatusResponseDefaultTypeInternal;
extern QueryStatusResponseDefaultTypeInternal _QueryStatusResponse_default_instance_;
class SendKeyboardInputCommand;
class SendKeyboardInputCommandDefaultTypeInternal;
extern SendKeyboardInputCommandDefaultTypeInternal _SendKeyboardInputCommand_default_instance_;
class SendPointerInputCommand;
class SendPointerInputCommandDefaultTypeInternal;
extern SendPointerInputCommandDefaultTypeInternal _SendPointerInputCommand_default_instance_;
class SetCursorEvent;
class SetCursorEventDefaultTypeInternal;
extern SetCursorEventDefaultTypeInternal _SetCursorEvent_default_instance_;
class SetCursorEvent_CursorShape;
class SetCursorEvent_CursorShapeDefaultTypeInternal;
extern SetCursorEvent_CursorShapeDefaultTypeInternal _SetCursorEvent_CursorShape_default_instance_;
}  // namespace SweetProtocol
namespace SweetProtocol {

enum SendPointerInputCommand_PointerButtonBit {
  SendPointerInputCommand_PointerButtonBit_LEFT = 0,
  SendPointerInputCommand_PointerButtonBit_MIDDLE = 1,
  SendPointerInputCommand_PointerButtonBit_RIGHT = 2,
  SendPointerInputCommand_PointerButtonBit_SendPointerInputCommand_PointerButtonBit_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SendPointerInputCommand_PointerButtonBit_SendPointerInputCommand_PointerButtonBit_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SendPointerInputCommand_PointerButtonBit_IsValid(int value);
const SendPointerInputCommand_PointerButtonBit SendPointerInputCommand_PointerButtonBit_PointerButtonBit_MIN = SendPointerInputCommand_PointerButtonBit_LEFT;
const SendPointerInputCommand_PointerButtonBit SendPointerInputCommand_PointerButtonBit_PointerButtonBit_MAX = SendPointerInputCommand_PointerButtonBit_RIGHT;
const int SendPointerInputCommand_PointerButtonBit_PointerButtonBit_ARRAYSIZE = SendPointerInputCommand_PointerButtonBit_PointerButtonBit_MAX + 1;

const ::google::protobuf::EnumDescriptor* SendPointerInputCommand_PointerButtonBit_descriptor();
inline const ::std::string& SendPointerInputCommand_PointerButtonBit_Name(SendPointerInputCommand_PointerButtonBit value) {
  return ::google::protobuf::internal::NameOfEnum(
    SendPointerInputCommand_PointerButtonBit_descriptor(), value);
}
inline bool SendPointerInputCommand_PointerButtonBit_Parse(
    const ::std::string& name, SendPointerInputCommand_PointerButtonBit* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SendPointerInputCommand_PointerButtonBit>(
    SendPointerInputCommand_PointerButtonBit_descriptor(), name, value);
}
// ===================================================================

class QueryStatusResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.QueryStatusResponse) */ {
 public:
  QueryStatusResponse();
  virtual ~QueryStatusResponse();

  QueryStatusResponse(const QueryStatusResponse& from);

  inline QueryStatusResponse& operator=(const QueryStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryStatusResponse(QueryStatusResponse&& from) noexcept
    : QueryStatusResponse() {
    *this = ::std::move(from);
  }

  inline QueryStatusResponse& operator=(QueryStatusResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryStatusResponse* internal_default_instance() {
    return reinterpret_cast<const QueryStatusResponse*>(
               &_QueryStatusResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(QueryStatusResponse* other);
  friend void swap(QueryStatusResponse& a, QueryStatusResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryStatusResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryStatusResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryStatusResponse& from);
  void MergeFrom(const QueryStatusResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryStatusResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 6;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string uuid = 7;
  void clear_uuid();
  static const int kUuidFieldNumber = 7;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // string config_path = 8;
  void clear_config_path();
  static const int kConfigPathFieldNumber = 8;
  const ::std::string& config_path() const;
  void set_config_path(const ::std::string& value);
  #if LANG_CXX11
  void set_config_path(::std::string&& value);
  #endif
  void set_config_path(const char* value);
  void set_config_path(const char* value, size_t size);
  ::std::string* mutable_config_path();
  ::std::string* release_config_path();
  void set_allocated_config_path(::std::string* config_path);

  // uint64 memory_size = 5;
  void clear_memory_size();
  static const int kMemorySizeFieldNumber = 5;
  ::google::protobuf::uint64 memory_size() const;
  void set_memory_size(::google::protobuf::uint64 value);

  // bool tenclass_agent = 1002;
  void clear_tenclass_agent();
  static const int kTenclassAgentFieldNumber = 1002;
  bool tenclass_agent() const;
  void set_tenclass_agent(bool value);

  // uint32 vcpu_count = 4;
  void clear_vcpu_count();
  static const int kVcpuCountFieldNumber = 4;
  ::google::protobuf::uint32 vcpu_count() const;
  void set_vcpu_count(::google::protobuf::uint32 value);

  // bool debug = 1;
  void clear_debug();
  static const int kDebugFieldNumber = 1;
  bool debug() const;
  void set_debug(bool value);

  // bool paused = 2;
  void clear_paused();
  static const int kPausedFieldNumber = 2;
  bool paused() const;
  void set_paused(bool value);

  // bool hypervisor = 3;
  void clear_hypervisor();
  static const int kHypervisorFieldNumber = 3;
  bool hypervisor() const;
  void set_hypervisor(bool value);

  // bool spice_agent = 1001;
  void clear_spice_agent();
  static const int kSpiceAgentFieldNumber = 1001;
  bool spice_agent() const;
  void set_spice_agent(bool value);

  // @@protoc_insertion_point(class_scope:SweetProtocol.QueryStatusResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr config_path_;
  ::google::protobuf::uint64 memory_size_;
  bool tenclass_agent_;
  ::google::protobuf::uint32 vcpu_count_;
  bool debug_;
  bool paused_;
  bool hypervisor_;
  bool spice_agent_;
  mutable int _cached_size_;
  friend struct ::protobuf_sweet_2eproto::TableStruct;
  friend void ::protobuf_sweet_2eproto::InitDefaultsQueryStatusResponseImpl();
};
// -------------------------------------------------------------------

class SendKeyboardInputCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.SendKeyboardInputCommand) */ {
 public:
  SendKeyboardInputCommand();
  virtual ~SendKeyboardInputCommand();

  SendKeyboardInputCommand(const SendKeyboardInputCommand& from);

  inline SendKeyboardInputCommand& operator=(const SendKeyboardInputCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendKeyboardInputCommand(SendKeyboardInputCommand&& from) noexcept
    : SendKeyboardInputCommand() {
    *this = ::std::move(from);
  }

  inline SendKeyboardInputCommand& operator=(SendKeyboardInputCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendKeyboardInputCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendKeyboardInputCommand* internal_default_instance() {
    return reinterpret_cast<const SendKeyboardInputCommand*>(
               &_SendKeyboardInputCommand_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SendKeyboardInputCommand* other);
  friend void swap(SendKeyboardInputCommand& a, SendKeyboardInputCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendKeyboardInputCommand* New() const PROTOBUF_FINAL { return New(NULL); }

  SendKeyboardInputCommand* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendKeyboardInputCommand& from);
  void MergeFrom(const SendKeyboardInputCommand& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendKeyboardInputCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 scancode = 1;
  void clear_scancode();
  static const int kScancodeFieldNumber = 1;
  ::google::protobuf::uint32 scancode() const;
  void set_scancode(::google::protobuf::uint32 value);

  // bool pressed = 2;
  void clear_pressed();
  static const int kPressedFieldNumber = 2;
  bool pressed() const;
  void set_pressed(bool value);

  // @@protoc_insertion_point(class_scope:SweetProtocol.SendKeyboardInputCommand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 scancode_;
  bool pressed_;
  mutable int _cached_size_;
  friend struct ::protobuf_sweet_2eproto::TableStruct;
  friend void ::protobuf_sweet_2eproto::InitDefaultsSendKeyboardInputCommandImpl();
};
// -------------------------------------------------------------------

class SendPointerInputCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.SendPointerInputCommand) */ {
 public:
  SendPointerInputCommand();
  virtual ~SendPointerInputCommand();

  SendPointerInputCommand(const SendPointerInputCommand& from);

  inline SendPointerInputCommand& operator=(const SendPointerInputCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendPointerInputCommand(SendPointerInputCommand&& from) noexcept
    : SendPointerInputCommand() {
    *this = ::std::move(from);
  }

  inline SendPointerInputCommand& operator=(SendPointerInputCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendPointerInputCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendPointerInputCommand* internal_default_instance() {
    return reinterpret_cast<const SendPointerInputCommand*>(
               &_SendPointerInputCommand_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SendPointerInputCommand* other);
  friend void swap(SendPointerInputCommand& a, SendPointerInputCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendPointerInputCommand* New() const PROTOBUF_FINAL { return New(NULL); }

  SendPointerInputCommand* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendPointerInputCommand& from);
  void MergeFrom(const SendPointerInputCommand& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendPointerInputCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SendPointerInputCommand_PointerButtonBit PointerButtonBit;
  static const PointerButtonBit LEFT =
    SendPointerInputCommand_PointerButtonBit_LEFT;
  static const PointerButtonBit MIDDLE =
    SendPointerInputCommand_PointerButtonBit_MIDDLE;
  static const PointerButtonBit RIGHT =
    SendPointerInputCommand_PointerButtonBit_RIGHT;
  static inline bool PointerButtonBit_IsValid(int value) {
    return SendPointerInputCommand_PointerButtonBit_IsValid(value);
  }
  static const PointerButtonBit PointerButtonBit_MIN =
    SendPointerInputCommand_PointerButtonBit_PointerButtonBit_MIN;
  static const PointerButtonBit PointerButtonBit_MAX =
    SendPointerInputCommand_PointerButtonBit_PointerButtonBit_MAX;
  static const int PointerButtonBit_ARRAYSIZE =
    SendPointerInputCommand_PointerButtonBit_PointerButtonBit_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PointerButtonBit_descriptor() {
    return SendPointerInputCommand_PointerButtonBit_descriptor();
  }
  static inline const ::std::string& PointerButtonBit_Name(PointerButtonBit value) {
    return SendPointerInputCommand_PointerButtonBit_Name(value);
  }
  static inline bool PointerButtonBit_Parse(const ::std::string& name,
      PointerButtonBit* value) {
    return SendPointerInputCommand_PointerButtonBit_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 buttons = 1;
  void clear_buttons();
  static const int kButtonsFieldNumber = 1;
  ::google::protobuf::uint32 buttons() const;
  void set_buttons(::google::protobuf::uint32 value);

  // uint32 x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  ::google::protobuf::uint32 x() const;
  void set_x(::google::protobuf::uint32 value);

  // uint32 y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  ::google::protobuf::uint32 y() const;
  void set_y(::google::protobuf::uint32 value);

  // uint32 z = 4;
  void clear_z();
  static const int kZFieldNumber = 4;
  ::google::protobuf::uint32 z() const;
  void set_z(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SweetProtocol.SendPointerInputCommand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 buttons_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  ::google::protobuf::uint32 z_;
  mutable int _cached_size_;
  friend struct ::protobuf_sweet_2eproto::TableStruct;
  friend void ::protobuf_sweet_2eproto::InitDefaultsSendPointerInputCommandImpl();
};
// -------------------------------------------------------------------

class QueryScreeenshotCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.QueryScreeenshotCommand) */ {
 public:
  QueryScreeenshotCommand();
  virtual ~QueryScreeenshotCommand();

  QueryScreeenshotCommand(const QueryScreeenshotCommand& from);

  inline QueryScreeenshotCommand& operator=(const QueryScreeenshotCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryScreeenshotCommand(QueryScreeenshotCommand&& from) noexcept
    : QueryScreeenshotCommand() {
    *this = ::std::move(from);
  }

  inline QueryScreeenshotCommand& operator=(QueryScreeenshotCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryScreeenshotCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryScreeenshotCommand* internal_default_instance() {
    return reinterpret_cast<const QueryScreeenshotCommand*>(
               &_QueryScreeenshotCommand_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(QueryScreeenshotCommand* other);
  friend void swap(QueryScreeenshotCommand& a, QueryScreeenshotCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryScreeenshotCommand* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryScreeenshotCommand* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryScreeenshotCommand& from);
  void MergeFrom(const QueryScreeenshotCommand& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryScreeenshotCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string format = 1;
  void clear_format();
  static const int kFormatFieldNumber = 1;
  const ::std::string& format() const;
  void set_format(const ::std::string& value);
  #if LANG_CXX11
  void set_format(::std::string&& value);
  #endif
  void set_format(const char* value);
  void set_format(const char* value, size_t size);
  ::std::string* mutable_format();
  ::std::string* release_format();
  void set_allocated_format(::std::string* format);

  // uint32 width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SweetProtocol.QueryScreeenshotCommand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr format_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  mutable int _cached_size_;
  friend struct ::protobuf_sweet_2eproto::TableStruct;
  friend void ::protobuf_sweet_2eproto::InitDefaultsQueryScreeenshotCommandImpl();
};
// -------------------------------------------------------------------

class QueryScreenshotResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.QueryScreenshotResponse) */ {
 public:
  QueryScreenshotResponse();
  virtual ~QueryScreenshotResponse();

  QueryScreenshotResponse(const QueryScreenshotResponse& from);

  inline QueryScreenshotResponse& operator=(const QueryScreenshotResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryScreenshotResponse(QueryScreenshotResponse&& from) noexcept
    : QueryScreenshotResponse() {
    *this = ::std::move(from);
  }

  inline QueryScreenshotResponse& operator=(QueryScreenshotResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryScreenshotResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryScreenshotResponse* internal_default_instance() {
    return reinterpret_cast<const QueryScreenshotResponse*>(
               &_QueryScreenshotResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(QueryScreenshotResponse* other);
  friend void swap(QueryScreenshotResponse& a, QueryScreenshotResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryScreenshotResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryScreenshotResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryScreenshotResponse& from);
  void MergeFrom(const QueryScreenshotResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryScreenshotResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string format = 1;
  void clear_format();
  static const int kFormatFieldNumber = 1;
  const ::std::string& format() const;
  void set_format(const ::std::string& value);
  #if LANG_CXX11
  void set_format(::std::string&& value);
  #endif
  void set_format(const char* value);
  void set_format(const char* value, size_t size);
  ::std::string* mutable_format();
  ::std::string* release_format();
  void set_allocated_format(::std::string* format);

  // bytes data = 4;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint32 width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SweetProtocol.QueryScreenshotResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr format_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  mutable int _cached_size_;
  friend struct ::protobuf_sweet_2eproto::TableStruct;
  friend void ::protobuf_sweet_2eproto::InitDefaultsQueryScreenshotResponseImpl();
};
// -------------------------------------------------------------------

class ConfigMonitorsCommand_Monitor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.ConfigMonitorsCommand.Monitor) */ {
 public:
  ConfigMonitorsCommand_Monitor();
  virtual ~ConfigMonitorsCommand_Monitor();

  ConfigMonitorsCommand_Monitor(const ConfigMonitorsCommand_Monitor& from);

  inline ConfigMonitorsCommand_Monitor& operator=(const ConfigMonitorsCommand_Monitor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigMonitorsCommand_Monitor(ConfigMonitorsCommand_Monitor&& from) noexcept
    : ConfigMonitorsCommand_Monitor() {
    *this = ::std::move(from);
  }

  inline ConfigMonitorsCommand_Monitor& operator=(ConfigMonitorsCommand_Monitor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigMonitorsCommand_Monitor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigMonitorsCommand_Monitor* internal_default_instance() {
    return reinterpret_cast<const ConfigMonitorsCommand_Monitor*>(
               &_ConfigMonitorsCommand_Monitor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ConfigMonitorsCommand_Monitor* other);
  friend void swap(ConfigMonitorsCommand_Monitor& a, ConfigMonitorsCommand_Monitor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigMonitorsCommand_Monitor* New() const PROTOBUF_FINAL { return New(NULL); }

  ConfigMonitorsCommand_Monitor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConfigMonitorsCommand_Monitor& from);
  void MergeFrom(const ConfigMonitorsCommand_Monitor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConfigMonitorsCommand_Monitor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // uint32 left = 2;
  void clear_left();
  static const int kLeftFieldNumber = 2;
  ::google::protobuf::uint32 left() const;
  void set_left(::google::protobuf::uint32 value);

  // uint32 top = 3;
  void clear_top();
  static const int kTopFieldNumber = 3;
  ::google::protobuf::uint32 top() const;
  void set_top(::google::protobuf::uint32 value);

  // uint32 width = 4;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 5;
  void clear_height();
  static const int kHeightFieldNumber = 5;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // uint32 depth = 6;
  void clear_depth();
  static const int kDepthFieldNumber = 6;
  ::google::protobuf::uint32 depth() const;
  void set_depth(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SweetProtocol.ConfigMonitorsCommand.Monitor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 left_;
  ::google::protobuf::uint32 top_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 depth_;
  mutable int _cached_size_;
  friend struct ::protobuf_sweet_2eproto::TableStruct;
  friend void ::protobuf_sweet_2eproto::InitDefaultsConfigMonitorsCommand_MonitorImpl();
};
// -------------------------------------------------------------------

class ConfigMonitorsCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.ConfigMonitorsCommand) */ {
 public:
  ConfigMonitorsCommand();
  virtual ~ConfigMonitorsCommand();

  ConfigMonitorsCommand(const ConfigMonitorsCommand& from);

  inline ConfigMonitorsCommand& operator=(const ConfigMonitorsCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigMonitorsCommand(ConfigMonitorsCommand&& from) noexcept
    : ConfigMonitorsCommand() {
    *this = ::std::move(from);
  }

  inline ConfigMonitorsCommand& operator=(ConfigMonitorsCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigMonitorsCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigMonitorsCommand* internal_default_instance() {
    return reinterpret_cast<const ConfigMonitorsCommand*>(
               &_ConfigMonitorsCommand_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(ConfigMonitorsCommand* other);
  friend void swap(ConfigMonitorsCommand& a, ConfigMonitorsCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigMonitorsCommand* New() const PROTOBUF_FINAL { return New(NULL); }

  ConfigMonitorsCommand* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConfigMonitorsCommand& from);
  void MergeFrom(const ConfigMonitorsCommand& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConfigMonitorsCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ConfigMonitorsCommand_Monitor Monitor;

  // accessors -------------------------------------------------------

  // repeated .SweetProtocol.ConfigMonitorsCommand.Monitor monitors = 2;
  int monitors_size() const;
  void clear_monitors();
  static const int kMonitorsFieldNumber = 2;
  const ::SweetProtocol::ConfigMonitorsCommand_Monitor& monitors(int index) const;
  ::SweetProtocol::ConfigMonitorsCommand_Monitor* mutable_monitors(int index);
  ::SweetProtocol::ConfigMonitorsCommand_Monitor* add_monitors();
  ::google::protobuf::RepeatedPtrField< ::SweetProtocol::ConfigMonitorsCommand_Monitor >*
      mutable_monitors();
  const ::google::protobuf::RepeatedPtrField< ::SweetProtocol::ConfigMonitorsCommand_Monitor >&
      monitors() const;

  // uint32 count = 1;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SweetProtocol.ConfigMonitorsCommand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::SweetProtocol::ConfigMonitorsCommand_Monitor > monitors_;
  ::google::protobuf::uint32 count_;
  mutable int _cached_size_;
  friend struct ::protobuf_sweet_2eproto::TableStruct;
  friend void ::protobuf_sweet_2eproto::InitDefaultsConfigMonitorsCommandImpl();
};
// -------------------------------------------------------------------

class SetCursorEvent_CursorShape : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.SetCursorEvent.CursorShape) */ {
 public:
  SetCursorEvent_CursorShape();
  virtual ~SetCursorEvent_CursorShape();

  SetCursorEvent_CursorShape(const SetCursorEvent_CursorShape& from);

  inline SetCursorEvent_CursorShape& operator=(const SetCursorEvent_CursorShape& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetCursorEvent_CursorShape(SetCursorEvent_CursorShape&& from) noexcept
    : SetCursorEvent_CursorShape() {
    *this = ::std::move(from);
  }

  inline SetCursorEvent_CursorShape& operator=(SetCursorEvent_CursorShape&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetCursorEvent_CursorShape& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetCursorEvent_CursorShape* internal_default_instance() {
    return reinterpret_cast<const SetCursorEvent_CursorShape*>(
               &_SetCursorEvent_CursorShape_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(SetCursorEvent_CursorShape* other);
  friend void swap(SetCursorEvent_CursorShape& a, SetCursorEvent_CursorShape& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetCursorEvent_CursorShape* New() const PROTOBUF_FINAL { return New(NULL); }

  SetCursorEvent_CursorShape* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetCursorEvent_CursorShape& from);
  void MergeFrom(const SetCursorEvent_CursorShape& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetCursorEvent_CursorShape* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 6;
  void clear_data();
  static const int kDataFieldNumber = 6;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // int32 hotspot_x = 3;
  void clear_hotspot_x();
  static const int kHotspotXFieldNumber = 3;
  ::google::protobuf::int32 hotspot_x() const;
  void set_hotspot_x(::google::protobuf::int32 value);

  // int32 hotspot_y = 4;
  void clear_hotspot_y();
  static const int kHotspotYFieldNumber = 4;
  ::google::protobuf::int32 hotspot_y() const;
  void set_hotspot_y(::google::protobuf::int32 value);

  // uint32 type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SweetProtocol.SetCursorEvent.CursorShape)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::int32 hotspot_x_;
  ::google::protobuf::int32 hotspot_y_;
  ::google::protobuf::uint32 type_;
  mutable int _cached_size_;
  friend struct ::protobuf_sweet_2eproto::TableStruct;
  friend void ::protobuf_sweet_2eproto::InitDefaultsSetCursorEvent_CursorShapeImpl();
};
// -------------------------------------------------------------------

class SetCursorEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.SetCursorEvent) */ {
 public:
  SetCursorEvent();
  virtual ~SetCursorEvent();

  SetCursorEvent(const SetCursorEvent& from);

  inline SetCursorEvent& operator=(const SetCursorEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetCursorEvent(SetCursorEvent&& from) noexcept
    : SetCursorEvent() {
    *this = ::std::move(from);
  }

  inline SetCursorEvent& operator=(SetCursorEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetCursorEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetCursorEvent* internal_default_instance() {
    return reinterpret_cast<const SetCursorEvent*>(
               &_SetCursorEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(SetCursorEvent* other);
  friend void swap(SetCursorEvent& a, SetCursorEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetCursorEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  SetCursorEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetCursorEvent& from);
  void MergeFrom(const SetCursorEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetCursorEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SetCursorEvent_CursorShape CursorShape;

  // accessors -------------------------------------------------------

  // .SweetProtocol.SetCursorEvent.CursorShape shape = 4;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 4;
  const ::SweetProtocol::SetCursorEvent_CursorShape& shape() const;
  ::SweetProtocol::SetCursorEvent_CursorShape* release_shape();
  ::SweetProtocol::SetCursorEvent_CursorShape* mutable_shape();
  void set_allocated_shape(::SweetProtocol::SetCursorEvent_CursorShape* shape);

  // bool visible = 1;
  void clear_visible();
  static const int kVisibleFieldNumber = 1;
  bool visible() const;
  void set_visible(bool value);

  // int32 x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SweetProtocol.SetCursorEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::SweetProtocol::SetCursorEvent_CursorShape* shape_;
  bool visible_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  mutable int _cached_size_;
  friend struct ::protobuf_sweet_2eproto::TableStruct;
  friend void ::protobuf_sweet_2eproto::InitDefaultsSetCursorEventImpl();
};
// -------------------------------------------------------------------

class ConnectDisplayCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.ConnectDisplayCommand) */ {
 public:
  ConnectDisplayCommand();
  virtual ~ConnectDisplayCommand();

  ConnectDisplayCommand(const ConnectDisplayCommand& from);

  inline ConnectDisplayCommand& operator=(const ConnectDisplayCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectDisplayCommand(ConnectDisplayCommand&& from) noexcept
    : ConnectDisplayCommand() {
    *this = ::std::move(from);
  }

  inline ConnectDisplayCommand& operator=(ConnectDisplayCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectDisplayCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectDisplayCommand* internal_default_instance() {
    return reinterpret_cast<const ConnectDisplayCommand*>(
               &_ConnectDisplayCommand_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(ConnectDisplayCommand* other);
  friend void swap(ConnectDisplayCommand& a, ConnectDisplayCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectDisplayCommand* New() const PROTOBUF_FINAL { return New(NULL); }

  ConnectDisplayCommand* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConnectDisplayCommand& from);
  void MergeFrom(const ConnectDisplayCommand& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConnectDisplayCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string codec = 1;
  void clear_codec();
  static const int kCodecFieldNumber = 1;
  const ::std::string& codec() const;
  void set_codec(const ::std::string& value);
  #if LANG_CXX11
  void set_codec(::std::string&& value);
  #endif
  void set_codec(const char* value);
  void set_codec(const char* value, size_t size);
  ::std::string* mutable_codec();
  ::std::string* release_codec();
  void set_allocated_codec(::std::string* codec);

  // string profile = 2;
  void clear_profile();
  static const int kProfileFieldNumber = 2;
  const ::std::string& profile() const;
  void set_profile(const ::std::string& value);
  #if LANG_CXX11
  void set_profile(::std::string&& value);
  #endif
  void set_profile(const char* value);
  void set_profile(const char* value, size_t size);
  ::std::string* mutable_profile();
  ::std::string* release_profile();
  void set_allocated_profile(::std::string* profile);

  // string speed = 3;
  void clear_speed();
  static const int kSpeedFieldNumber = 3;
  const ::std::string& speed() const;
  void set_speed(const ::std::string& value);
  #if LANG_CXX11
  void set_speed(::std::string&& value);
  #endif
  void set_speed(const char* value);
  void set_speed(const char* value, size_t size);
  ::std::string* mutable_speed();
  ::std::string* release_speed();
  void set_allocated_speed(::std::string* speed);

  // string rate_control = 4;
  void clear_rate_control();
  static const int kRateControlFieldNumber = 4;
  const ::std::string& rate_control() const;
  void set_rate_control(const ::std::string& value);
  #if LANG_CXX11
  void set_rate_control(::std::string&& value);
  #endif
  void set_rate_control(const char* value);
  void set_rate_control(const char* value, size_t size);
  ::std::string* mutable_rate_control();
  ::std::string* release_rate_control();
  void set_allocated_rate_control(::std::string* rate_control);

  // uint32 fps = 5;
  void clear_fps();
  static const int kFpsFieldNumber = 5;
  ::google::protobuf::uint32 fps() const;
  void set_fps(::google::protobuf::uint32 value);

  // uint32 bitrate = 6;
  void clear_bitrate();
  static const int kBitrateFieldNumber = 6;
  ::google::protobuf::uint32 bitrate() const;
  void set_bitrate(::google::protobuf::uint32 value);

  // uint32 qmin = 7;
  void clear_qmin();
  static const int kQminFieldNumber = 7;
  ::google::protobuf::uint32 qmin() const;
  void set_qmin(::google::protobuf::uint32 value);

  // uint32 threads = 8;
  void clear_threads();
  static const int kThreadsFieldNumber = 8;
  ::google::protobuf::uint32 threads() const;
  void set_threads(::google::protobuf::uint32 value);

  // uint32 flags = 9;
  void clear_flags();
  static const int kFlagsFieldNumber = 9;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SweetProtocol.ConnectDisplayCommand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr codec_;
  ::google::protobuf::internal::ArenaStringPtr profile_;
  ::google::protobuf::internal::ArenaStringPtr speed_;
  ::google::protobuf::internal::ArenaStringPtr rate_control_;
  ::google::protobuf::uint32 fps_;
  ::google::protobuf::uint32 bitrate_;
  ::google::protobuf::uint32 qmin_;
  ::google::protobuf::uint32 threads_;
  ::google::protobuf::uint32 flags_;
  mutable int _cached_size_;
  friend struct ::protobuf_sweet_2eproto::TableStruct;
  friend void ::protobuf_sweet_2eproto::InitDefaultsConnectDisplayCommandImpl();
};
// -------------------------------------------------------------------

class ConnectPlaybackCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.ConnectPlaybackCommand) */ {
 public:
  ConnectPlaybackCommand();
  virtual ~ConnectPlaybackCommand();

  ConnectPlaybackCommand(const ConnectPlaybackCommand& from);

  inline ConnectPlaybackCommand& operator=(const ConnectPlaybackCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectPlaybackCommand(ConnectPlaybackCommand&& from) noexcept
    : ConnectPlaybackCommand() {
    *this = ::std::move(from);
  }

  inline ConnectPlaybackCommand& operator=(ConnectPlaybackCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectPlaybackCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectPlaybackCommand* internal_default_instance() {
    return reinterpret_cast<const ConnectPlaybackCommand*>(
               &_ConnectPlaybackCommand_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(ConnectPlaybackCommand* other);
  friend void swap(ConnectPlaybackCommand& a, ConnectPlaybackCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectPlaybackCommand* New() const PROTOBUF_FINAL { return New(NULL); }

  ConnectPlaybackCommand* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConnectPlaybackCommand& from);
  void MergeFrom(const ConnectPlaybackCommand& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConnectPlaybackCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string codec = 1;
  void clear_codec();
  static const int kCodecFieldNumber = 1;
  const ::std::string& codec() const;
  void set_codec(const ::std::string& value);
  #if LANG_CXX11
  void set_codec(::std::string&& value);
  #endif
  void set_codec(const char* value);
  void set_codec(const char* value, size_t size);
  ::std::string* mutable_codec();
  ::std::string* release_codec();
  void set_allocated_codec(::std::string* codec);

  // @@protoc_insertion_point(class_scope:SweetProtocol.ConnectPlaybackCommand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr codec_;
  mutable int _cached_size_;
  friend struct ::protobuf_sweet_2eproto::TableStruct;
  friend void ::protobuf_sweet_2eproto::InitDefaultsConnectPlaybackCommandImpl();
};
// -------------------------------------------------------------------

class DisplayStreamStartEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.DisplayStreamStartEvent) */ {
 public:
  DisplayStreamStartEvent();
  virtual ~DisplayStreamStartEvent();

  DisplayStreamStartEvent(const DisplayStreamStartEvent& from);

  inline DisplayStreamStartEvent& operator=(const DisplayStreamStartEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DisplayStreamStartEvent(DisplayStreamStartEvent&& from) noexcept
    : DisplayStreamStartEvent() {
    *this = ::std::move(from);
  }

  inline DisplayStreamStartEvent& operator=(DisplayStreamStartEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DisplayStreamStartEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisplayStreamStartEvent* internal_default_instance() {
    return reinterpret_cast<const DisplayStreamStartEvent*>(
               &_DisplayStreamStartEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(DisplayStreamStartEvent* other);
  friend void swap(DisplayStreamStartEvent& a, DisplayStreamStartEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DisplayStreamStartEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  DisplayStreamStartEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DisplayStreamStartEvent& from);
  void MergeFrom(const DisplayStreamStartEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DisplayStreamStartEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 display_id = 1;
  void clear_display_id();
  static const int kDisplayIdFieldNumber = 1;
  ::google::protobuf::uint32 display_id() const;
  void set_display_id(::google::protobuf::uint32 value);

  // uint32 width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // uint32 codec = 5;
  void clear_codec();
  static const int kCodecFieldNumber = 5;
  ::google::protobuf::uint32 codec() const;
  void set_codec(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SweetProtocol.DisplayStreamStartEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 display_id_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 codec_;
  mutable int _cached_size_;
  friend struct ::protobuf_sweet_2eproto::TableStruct;
  friend void ::protobuf_sweet_2eproto::InitDefaultsDisplayStreamStartEventImpl();
};
// -------------------------------------------------------------------

class PlaybackStartEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.PlaybackStartEvent) */ {
 public:
  PlaybackStartEvent();
  virtual ~PlaybackStartEvent();

  PlaybackStartEvent(const PlaybackStartEvent& from);

  inline PlaybackStartEvent& operator=(const PlaybackStartEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlaybackStartEvent(PlaybackStartEvent&& from) noexcept
    : PlaybackStartEvent() {
    *this = ::std::move(from);
  }

  inline PlaybackStartEvent& operator=(PlaybackStartEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlaybackStartEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaybackStartEvent* internal_default_instance() {
    return reinterpret_cast<const PlaybackStartEvent*>(
               &_PlaybackStartEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(PlaybackStartEvent* other);
  friend void swap(PlaybackStartEvent& a, PlaybackStartEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlaybackStartEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  PlaybackStartEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlaybackStartEvent& from);
  void MergeFrom(const PlaybackStartEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlaybackStartEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 playback_id = 1;
  void clear_playback_id();
  static const int kPlaybackIdFieldNumber = 1;
  ::google::protobuf::uint32 playback_id() const;
  void set_playback_id(::google::protobuf::uint32 value);

  // uint32 codec = 2;
  void clear_codec();
  static const int kCodecFieldNumber = 2;
  ::google::protobuf::uint32 codec() const;
  void set_codec(::google::protobuf::uint32 value);

  // uint32 format = 3;
  void clear_format();
  static const int kFormatFieldNumber = 3;
  ::google::protobuf::uint32 format() const;
  void set_format(::google::protobuf::uint32 value);

  // uint32 channels = 4;
  void clear_channels();
  static const int kChannelsFieldNumber = 4;
  ::google::protobuf::uint32 channels() const;
  void set_channels(::google::protobuf::uint32 value);

  // uint32 frequency = 5;
  void clear_frequency();
  static const int kFrequencyFieldNumber = 5;
  ::google::protobuf::uint32 frequency() const;
  void set_frequency(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SweetProtocol.PlaybackStartEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 playback_id_;
  ::google::protobuf::uint32 codec_;
  ::google::protobuf::uint32 format_;
  ::google::protobuf::uint32 channels_;
  ::google::protobuf::uint32 frequency_;
  mutable int _cached_size_;
  friend struct ::protobuf_sweet_2eproto::TableStruct;
  friend void ::protobuf_sweet_2eproto::InitDefaultsPlaybackStartEventImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QueryStatusResponse

// bool debug = 1;
inline void QueryStatusResponse::clear_debug() {
  debug_ = false;
}
inline bool QueryStatusResponse::debug() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryStatusResponse.debug)
  return debug_;
}
inline void QueryStatusResponse::set_debug(bool value) {
  
  debug_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryStatusResponse.debug)
}

// bool paused = 2;
inline void QueryStatusResponse::clear_paused() {
  paused_ = false;
}
inline bool QueryStatusResponse::paused() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryStatusResponse.paused)
  return paused_;
}
inline void QueryStatusResponse::set_paused(bool value) {
  
  paused_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryStatusResponse.paused)
}

// bool hypervisor = 3;
inline void QueryStatusResponse::clear_hypervisor() {
  hypervisor_ = false;
}
inline bool QueryStatusResponse::hypervisor() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryStatusResponse.hypervisor)
  return hypervisor_;
}
inline void QueryStatusResponse::set_hypervisor(bool value) {
  
  hypervisor_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryStatusResponse.hypervisor)
}

// uint32 vcpu_count = 4;
inline void QueryStatusResponse::clear_vcpu_count() {
  vcpu_count_ = 0u;
}
inline ::google::protobuf::uint32 QueryStatusResponse::vcpu_count() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryStatusResponse.vcpu_count)
  return vcpu_count_;
}
inline void QueryStatusResponse::set_vcpu_count(::google::protobuf::uint32 value) {
  
  vcpu_count_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryStatusResponse.vcpu_count)
}

// uint64 memory_size = 5;
inline void QueryStatusResponse::clear_memory_size() {
  memory_size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 QueryStatusResponse::memory_size() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryStatusResponse.memory_size)
  return memory_size_;
}
inline void QueryStatusResponse::set_memory_size(::google::protobuf::uint64 value) {
  
  memory_size_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryStatusResponse.memory_size)
}

// string name = 6;
inline void QueryStatusResponse::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryStatusResponse::name() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryStatusResponse.name)
  return name_.GetNoArena();
}
inline void QueryStatusResponse::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryStatusResponse.name)
}
#if LANG_CXX11
inline void QueryStatusResponse::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SweetProtocol.QueryStatusResponse.name)
}
#endif
inline void QueryStatusResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SweetProtocol.QueryStatusResponse.name)
}
inline void QueryStatusResponse::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SweetProtocol.QueryStatusResponse.name)
}
inline ::std::string* QueryStatusResponse::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:SweetProtocol.QueryStatusResponse.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryStatusResponse::release_name() {
  // @@protoc_insertion_point(field_release:SweetProtocol.QueryStatusResponse.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryStatusResponse::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.QueryStatusResponse.name)
}

// string uuid = 7;
inline void QueryStatusResponse::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryStatusResponse::uuid() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryStatusResponse.uuid)
  return uuid_.GetNoArena();
}
inline void QueryStatusResponse::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryStatusResponse.uuid)
}
#if LANG_CXX11
inline void QueryStatusResponse::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SweetProtocol.QueryStatusResponse.uuid)
}
#endif
inline void QueryStatusResponse::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SweetProtocol.QueryStatusResponse.uuid)
}
inline void QueryStatusResponse::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SweetProtocol.QueryStatusResponse.uuid)
}
inline ::std::string* QueryStatusResponse::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:SweetProtocol.QueryStatusResponse.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryStatusResponse::release_uuid() {
  // @@protoc_insertion_point(field_release:SweetProtocol.QueryStatusResponse.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryStatusResponse::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.QueryStatusResponse.uuid)
}

// string config_path = 8;
inline void QueryStatusResponse::clear_config_path() {
  config_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryStatusResponse::config_path() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryStatusResponse.config_path)
  return config_path_.GetNoArena();
}
inline void QueryStatusResponse::set_config_path(const ::std::string& value) {
  
  config_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryStatusResponse.config_path)
}
#if LANG_CXX11
inline void QueryStatusResponse::set_config_path(::std::string&& value) {
  
  config_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SweetProtocol.QueryStatusResponse.config_path)
}
#endif
inline void QueryStatusResponse::set_config_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  config_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SweetProtocol.QueryStatusResponse.config_path)
}
inline void QueryStatusResponse::set_config_path(const char* value, size_t size) {
  
  config_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SweetProtocol.QueryStatusResponse.config_path)
}
inline ::std::string* QueryStatusResponse::mutable_config_path() {
  
  // @@protoc_insertion_point(field_mutable:SweetProtocol.QueryStatusResponse.config_path)
  return config_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryStatusResponse::release_config_path() {
  // @@protoc_insertion_point(field_release:SweetProtocol.QueryStatusResponse.config_path)
  
  return config_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryStatusResponse::set_allocated_config_path(::std::string* config_path) {
  if (config_path != NULL) {
    
  } else {
    
  }
  config_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config_path);
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.QueryStatusResponse.config_path)
}

// bool spice_agent = 1001;
inline void QueryStatusResponse::clear_spice_agent() {
  spice_agent_ = false;
}
inline bool QueryStatusResponse::spice_agent() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryStatusResponse.spice_agent)
  return spice_agent_;
}
inline void QueryStatusResponse::set_spice_agent(bool value) {
  
  spice_agent_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryStatusResponse.spice_agent)
}

// bool tenclass_agent = 1002;
inline void QueryStatusResponse::clear_tenclass_agent() {
  tenclass_agent_ = false;
}
inline bool QueryStatusResponse::tenclass_agent() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryStatusResponse.tenclass_agent)
  return tenclass_agent_;
}
inline void QueryStatusResponse::set_tenclass_agent(bool value) {
  
  tenclass_agent_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryStatusResponse.tenclass_agent)
}

// -------------------------------------------------------------------

// SendKeyboardInputCommand

// uint32 scancode = 1;
inline void SendKeyboardInputCommand::clear_scancode() {
  scancode_ = 0u;
}
inline ::google::protobuf::uint32 SendKeyboardInputCommand::scancode() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendKeyboardInputCommand.scancode)
  return scancode_;
}
inline void SendKeyboardInputCommand::set_scancode(::google::protobuf::uint32 value) {
  
  scancode_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SendKeyboardInputCommand.scancode)
}

// bool pressed = 2;
inline void SendKeyboardInputCommand::clear_pressed() {
  pressed_ = false;
}
inline bool SendKeyboardInputCommand::pressed() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendKeyboardInputCommand.pressed)
  return pressed_;
}
inline void SendKeyboardInputCommand::set_pressed(bool value) {
  
  pressed_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SendKeyboardInputCommand.pressed)
}

// -------------------------------------------------------------------

// SendPointerInputCommand

// uint32 buttons = 1;
inline void SendPointerInputCommand::clear_buttons() {
  buttons_ = 0u;
}
inline ::google::protobuf::uint32 SendPointerInputCommand::buttons() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendPointerInputCommand.buttons)
  return buttons_;
}
inline void SendPointerInputCommand::set_buttons(::google::protobuf::uint32 value) {
  
  buttons_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SendPointerInputCommand.buttons)
}

// uint32 x = 2;
inline void SendPointerInputCommand::clear_x() {
  x_ = 0u;
}
inline ::google::protobuf::uint32 SendPointerInputCommand::x() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendPointerInputCommand.x)
  return x_;
}
inline void SendPointerInputCommand::set_x(::google::protobuf::uint32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SendPointerInputCommand.x)
}

// uint32 y = 3;
inline void SendPointerInputCommand::clear_y() {
  y_ = 0u;
}
inline ::google::protobuf::uint32 SendPointerInputCommand::y() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendPointerInputCommand.y)
  return y_;
}
inline void SendPointerInputCommand::set_y(::google::protobuf::uint32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SendPointerInputCommand.y)
}

// uint32 z = 4;
inline void SendPointerInputCommand::clear_z() {
  z_ = 0u;
}
inline ::google::protobuf::uint32 SendPointerInputCommand::z() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendPointerInputCommand.z)
  return z_;
}
inline void SendPointerInputCommand::set_z(::google::protobuf::uint32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SendPointerInputCommand.z)
}

// -------------------------------------------------------------------

// QueryScreeenshotCommand

// string format = 1;
inline void QueryScreeenshotCommand::clear_format() {
  format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryScreeenshotCommand::format() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryScreeenshotCommand.format)
  return format_.GetNoArena();
}
inline void QueryScreeenshotCommand::set_format(const ::std::string& value) {
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryScreeenshotCommand.format)
}
#if LANG_CXX11
inline void QueryScreeenshotCommand::set_format(::std::string&& value) {
  
  format_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SweetProtocol.QueryScreeenshotCommand.format)
}
#endif
inline void QueryScreeenshotCommand::set_format(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SweetProtocol.QueryScreeenshotCommand.format)
}
inline void QueryScreeenshotCommand::set_format(const char* value, size_t size) {
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SweetProtocol.QueryScreeenshotCommand.format)
}
inline ::std::string* QueryScreeenshotCommand::mutable_format() {
  
  // @@protoc_insertion_point(field_mutable:SweetProtocol.QueryScreeenshotCommand.format)
  return format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryScreeenshotCommand::release_format() {
  // @@protoc_insertion_point(field_release:SweetProtocol.QueryScreeenshotCommand.format)
  
  return format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryScreeenshotCommand::set_allocated_format(::std::string* format) {
  if (format != NULL) {
    
  } else {
    
  }
  format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), format);
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.QueryScreeenshotCommand.format)
}

// uint32 width = 2;
inline void QueryScreeenshotCommand::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 QueryScreeenshotCommand::width() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryScreeenshotCommand.width)
  return width_;
}
inline void QueryScreeenshotCommand::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryScreeenshotCommand.width)
}

// uint32 height = 3;
inline void QueryScreeenshotCommand::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 QueryScreeenshotCommand::height() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryScreeenshotCommand.height)
  return height_;
}
inline void QueryScreeenshotCommand::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryScreeenshotCommand.height)
}

// -------------------------------------------------------------------

// QueryScreenshotResponse

// string format = 1;
inline void QueryScreenshotResponse::clear_format() {
  format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryScreenshotResponse::format() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryScreenshotResponse.format)
  return format_.GetNoArena();
}
inline void QueryScreenshotResponse::set_format(const ::std::string& value) {
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryScreenshotResponse.format)
}
#if LANG_CXX11
inline void QueryScreenshotResponse::set_format(::std::string&& value) {
  
  format_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SweetProtocol.QueryScreenshotResponse.format)
}
#endif
inline void QueryScreenshotResponse::set_format(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SweetProtocol.QueryScreenshotResponse.format)
}
inline void QueryScreenshotResponse::set_format(const char* value, size_t size) {
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SweetProtocol.QueryScreenshotResponse.format)
}
inline ::std::string* QueryScreenshotResponse::mutable_format() {
  
  // @@protoc_insertion_point(field_mutable:SweetProtocol.QueryScreenshotResponse.format)
  return format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryScreenshotResponse::release_format() {
  // @@protoc_insertion_point(field_release:SweetProtocol.QueryScreenshotResponse.format)
  
  return format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryScreenshotResponse::set_allocated_format(::std::string* format) {
  if (format != NULL) {
    
  } else {
    
  }
  format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), format);
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.QueryScreenshotResponse.format)
}

// uint32 width = 2;
inline void QueryScreenshotResponse::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 QueryScreenshotResponse::width() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryScreenshotResponse.width)
  return width_;
}
inline void QueryScreenshotResponse::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryScreenshotResponse.width)
}

// uint32 height = 3;
inline void QueryScreenshotResponse::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 QueryScreenshotResponse::height() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryScreenshotResponse.height)
  return height_;
}
inline void QueryScreenshotResponse::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryScreenshotResponse.height)
}

// bytes data = 4;
inline void QueryScreenshotResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryScreenshotResponse::data() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryScreenshotResponse.data)
  return data_.GetNoArena();
}
inline void QueryScreenshotResponse::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryScreenshotResponse.data)
}
#if LANG_CXX11
inline void QueryScreenshotResponse::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SweetProtocol.QueryScreenshotResponse.data)
}
#endif
inline void QueryScreenshotResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SweetProtocol.QueryScreenshotResponse.data)
}
inline void QueryScreenshotResponse::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SweetProtocol.QueryScreenshotResponse.data)
}
inline ::std::string* QueryScreenshotResponse::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:SweetProtocol.QueryScreenshotResponse.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryScreenshotResponse::release_data() {
  // @@protoc_insertion_point(field_release:SweetProtocol.QueryScreenshotResponse.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryScreenshotResponse::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.QueryScreenshotResponse.data)
}

// -------------------------------------------------------------------

// ConfigMonitorsCommand_Monitor

// uint32 index = 1;
inline void ConfigMonitorsCommand_Monitor::clear_index() {
  index_ = 0u;
}
inline ::google::protobuf::uint32 ConfigMonitorsCommand_Monitor::index() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.ConfigMonitorsCommand.Monitor.index)
  return index_;
}
inline void ConfigMonitorsCommand_Monitor::set_index(::google::protobuf::uint32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.ConfigMonitorsCommand.Monitor.index)
}

// uint32 left = 2;
inline void ConfigMonitorsCommand_Monitor::clear_left() {
  left_ = 0u;
}
inline ::google::protobuf::uint32 ConfigMonitorsCommand_Monitor::left() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.ConfigMonitorsCommand.Monitor.left)
  return left_;
}
inline void ConfigMonitorsCommand_Monitor::set_left(::google::protobuf::uint32 value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.ConfigMonitorsCommand.Monitor.left)
}

// uint32 top = 3;
inline void ConfigMonitorsCommand_Monitor::clear_top() {
  top_ = 0u;
}
inline ::google::protobuf::uint32 ConfigMonitorsCommand_Monitor::top() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.ConfigMonitorsCommand.Monitor.top)
  return top_;
}
inline void ConfigMonitorsCommand_Monitor::set_top(::google::protobuf::uint32 value) {
  
  top_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.ConfigMonitorsCommand.Monitor.top)
}

// uint32 width = 4;
inline void ConfigMonitorsCommand_Monitor::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 ConfigMonitorsCommand_Monitor::width() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.ConfigMonitorsCommand.Monitor.width)
  return width_;
}
inline void ConfigMonitorsCommand_Monitor::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.ConfigMonitorsCommand.Monitor.width)
}

// uint32 height = 5;
inline void ConfigMonitorsCommand_Monitor::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 ConfigMonitorsCommand_Monitor::height() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.ConfigMonitorsCommand.Monitor.height)
  return height_;
}
inline void ConfigMonitorsCommand_Monitor::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.ConfigMonitorsCommand.Monitor.height)
}

// uint32 depth = 6;
inline void ConfigMonitorsCommand_Monitor::clear_depth() {
  depth_ = 0u;
}
inline ::google::protobuf::uint32 ConfigMonitorsCommand_Monitor::depth() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.ConfigMonitorsCommand.Monitor.depth)
  return depth_;
}
inline void ConfigMonitorsCommand_Monitor::set_depth(::google::protobuf::uint32 value) {
  
  depth_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.ConfigMonitorsCommand.Monitor.depth)
}

// -------------------------------------------------------------------

// ConfigMonitorsCommand

// uint32 count = 1;
inline void ConfigMonitorsCommand::clear_count() {
  count_ = 0u;
}
inline ::google::protobuf::uint32 ConfigMonitorsCommand::count() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.ConfigMonitorsCommand.count)
  return count_;
}
inline void ConfigMonitorsCommand::set_count(::google::protobuf::uint32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.ConfigMonitorsCommand.count)
}

// repeated .SweetProtocol.ConfigMonitorsCommand.Monitor monitors = 2;
inline int ConfigMonitorsCommand::monitors_size() const {
  return monitors_.size();
}
inline void ConfigMonitorsCommand::clear_monitors() {
  monitors_.Clear();
}
inline const ::SweetProtocol::ConfigMonitorsCommand_Monitor& ConfigMonitorsCommand::monitors(int index) const {
  // @@protoc_insertion_point(field_get:SweetProtocol.ConfigMonitorsCommand.monitors)
  return monitors_.Get(index);
}
inline ::SweetProtocol::ConfigMonitorsCommand_Monitor* ConfigMonitorsCommand::mutable_monitors(int index) {
  // @@protoc_insertion_point(field_mutable:SweetProtocol.ConfigMonitorsCommand.monitors)
  return monitors_.Mutable(index);
}
inline ::SweetProtocol::ConfigMonitorsCommand_Monitor* ConfigMonitorsCommand::add_monitors() {
  // @@protoc_insertion_point(field_add:SweetProtocol.ConfigMonitorsCommand.monitors)
  return monitors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::SweetProtocol::ConfigMonitorsCommand_Monitor >*
ConfigMonitorsCommand::mutable_monitors() {
  // @@protoc_insertion_point(field_mutable_list:SweetProtocol.ConfigMonitorsCommand.monitors)
  return &monitors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::SweetProtocol::ConfigMonitorsCommand_Monitor >&
ConfigMonitorsCommand::monitors() const {
  // @@protoc_insertion_point(field_list:SweetProtocol.ConfigMonitorsCommand.monitors)
  return monitors_;
}

// -------------------------------------------------------------------

// SetCursorEvent_CursorShape

// uint32 width = 1;
inline void SetCursorEvent_CursorShape::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 SetCursorEvent_CursorShape::width() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SetCursorEvent.CursorShape.width)
  return width_;
}
inline void SetCursorEvent_CursorShape::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SetCursorEvent.CursorShape.width)
}

// uint32 height = 2;
inline void SetCursorEvent_CursorShape::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 SetCursorEvent_CursorShape::height() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SetCursorEvent.CursorShape.height)
  return height_;
}
inline void SetCursorEvent_CursorShape::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SetCursorEvent.CursorShape.height)
}

// int32 hotspot_x = 3;
inline void SetCursorEvent_CursorShape::clear_hotspot_x() {
  hotspot_x_ = 0;
}
inline ::google::protobuf::int32 SetCursorEvent_CursorShape::hotspot_x() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SetCursorEvent.CursorShape.hotspot_x)
  return hotspot_x_;
}
inline void SetCursorEvent_CursorShape::set_hotspot_x(::google::protobuf::int32 value) {
  
  hotspot_x_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SetCursorEvent.CursorShape.hotspot_x)
}

// int32 hotspot_y = 4;
inline void SetCursorEvent_CursorShape::clear_hotspot_y() {
  hotspot_y_ = 0;
}
inline ::google::protobuf::int32 SetCursorEvent_CursorShape::hotspot_y() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SetCursorEvent.CursorShape.hotspot_y)
  return hotspot_y_;
}
inline void SetCursorEvent_CursorShape::set_hotspot_y(::google::protobuf::int32 value) {
  
  hotspot_y_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SetCursorEvent.CursorShape.hotspot_y)
}

// uint32 type = 5;
inline void SetCursorEvent_CursorShape::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 SetCursorEvent_CursorShape::type() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SetCursorEvent.CursorShape.type)
  return type_;
}
inline void SetCursorEvent_CursorShape::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SetCursorEvent.CursorShape.type)
}

// bytes data = 6;
inline void SetCursorEvent_CursorShape::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetCursorEvent_CursorShape::data() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SetCursorEvent.CursorShape.data)
  return data_.GetNoArena();
}
inline void SetCursorEvent_CursorShape::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SweetProtocol.SetCursorEvent.CursorShape.data)
}
#if LANG_CXX11
inline void SetCursorEvent_CursorShape::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SweetProtocol.SetCursorEvent.CursorShape.data)
}
#endif
inline void SetCursorEvent_CursorShape::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SweetProtocol.SetCursorEvent.CursorShape.data)
}
inline void SetCursorEvent_CursorShape::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SweetProtocol.SetCursorEvent.CursorShape.data)
}
inline ::std::string* SetCursorEvent_CursorShape::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:SweetProtocol.SetCursorEvent.CursorShape.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetCursorEvent_CursorShape::release_data() {
  // @@protoc_insertion_point(field_release:SweetProtocol.SetCursorEvent.CursorShape.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetCursorEvent_CursorShape::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.SetCursorEvent.CursorShape.data)
}

// -------------------------------------------------------------------

// SetCursorEvent

// bool visible = 1;
inline void SetCursorEvent::clear_visible() {
  visible_ = false;
}
inline bool SetCursorEvent::visible() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SetCursorEvent.visible)
  return visible_;
}
inline void SetCursorEvent::set_visible(bool value) {
  
  visible_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SetCursorEvent.visible)
}

// int32 x = 2;
inline void SetCursorEvent::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 SetCursorEvent::x() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SetCursorEvent.x)
  return x_;
}
inline void SetCursorEvent::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SetCursorEvent.x)
}

// int32 y = 3;
inline void SetCursorEvent::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 SetCursorEvent::y() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SetCursorEvent.y)
  return y_;
}
inline void SetCursorEvent::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SetCursorEvent.y)
}

// .SweetProtocol.SetCursorEvent.CursorShape shape = 4;
inline bool SetCursorEvent::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
inline void SetCursorEvent::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
}
inline const ::SweetProtocol::SetCursorEvent_CursorShape& SetCursorEvent::shape() const {
  const ::SweetProtocol::SetCursorEvent_CursorShape* p = shape_;
  // @@protoc_insertion_point(field_get:SweetProtocol.SetCursorEvent.shape)
  return p != NULL ? *p : *reinterpret_cast<const ::SweetProtocol::SetCursorEvent_CursorShape*>(
      &::SweetProtocol::_SetCursorEvent_CursorShape_default_instance_);
}
inline ::SweetProtocol::SetCursorEvent_CursorShape* SetCursorEvent::release_shape() {
  // @@protoc_insertion_point(field_release:SweetProtocol.SetCursorEvent.shape)
  
  ::SweetProtocol::SetCursorEvent_CursorShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline ::SweetProtocol::SetCursorEvent_CursorShape* SetCursorEvent::mutable_shape() {
  
  if (shape_ == NULL) {
    shape_ = new ::SweetProtocol::SetCursorEvent_CursorShape;
  }
  // @@protoc_insertion_point(field_mutable:SweetProtocol.SetCursorEvent.shape)
  return shape_;
}
inline void SetCursorEvent::set_allocated_shape(::SweetProtocol::SetCursorEvent_CursorShape* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      shape = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    
  } else {
    
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.SetCursorEvent.shape)
}

// -------------------------------------------------------------------

// ConnectDisplayCommand

// string codec = 1;
inline void ConnectDisplayCommand::clear_codec() {
  codec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectDisplayCommand::codec() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.ConnectDisplayCommand.codec)
  return codec_.GetNoArena();
}
inline void ConnectDisplayCommand::set_codec(const ::std::string& value) {
  
  codec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SweetProtocol.ConnectDisplayCommand.codec)
}
#if LANG_CXX11
inline void ConnectDisplayCommand::set_codec(::std::string&& value) {
  
  codec_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SweetProtocol.ConnectDisplayCommand.codec)
}
#endif
inline void ConnectDisplayCommand::set_codec(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  codec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SweetProtocol.ConnectDisplayCommand.codec)
}
inline void ConnectDisplayCommand::set_codec(const char* value, size_t size) {
  
  codec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SweetProtocol.ConnectDisplayCommand.codec)
}
inline ::std::string* ConnectDisplayCommand::mutable_codec() {
  
  // @@protoc_insertion_point(field_mutable:SweetProtocol.ConnectDisplayCommand.codec)
  return codec_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectDisplayCommand::release_codec() {
  // @@protoc_insertion_point(field_release:SweetProtocol.ConnectDisplayCommand.codec)
  
  return codec_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectDisplayCommand::set_allocated_codec(::std::string* codec) {
  if (codec != NULL) {
    
  } else {
    
  }
  codec_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), codec);
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.ConnectDisplayCommand.codec)
}

// string profile = 2;
inline void ConnectDisplayCommand::clear_profile() {
  profile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectDisplayCommand::profile() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.ConnectDisplayCommand.profile)
  return profile_.GetNoArena();
}
inline void ConnectDisplayCommand::set_profile(const ::std::string& value) {
  
  profile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SweetProtocol.ConnectDisplayCommand.profile)
}
#if LANG_CXX11
inline void ConnectDisplayCommand::set_profile(::std::string&& value) {
  
  profile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SweetProtocol.ConnectDisplayCommand.profile)
}
#endif
inline void ConnectDisplayCommand::set_profile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  profile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SweetProtocol.ConnectDisplayCommand.profile)
}
inline void ConnectDisplayCommand::set_profile(const char* value, size_t size) {
  
  profile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SweetProtocol.ConnectDisplayCommand.profile)
}
inline ::std::string* ConnectDisplayCommand::mutable_profile() {
  
  // @@protoc_insertion_point(field_mutable:SweetProtocol.ConnectDisplayCommand.profile)
  return profile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectDisplayCommand::release_profile() {
  // @@protoc_insertion_point(field_release:SweetProtocol.ConnectDisplayCommand.profile)
  
  return profile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectDisplayCommand::set_allocated_profile(::std::string* profile) {
  if (profile != NULL) {
    
  } else {
    
  }
  profile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), profile);
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.ConnectDisplayCommand.profile)
}

// string speed = 3;
inline void ConnectDisplayCommand::clear_speed() {
  speed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectDisplayCommand::speed() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.ConnectDisplayCommand.speed)
  return speed_.GetNoArena();
}
inline void ConnectDisplayCommand::set_speed(const ::std::string& value) {
  
  speed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SweetProtocol.ConnectDisplayCommand.speed)
}
#if LANG_CXX11
inline void ConnectDisplayCommand::set_speed(::std::string&& value) {
  
  speed_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SweetProtocol.ConnectDisplayCommand.speed)
}
#endif
inline void ConnectDisplayCommand::set_speed(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  speed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SweetProtocol.ConnectDisplayCommand.speed)
}
inline void ConnectDisplayCommand::set_speed(const char* value, size_t size) {
  
  speed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SweetProtocol.ConnectDisplayCommand.speed)
}
inline ::std::string* ConnectDisplayCommand::mutable_speed() {
  
  // @@protoc_insertion_point(field_mutable:SweetProtocol.ConnectDisplayCommand.speed)
  return speed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectDisplayCommand::release_speed() {
  // @@protoc_insertion_point(field_release:SweetProtocol.ConnectDisplayCommand.speed)
  
  return speed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectDisplayCommand::set_allocated_speed(::std::string* speed) {
  if (speed != NULL) {
    
  } else {
    
  }
  speed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), speed);
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.ConnectDisplayCommand.speed)
}

// string rate_control = 4;
inline void ConnectDisplayCommand::clear_rate_control() {
  rate_control_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectDisplayCommand::rate_control() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.ConnectDisplayCommand.rate_control)
  return rate_control_.GetNoArena();
}
inline void ConnectDisplayCommand::set_rate_control(const ::std::string& value) {
  
  rate_control_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SweetProtocol.ConnectDisplayCommand.rate_control)
}
#if LANG_CXX11
inline void ConnectDisplayCommand::set_rate_control(::std::string&& value) {
  
  rate_control_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SweetProtocol.ConnectDisplayCommand.rate_control)
}
#endif
inline void ConnectDisplayCommand::set_rate_control(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rate_control_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SweetProtocol.ConnectDisplayCommand.rate_control)
}
inline void ConnectDisplayCommand::set_rate_control(const char* value, size_t size) {
  
  rate_control_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SweetProtocol.ConnectDisplayCommand.rate_control)
}
inline ::std::string* ConnectDisplayCommand::mutable_rate_control() {
  
  // @@protoc_insertion_point(field_mutable:SweetProtocol.ConnectDisplayCommand.rate_control)
  return rate_control_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectDisplayCommand::release_rate_control() {
  // @@protoc_insertion_point(field_release:SweetProtocol.ConnectDisplayCommand.rate_control)
  
  return rate_control_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectDisplayCommand::set_allocated_rate_control(::std::string* rate_control) {
  if (rate_control != NULL) {
    
  } else {
    
  }
  rate_control_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rate_control);
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.ConnectDisplayCommand.rate_control)
}

// uint32 fps = 5;
inline void ConnectDisplayCommand::clear_fps() {
  fps_ = 0u;
}
inline ::google::protobuf::uint32 ConnectDisplayCommand::fps() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.ConnectDisplayCommand.fps)
  return fps_;
}
inline void ConnectDisplayCommand::set_fps(::google::protobuf::uint32 value) {
  
  fps_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.ConnectDisplayCommand.fps)
}

// uint32 bitrate = 6;
inline void ConnectDisplayCommand::clear_bitrate() {
  bitrate_ = 0u;
}
inline ::google::protobuf::uint32 ConnectDisplayCommand::bitrate() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.ConnectDisplayCommand.bitrate)
  return bitrate_;
}
inline void ConnectDisplayCommand::set_bitrate(::google::protobuf::uint32 value) {
  
  bitrate_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.ConnectDisplayCommand.bitrate)
}

// uint32 qmin = 7;
inline void ConnectDisplayCommand::clear_qmin() {
  qmin_ = 0u;
}
inline ::google::protobuf::uint32 ConnectDisplayCommand::qmin() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.ConnectDisplayCommand.qmin)
  return qmin_;
}
inline void ConnectDisplayCommand::set_qmin(::google::protobuf::uint32 value) {
  
  qmin_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.ConnectDisplayCommand.qmin)
}

// uint32 threads = 8;
inline void ConnectDisplayCommand::clear_threads() {
  threads_ = 0u;
}
inline ::google::protobuf::uint32 ConnectDisplayCommand::threads() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.ConnectDisplayCommand.threads)
  return threads_;
}
inline void ConnectDisplayCommand::set_threads(::google::protobuf::uint32 value) {
  
  threads_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.ConnectDisplayCommand.threads)
}

// uint32 flags = 9;
inline void ConnectDisplayCommand::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 ConnectDisplayCommand::flags() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.ConnectDisplayCommand.flags)
  return flags_;
}
inline void ConnectDisplayCommand::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.ConnectDisplayCommand.flags)
}

// -------------------------------------------------------------------

// ConnectPlaybackCommand

// string codec = 1;
inline void ConnectPlaybackCommand::clear_codec() {
  codec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectPlaybackCommand::codec() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.ConnectPlaybackCommand.codec)
  return codec_.GetNoArena();
}
inline void ConnectPlaybackCommand::set_codec(const ::std::string& value) {
  
  codec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SweetProtocol.ConnectPlaybackCommand.codec)
}
#if LANG_CXX11
inline void ConnectPlaybackCommand::set_codec(::std::string&& value) {
  
  codec_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SweetProtocol.ConnectPlaybackCommand.codec)
}
#endif
inline void ConnectPlaybackCommand::set_codec(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  codec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SweetProtocol.ConnectPlaybackCommand.codec)
}
inline void ConnectPlaybackCommand::set_codec(const char* value, size_t size) {
  
  codec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SweetProtocol.ConnectPlaybackCommand.codec)
}
inline ::std::string* ConnectPlaybackCommand::mutable_codec() {
  
  // @@protoc_insertion_point(field_mutable:SweetProtocol.ConnectPlaybackCommand.codec)
  return codec_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectPlaybackCommand::release_codec() {
  // @@protoc_insertion_point(field_release:SweetProtocol.ConnectPlaybackCommand.codec)
  
  return codec_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectPlaybackCommand::set_allocated_codec(::std::string* codec) {
  if (codec != NULL) {
    
  } else {
    
  }
  codec_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), codec);
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.ConnectPlaybackCommand.codec)
}

// -------------------------------------------------------------------

// DisplayStreamStartEvent

// uint32 display_id = 1;
inline void DisplayStreamStartEvent::clear_display_id() {
  display_id_ = 0u;
}
inline ::google::protobuf::uint32 DisplayStreamStartEvent::display_id() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.DisplayStreamStartEvent.display_id)
  return display_id_;
}
inline void DisplayStreamStartEvent::set_display_id(::google::protobuf::uint32 value) {
  
  display_id_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.DisplayStreamStartEvent.display_id)
}

// uint32 width = 2;
inline void DisplayStreamStartEvent::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 DisplayStreamStartEvent::width() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.DisplayStreamStartEvent.width)
  return width_;
}
inline void DisplayStreamStartEvent::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.DisplayStreamStartEvent.width)
}

// uint32 height = 3;
inline void DisplayStreamStartEvent::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 DisplayStreamStartEvent::height() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.DisplayStreamStartEvent.height)
  return height_;
}
inline void DisplayStreamStartEvent::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.DisplayStreamStartEvent.height)
}

// uint32 codec = 5;
inline void DisplayStreamStartEvent::clear_codec() {
  codec_ = 0u;
}
inline ::google::protobuf::uint32 DisplayStreamStartEvent::codec() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.DisplayStreamStartEvent.codec)
  return codec_;
}
inline void DisplayStreamStartEvent::set_codec(::google::protobuf::uint32 value) {
  
  codec_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.DisplayStreamStartEvent.codec)
}

// -------------------------------------------------------------------

// PlaybackStartEvent

// uint32 playback_id = 1;
inline void PlaybackStartEvent::clear_playback_id() {
  playback_id_ = 0u;
}
inline ::google::protobuf::uint32 PlaybackStartEvent::playback_id() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.PlaybackStartEvent.playback_id)
  return playback_id_;
}
inline void PlaybackStartEvent::set_playback_id(::google::protobuf::uint32 value) {
  
  playback_id_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.PlaybackStartEvent.playback_id)
}

// uint32 codec = 2;
inline void PlaybackStartEvent::clear_codec() {
  codec_ = 0u;
}
inline ::google::protobuf::uint32 PlaybackStartEvent::codec() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.PlaybackStartEvent.codec)
  return codec_;
}
inline void PlaybackStartEvent::set_codec(::google::protobuf::uint32 value) {
  
  codec_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.PlaybackStartEvent.codec)
}

// uint32 format = 3;
inline void PlaybackStartEvent::clear_format() {
  format_ = 0u;
}
inline ::google::protobuf::uint32 PlaybackStartEvent::format() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.PlaybackStartEvent.format)
  return format_;
}
inline void PlaybackStartEvent::set_format(::google::protobuf::uint32 value) {
  
  format_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.PlaybackStartEvent.format)
}

// uint32 channels = 4;
inline void PlaybackStartEvent::clear_channels() {
  channels_ = 0u;
}
inline ::google::protobuf::uint32 PlaybackStartEvent::channels() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.PlaybackStartEvent.channels)
  return channels_;
}
inline void PlaybackStartEvent::set_channels(::google::protobuf::uint32 value) {
  
  channels_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.PlaybackStartEvent.channels)
}

// uint32 frequency = 5;
inline void PlaybackStartEvent::clear_frequency() {
  frequency_ = 0u;
}
inline ::google::protobuf::uint32 PlaybackStartEvent::frequency() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.PlaybackStartEvent.frequency)
  return frequency_;
}
inline void PlaybackStartEvent::set_frequency(::google::protobuf::uint32 value) {
  
  frequency_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.PlaybackStartEvent.frequency)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SweetProtocol

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::SweetProtocol::SendPointerInputCommand_PointerButtonBit> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SweetProtocol::SendPointerInputCommand_PointerButtonBit>() {
  return ::SweetProtocol::SendPointerInputCommand_PointerButtonBit_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sweet_2eproto__INCLUDED
