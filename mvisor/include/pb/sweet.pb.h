// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sweet.proto

#ifndef PROTOBUF_sweet_2eproto__INCLUDED
#define PROTOBUF_sweet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_sweet_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[18];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsQueryStatusResponseImpl();
void InitDefaultsQueryStatusResponse();
void InitDefaultsSerialPortStatusEventImpl();
void InitDefaultsSerialPortStatusEvent();
void InitDefaultsSaveMachineOptionsImpl();
void InitDefaultsSaveMachineOptions();
void InitDefaultsSendKeyboardInputImpl();
void InitDefaultsSendKeyboardInput();
void InitDefaultsSendMidiInputImpl();
void InitDefaultsSendMidiInput();
void InitDefaultsSendPointerInputImpl();
void InitDefaultsSendPointerInput();
void InitDefaultsQueryScreeenshotImpl();
void InitDefaultsQueryScreeenshot();
void InitDefaultsQueryScreenshotResponseImpl();
void InitDefaultsQueryScreenshotResponse();
void InitDefaultsMonitorsConfig_MonitorImpl();
void InitDefaultsMonitorsConfig_Monitor();
void InitDefaultsMonitorsConfigImpl();
void InitDefaultsMonitorsConfig();
void InitDefaultsSetCursorEvent_CursorShapeImpl();
void InitDefaultsSetCursorEvent_CursorShape();
void InitDefaultsSetCursorEventImpl();
void InitDefaultsSetCursorEvent();
void InitDefaultsDisplayStreamConfigImpl();
void InitDefaultsDisplayStreamConfig();
void InitDefaultsPlaybackStreamConfigImpl();
void InitDefaultsPlaybackStreamConfig();
void InitDefaultsDisplayStreamStartEventImpl();
void InitDefaultsDisplayStreamStartEvent();
void InitDefaultsPlaybackStreamStartEventImpl();
void InitDefaultsPlaybackStreamStartEvent();
void InitDefaultsClipboardDataToGuestImpl();
void InitDefaultsClipboardDataToGuest();
void InitDefaultsClipboardStreamDataEventImpl();
void InitDefaultsClipboardStreamDataEvent();
inline void InitDefaults() {
  InitDefaultsQueryStatusResponse();
  InitDefaultsSerialPortStatusEvent();
  InitDefaultsSaveMachineOptions();
  InitDefaultsSendKeyboardInput();
  InitDefaultsSendMidiInput();
  InitDefaultsSendPointerInput();
  InitDefaultsQueryScreeenshot();
  InitDefaultsQueryScreenshotResponse();
  InitDefaultsMonitorsConfig_Monitor();
  InitDefaultsMonitorsConfig();
  InitDefaultsSetCursorEvent_CursorShape();
  InitDefaultsSetCursorEvent();
  InitDefaultsDisplayStreamConfig();
  InitDefaultsPlaybackStreamConfig();
  InitDefaultsDisplayStreamStartEvent();
  InitDefaultsPlaybackStreamStartEvent();
  InitDefaultsClipboardDataToGuest();
  InitDefaultsClipboardStreamDataEvent();
}
}  // namespace protobuf_sweet_2eproto
namespace SweetProtocol {
class ClipboardDataToGuest;
class ClipboardDataToGuestDefaultTypeInternal;
extern ClipboardDataToGuestDefaultTypeInternal _ClipboardDataToGuest_default_instance_;
class ClipboardStreamDataEvent;
class ClipboardStreamDataEventDefaultTypeInternal;
extern ClipboardStreamDataEventDefaultTypeInternal _ClipboardStreamDataEvent_default_instance_;
class DisplayStreamConfig;
class DisplayStreamConfigDefaultTypeInternal;
extern DisplayStreamConfigDefaultTypeInternal _DisplayStreamConfig_default_instance_;
class DisplayStreamStartEvent;
class DisplayStreamStartEventDefaultTypeInternal;
extern DisplayStreamStartEventDefaultTypeInternal _DisplayStreamStartEvent_default_instance_;
class MonitorsConfig;
class MonitorsConfigDefaultTypeInternal;
extern MonitorsConfigDefaultTypeInternal _MonitorsConfig_default_instance_;
class MonitorsConfig_Monitor;
class MonitorsConfig_MonitorDefaultTypeInternal;
extern MonitorsConfig_MonitorDefaultTypeInternal _MonitorsConfig_Monitor_default_instance_;
class PlaybackStreamConfig;
class PlaybackStreamConfigDefaultTypeInternal;
extern PlaybackStreamConfigDefaultTypeInternal _PlaybackStreamConfig_default_instance_;
class PlaybackStreamStartEvent;
class PlaybackStreamStartEventDefaultTypeInternal;
extern PlaybackStreamStartEventDefaultTypeInternal _PlaybackStreamStartEvent_default_instance_;
class QueryScreeenshot;
class QueryScreeenshotDefaultTypeInternal;
extern QueryScreeenshotDefaultTypeInternal _QueryScreeenshot_default_instance_;
class QueryScreenshotResponse;
class QueryScreenshotResponseDefaultTypeInternal;
extern QueryScreenshotResponseDefaultTypeInternal _QueryScreenshotResponse_default_instance_;
class QueryStatusResponse;
class QueryStatusResponseDefaultTypeInternal;
extern QueryStatusResponseDefaultTypeInternal _QueryStatusResponse_default_instance_;
class SaveMachineOptions;
class SaveMachineOptionsDefaultTypeInternal;
extern SaveMachineOptionsDefaultTypeInternal _SaveMachineOptions_default_instance_;
class SendKeyboardInput;
class SendKeyboardInputDefaultTypeInternal;
extern SendKeyboardInputDefaultTypeInternal _SendKeyboardInput_default_instance_;
class SendMidiInput;
class SendMidiInputDefaultTypeInternal;
extern SendMidiInputDefaultTypeInternal _SendMidiInput_default_instance_;
class SendPointerInput;
class SendPointerInputDefaultTypeInternal;
extern SendPointerInputDefaultTypeInternal _SendPointerInput_default_instance_;
class SerialPortStatusEvent;
class SerialPortStatusEventDefaultTypeInternal;
extern SerialPortStatusEventDefaultTypeInternal _SerialPortStatusEvent_default_instance_;
class SetCursorEvent;
class SetCursorEventDefaultTypeInternal;
extern SetCursorEventDefaultTypeInternal _SetCursorEvent_default_instance_;
class SetCursorEvent_CursorShape;
class SetCursorEvent_CursorShapeDefaultTypeInternal;
extern SetCursorEvent_CursorShapeDefaultTypeInternal _SetCursorEvent_CursorShape_default_instance_;
}  // namespace SweetProtocol
namespace SweetProtocol {

enum SendPointerInput_PointerButtonBit {
  SendPointerInput_PointerButtonBit_LEFT = 0,
  SendPointerInput_PointerButtonBit_MIDDLE = 1,
  SendPointerInput_PointerButtonBit_RIGHT = 2,
  SendPointerInput_PointerButtonBit_SendPointerInput_PointerButtonBit_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SendPointerInput_PointerButtonBit_SendPointerInput_PointerButtonBit_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SendPointerInput_PointerButtonBit_IsValid(int value);
const SendPointerInput_PointerButtonBit SendPointerInput_PointerButtonBit_PointerButtonBit_MIN = SendPointerInput_PointerButtonBit_LEFT;
const SendPointerInput_PointerButtonBit SendPointerInput_PointerButtonBit_PointerButtonBit_MAX = SendPointerInput_PointerButtonBit_RIGHT;
const int SendPointerInput_PointerButtonBit_PointerButtonBit_ARRAYSIZE = SendPointerInput_PointerButtonBit_PointerButtonBit_MAX + 1;

const ::google::protobuf::EnumDescriptor* SendPointerInput_PointerButtonBit_descriptor();
inline const ::std::string& SendPointerInput_PointerButtonBit_Name(SendPointerInput_PointerButtonBit value) {
  return ::google::protobuf::internal::NameOfEnum(
    SendPointerInput_PointerButtonBit_descriptor(), value);
}
inline bool SendPointerInput_PointerButtonBit_Parse(
    const ::std::string& name, SendPointerInput_PointerButtonBit* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SendPointerInput_PointerButtonBit>(
    SendPointerInput_PointerButtonBit_descriptor(), name, value);
}
enum SweetCommand {
  kInvalid = 0,
  kQueryStatus = 16,
  kResetMachine = 32,
  kStartupMachine = 33,
  kShutdownMachine = 34,
  kPauseMachine = 35,
  kResumeMachine = 36,
  kSaveMachine = 37,
  kQuitMachine = 38,
  kQemuGuestCommand = 48,
  kSendKeyboardInput = 64,
  kSendPointerInput = 65,
  kConfigMonitors = 80,
  kQueryScreenshot = 81,
  kStartDisplayStream = 82,
  kStopDisplayStream = 83,
  kRefreshDisplayStream = 84,
  kStartPlaybackStream = 96,
  kStopPlaybackStream = 97,
  kStartRecordStream = 112,
  kStopRecordStream = 113,
  kSendRecordStreamData = 114,
  kClipboardDataToGuest = 128,
  kStartClipboardStream = 129,
  kStopClipboardStream = 130,
  kConnectUsb = 144,
  kDisconnectUsb = 145,
  kSendUsbData = 146,
  kStartTcpService = 160,
  kConnectTcp = 161,
  kCloseTcp = 162,
  kSendTcpData = 163,
  kStartVirtioFs = 176,
  kStopVirtioFs = 177,
  kStartMidi = 192,
  kStopMidi = 193,
  kSendMidiInput = 194,
  SweetCommand_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SweetCommand_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SweetCommand_IsValid(int value);
const SweetCommand SweetCommand_MIN = kInvalid;
const SweetCommand SweetCommand_MAX = kSendMidiInput;
const int SweetCommand_ARRAYSIZE = SweetCommand_MAX + 1;

const ::google::protobuf::EnumDescriptor* SweetCommand_descriptor();
inline const ::std::string& SweetCommand_Name(SweetCommand value) {
  return ::google::protobuf::internal::NameOfEnum(
    SweetCommand_descriptor(), value);
}
inline bool SweetCommand_Parse(
    const ::std::string& name, SweetCommand* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SweetCommand>(
    SweetCommand_descriptor(), name, value);
}
enum SweetResponseAndEvent {
  kInvalidResponse = 0,
  kCommandAcknowledge = 4096,
  kQueryStatusResponse = 4112,
  kQemuGuestCommandResponse = 4144,
  kSerialPortStatusEvent = 4145,
  kQueryScreenshotResponse = 4176,
  kSetCursorEvent = 4177,
  kDisplayStreamStartEvent = 4178,
  kDisplayStreamStopEvent = 4179,
  kDisplayStreamDataEvent = 4180,
  kPlaybackStreamStartEvent = 4192,
  kPlaybackStreamStopEvent = 4193,
  kPlaybackStreamDataEvent = 4194,
  kVirtioFsStartEvent = 4272,
  kVirtioFsStopEvent = 4273,
  kVirtioFsNotifyEvent = 4274,
  kClipboardStreamStartEvent = 4224,
  kClipboardStreamStopEvent = 4225,
  kClipboardStreamDataEvent = 4226,
  kMidiStartEvent = 4288,
  kMidiStopEvent = 4289,
  SweetResponseAndEvent_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SweetResponseAndEvent_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SweetResponseAndEvent_IsValid(int value);
const SweetResponseAndEvent SweetResponseAndEvent_MIN = kInvalidResponse;
const SweetResponseAndEvent SweetResponseAndEvent_MAX = kMidiStopEvent;
const int SweetResponseAndEvent_ARRAYSIZE = SweetResponseAndEvent_MAX + 1;

const ::google::protobuf::EnumDescriptor* SweetResponseAndEvent_descriptor();
inline const ::std::string& SweetResponseAndEvent_Name(SweetResponseAndEvent value) {
  return ::google::protobuf::internal::NameOfEnum(
    SweetResponseAndEvent_descriptor(), value);
}
inline bool SweetResponseAndEvent_Parse(
    const ::std::string& name, SweetResponseAndEvent* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SweetResponseAndEvent>(
    SweetResponseAndEvent_descriptor(), name, value);
}
enum ClipboardDataType {
  kSweetClipboard_NONE = 0,
  kSweetClipboard_UTF8_TEXT = 1,
  kSweetClipboard_IMAGE_PNG = 2,
  kSweetClipboard_IMAGE_BMP = 3,
  kSweetClipboard_IMAGE_TIFF = 4,
  kSweetClipboard_IMAGE_JPG = 5,
  kSweetClipboard_FILE_LIST = 6,
  ClipboardDataType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ClipboardDataType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ClipboardDataType_IsValid(int value);
const ClipboardDataType ClipboardDataType_MIN = kSweetClipboard_NONE;
const ClipboardDataType ClipboardDataType_MAX = kSweetClipboard_FILE_LIST;
const int ClipboardDataType_ARRAYSIZE = ClipboardDataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClipboardDataType_descriptor();
inline const ::std::string& ClipboardDataType_Name(ClipboardDataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClipboardDataType_descriptor(), value);
}
inline bool ClipboardDataType_Parse(
    const ::std::string& name, ClipboardDataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClipboardDataType>(
    ClipboardDataType_descriptor(), name, value);
}
// ===================================================================

class QueryStatusResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.QueryStatusResponse) */ {
 public:
  QueryStatusResponse();
  virtual ~QueryStatusResponse();

  QueryStatusResponse(const QueryStatusResponse& from);

  inline QueryStatusResponse& operator=(const QueryStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryStatusResponse(QueryStatusResponse&& from) noexcept
    : QueryStatusResponse() {
    *this = ::std::move(from);
  }

  inline QueryStatusResponse& operator=(QueryStatusResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryStatusResponse* internal_default_instance() {
    return reinterpret_cast<const QueryStatusResponse*>(
               &_QueryStatusResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(QueryStatusResponse* other);
  friend void swap(QueryStatusResponse& a, QueryStatusResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryStatusResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryStatusResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryStatusResponse& from);
  void MergeFrom(const QueryStatusResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryStatusResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string status = 3;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // string vm_uuid = 6;
  void clear_vm_uuid();
  static const int kVmUuidFieldNumber = 6;
  const ::std::string& vm_uuid() const;
  void set_vm_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_vm_uuid(::std::string&& value);
  #endif
  void set_vm_uuid(const char* value);
  void set_vm_uuid(const char* value, size_t size);
  ::std::string* mutable_vm_uuid();
  ::std::string* release_vm_uuid();
  void set_allocated_vm_uuid(::std::string* vm_uuid);

  // string vm_name = 7;
  void clear_vm_name();
  static const int kVmNameFieldNumber = 7;
  const ::std::string& vm_name() const;
  void set_vm_name(const ::std::string& value);
  #if LANG_CXX11
  void set_vm_name(::std::string&& value);
  #endif
  void set_vm_name(const char* value);
  void set_vm_name(const char* value, size_t size);
  ::std::string* mutable_vm_name();
  ::std::string* release_vm_name();
  void set_allocated_vm_name(::std::string* vm_name);

  // string config_path = 8;
  void clear_config_path();
  static const int kConfigPathFieldNumber = 8;
  const ::std::string& config_path() const;
  void set_config_path(const ::std::string& value);
  #if LANG_CXX11
  void set_config_path(::std::string&& value);
  #endif
  void set_config_path(const char* value);
  void set_config_path(const char* value, size_t size);
  ::std::string* mutable_config_path();
  ::std::string* release_config_path();
  void set_allocated_config_path(::std::string* config_path);

  // uint64 memory_size = 5;
  void clear_memory_size();
  static const int kMemorySizeFieldNumber = 5;
  ::google::protobuf::uint64 memory_size() const;
  void set_memory_size(::google::protobuf::uint64 value);

  // bool tenclass_agent = 1005;
  void clear_tenclass_agent();
  static const int kTenclassAgentFieldNumber = 1005;
  bool tenclass_agent() const;
  void set_tenclass_agent(bool value);

  // uint32 vcpu_count = 4;
  void clear_vcpu_count();
  static const int kVcpuCountFieldNumber = 4;
  ::google::protobuf::uint32 vcpu_count() const;
  void set_vcpu_count(::google::protobuf::uint32 value);

  // bool debug = 1;
  void clear_debug();
  static const int kDebugFieldNumber = 1;
  bool debug() const;
  void set_debug(bool value);

  // bool hypervisor = 2;
  void clear_hypervisor();
  static const int kHypervisorFieldNumber = 2;
  bool hypervisor() const;
  void set_hypervisor(bool value);

  // bool spice_agent = 1001;
  void clear_spice_agent();
  static const int kSpiceAgentFieldNumber = 1001;
  bool spice_agent() const;
  void set_spice_agent(bool value);

  // bool qemu_agent = 1002;
  void clear_qemu_agent();
  static const int kQemuAgentFieldNumber = 1002;
  bool qemu_agent() const;
  void set_qemu_agent(bool value);

  // @@protoc_insertion_point(class_scope:SweetProtocol.QueryStatusResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::google::protobuf::internal::ArenaStringPtr vm_uuid_;
  ::google::protobuf::internal::ArenaStringPtr vm_name_;
  ::google::protobuf::internal::ArenaStringPtr config_path_;
  ::google::protobuf::uint64 memory_size_;
  bool tenclass_agent_;
  ::google::protobuf::uint32 vcpu_count_;
  bool debug_;
  bool hypervisor_;
  bool spice_agent_;
  bool qemu_agent_;
  mutable int _cached_size_;
  friend struct ::protobuf_sweet_2eproto::TableStruct;
  friend void ::protobuf_sweet_2eproto::InitDefaultsQueryStatusResponseImpl();
};
// -------------------------------------------------------------------

class SerialPortStatusEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.SerialPortStatusEvent) */ {
 public:
  SerialPortStatusEvent();
  virtual ~SerialPortStatusEvent();

  SerialPortStatusEvent(const SerialPortStatusEvent& from);

  inline SerialPortStatusEvent& operator=(const SerialPortStatusEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SerialPortStatusEvent(SerialPortStatusEvent&& from) noexcept
    : SerialPortStatusEvent() {
    *this = ::std::move(from);
  }

  inline SerialPortStatusEvent& operator=(SerialPortStatusEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SerialPortStatusEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SerialPortStatusEvent* internal_default_instance() {
    return reinterpret_cast<const SerialPortStatusEvent*>(
               &_SerialPortStatusEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SerialPortStatusEvent* other);
  friend void swap(SerialPortStatusEvent& a, SerialPortStatusEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SerialPortStatusEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  SerialPortStatusEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SerialPortStatusEvent& from);
  void MergeFrom(const SerialPortStatusEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SerialPortStatusEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string port_name = 1;
  void clear_port_name();
  static const int kPortNameFieldNumber = 1;
  const ::std::string& port_name() const;
  void set_port_name(const ::std::string& value);
  #if LANG_CXX11
  void set_port_name(::std::string&& value);
  #endif
  void set_port_name(const char* value);
  void set_port_name(const char* value, size_t size);
  ::std::string* mutable_port_name();
  ::std::string* release_port_name();
  void set_allocated_port_name(::std::string* port_name);

  // bool ready = 2;
  void clear_ready();
  static const int kReadyFieldNumber = 2;
  bool ready() const;
  void set_ready(bool value);

  // @@protoc_insertion_point(class_scope:SweetProtocol.SerialPortStatusEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr port_name_;
  bool ready_;
  mutable int _cached_size_;
  friend struct ::protobuf_sweet_2eproto::TableStruct;
  friend void ::protobuf_sweet_2eproto::InitDefaultsSerialPortStatusEventImpl();
};
// -------------------------------------------------------------------

class SaveMachineOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.SaveMachineOptions) */ {
 public:
  SaveMachineOptions();
  virtual ~SaveMachineOptions();

  SaveMachineOptions(const SaveMachineOptions& from);

  inline SaveMachineOptions& operator=(const SaveMachineOptions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SaveMachineOptions(SaveMachineOptions&& from) noexcept
    : SaveMachineOptions() {
    *this = ::std::move(from);
  }

  inline SaveMachineOptions& operator=(SaveMachineOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveMachineOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SaveMachineOptions* internal_default_instance() {
    return reinterpret_cast<const SaveMachineOptions*>(
               &_SaveMachineOptions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SaveMachineOptions* other);
  friend void swap(SaveMachineOptions& a, SaveMachineOptions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SaveMachineOptions* New() const PROTOBUF_FINAL { return New(NULL); }

  SaveMachineOptions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SaveMachineOptions& from);
  void MergeFrom(const SaveMachineOptions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SaveMachineOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:SweetProtocol.SaveMachineOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend struct ::protobuf_sweet_2eproto::TableStruct;
  friend void ::protobuf_sweet_2eproto::InitDefaultsSaveMachineOptionsImpl();
};
// -------------------------------------------------------------------

class SendKeyboardInput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.SendKeyboardInput) */ {
 public:
  SendKeyboardInput();
  virtual ~SendKeyboardInput();

  SendKeyboardInput(const SendKeyboardInput& from);

  inline SendKeyboardInput& operator=(const SendKeyboardInput& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendKeyboardInput(SendKeyboardInput&& from) noexcept
    : SendKeyboardInput() {
    *this = ::std::move(from);
  }

  inline SendKeyboardInput& operator=(SendKeyboardInput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendKeyboardInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendKeyboardInput* internal_default_instance() {
    return reinterpret_cast<const SendKeyboardInput*>(
               &_SendKeyboardInput_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(SendKeyboardInput* other);
  friend void swap(SendKeyboardInput& a, SendKeyboardInput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendKeyboardInput* New() const PROTOBUF_FINAL { return New(NULL); }

  SendKeyboardInput* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendKeyboardInput& from);
  void MergeFrom(const SendKeyboardInput& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendKeyboardInput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 scancode = 1;
  void clear_scancode();
  static const int kScancodeFieldNumber = 1;
  ::google::protobuf::uint32 scancode() const;
  void set_scancode(::google::protobuf::uint32 value);

  // bool pressed = 2;
  void clear_pressed();
  static const int kPressedFieldNumber = 2;
  bool pressed() const;
  void set_pressed(bool value);

  // uint32 modifiers = 3;
  void clear_modifiers();
  static const int kModifiersFieldNumber = 3;
  ::google::protobuf::uint32 modifiers() const;
  void set_modifiers(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SweetProtocol.SendKeyboardInput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 scancode_;
  bool pressed_;
  ::google::protobuf::uint32 modifiers_;
  mutable int _cached_size_;
  friend struct ::protobuf_sweet_2eproto::TableStruct;
  friend void ::protobuf_sweet_2eproto::InitDefaultsSendKeyboardInputImpl();
};
// -------------------------------------------------------------------

class SendMidiInput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.SendMidiInput) */ {
 public:
  SendMidiInput();
  virtual ~SendMidiInput();

  SendMidiInput(const SendMidiInput& from);

  inline SendMidiInput& operator=(const SendMidiInput& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendMidiInput(SendMidiInput&& from) noexcept
    : SendMidiInput() {
    *this = ::std::move(from);
  }

  inline SendMidiInput& operator=(SendMidiInput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendMidiInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendMidiInput* internal_default_instance() {
    return reinterpret_cast<const SendMidiInput*>(
               &_SendMidiInput_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(SendMidiInput* other);
  friend void swap(SendMidiInput& a, SendMidiInput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendMidiInput* New() const PROTOBUF_FINAL { return New(NULL); }

  SendMidiInput* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendMidiInput& from);
  void MergeFrom(const SendMidiInput& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendMidiInput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 cable_code_index = 1;
  void clear_cable_code_index();
  static const int kCableCodeIndexFieldNumber = 1;
  ::google::protobuf::uint32 cable_code_index() const;
  void set_cable_code_index(::google::protobuf::uint32 value);

  // uint32 midi_0 = 2;
  void clear_midi_0();
  static const int kMidi0FieldNumber = 2;
  ::google::protobuf::uint32 midi_0() const;
  void set_midi_0(::google::protobuf::uint32 value);

  // uint32 midi_1 = 3;
  void clear_midi_1();
  static const int kMidi1FieldNumber = 3;
  ::google::protobuf::uint32 midi_1() const;
  void set_midi_1(::google::protobuf::uint32 value);

  // uint32 midi_2 = 4;
  void clear_midi_2();
  static const int kMidi2FieldNumber = 4;
  ::google::protobuf::uint32 midi_2() const;
  void set_midi_2(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SweetProtocol.SendMidiInput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 cable_code_index_;
  ::google::protobuf::uint32 midi_0_;
  ::google::protobuf::uint32 midi_1_;
  ::google::protobuf::uint32 midi_2_;
  mutable int _cached_size_;
  friend struct ::protobuf_sweet_2eproto::TableStruct;
  friend void ::protobuf_sweet_2eproto::InitDefaultsSendMidiInputImpl();
};
// -------------------------------------------------------------------

class SendPointerInput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.SendPointerInput) */ {
 public:
  SendPointerInput();
  virtual ~SendPointerInput();

  SendPointerInput(const SendPointerInput& from);

  inline SendPointerInput& operator=(const SendPointerInput& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendPointerInput(SendPointerInput&& from) noexcept
    : SendPointerInput() {
    *this = ::std::move(from);
  }

  inline SendPointerInput& operator=(SendPointerInput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendPointerInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendPointerInput* internal_default_instance() {
    return reinterpret_cast<const SendPointerInput*>(
               &_SendPointerInput_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(SendPointerInput* other);
  friend void swap(SendPointerInput& a, SendPointerInput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendPointerInput* New() const PROTOBUF_FINAL { return New(NULL); }

  SendPointerInput* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendPointerInput& from);
  void MergeFrom(const SendPointerInput& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendPointerInput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SendPointerInput_PointerButtonBit PointerButtonBit;
  static const PointerButtonBit LEFT =
    SendPointerInput_PointerButtonBit_LEFT;
  static const PointerButtonBit MIDDLE =
    SendPointerInput_PointerButtonBit_MIDDLE;
  static const PointerButtonBit RIGHT =
    SendPointerInput_PointerButtonBit_RIGHT;
  static inline bool PointerButtonBit_IsValid(int value) {
    return SendPointerInput_PointerButtonBit_IsValid(value);
  }
  static const PointerButtonBit PointerButtonBit_MIN =
    SendPointerInput_PointerButtonBit_PointerButtonBit_MIN;
  static const PointerButtonBit PointerButtonBit_MAX =
    SendPointerInput_PointerButtonBit_PointerButtonBit_MAX;
  static const int PointerButtonBit_ARRAYSIZE =
    SendPointerInput_PointerButtonBit_PointerButtonBit_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PointerButtonBit_descriptor() {
    return SendPointerInput_PointerButtonBit_descriptor();
  }
  static inline const ::std::string& PointerButtonBit_Name(PointerButtonBit value) {
    return SendPointerInput_PointerButtonBit_Name(value);
  }
  static inline bool PointerButtonBit_Parse(const ::std::string& name,
      PointerButtonBit* value) {
    return SendPointerInput_PointerButtonBit_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 buttons = 1;
  void clear_buttons();
  static const int kButtonsFieldNumber = 1;
  ::google::protobuf::uint32 buttons() const;
  void set_buttons(::google::protobuf::uint32 value);

  // int32 x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // int32 z = 4;
  void clear_z();
  static const int kZFieldNumber = 4;
  ::google::protobuf::int32 z() const;
  void set_z(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SweetProtocol.SendPointerInput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 buttons_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;
  mutable int _cached_size_;
  friend struct ::protobuf_sweet_2eproto::TableStruct;
  friend void ::protobuf_sweet_2eproto::InitDefaultsSendPointerInputImpl();
};
// -------------------------------------------------------------------

class QueryScreeenshot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.QueryScreeenshot) */ {
 public:
  QueryScreeenshot();
  virtual ~QueryScreeenshot();

  QueryScreeenshot(const QueryScreeenshot& from);

  inline QueryScreeenshot& operator=(const QueryScreeenshot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryScreeenshot(QueryScreeenshot&& from) noexcept
    : QueryScreeenshot() {
    *this = ::std::move(from);
  }

  inline QueryScreeenshot& operator=(QueryScreeenshot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryScreeenshot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryScreeenshot* internal_default_instance() {
    return reinterpret_cast<const QueryScreeenshot*>(
               &_QueryScreeenshot_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(QueryScreeenshot* other);
  friend void swap(QueryScreeenshot& a, QueryScreeenshot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryScreeenshot* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryScreeenshot* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryScreeenshot& from);
  void MergeFrom(const QueryScreeenshot& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryScreeenshot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string format = 1;
  void clear_format();
  static const int kFormatFieldNumber = 1;
  const ::std::string& format() const;
  void set_format(const ::std::string& value);
  #if LANG_CXX11
  void set_format(::std::string&& value);
  #endif
  void set_format(const char* value);
  void set_format(const char* value, size_t size);
  ::std::string* mutable_format();
  ::std::string* release_format();
  void set_allocated_format(::std::string* format);

  // uint32 width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SweetProtocol.QueryScreeenshot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr format_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  mutable int _cached_size_;
  friend struct ::protobuf_sweet_2eproto::TableStruct;
  friend void ::protobuf_sweet_2eproto::InitDefaultsQueryScreeenshotImpl();
};
// -------------------------------------------------------------------

class QueryScreenshotResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.QueryScreenshotResponse) */ {
 public:
  QueryScreenshotResponse();
  virtual ~QueryScreenshotResponse();

  QueryScreenshotResponse(const QueryScreenshotResponse& from);

  inline QueryScreenshotResponse& operator=(const QueryScreenshotResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryScreenshotResponse(QueryScreenshotResponse&& from) noexcept
    : QueryScreenshotResponse() {
    *this = ::std::move(from);
  }

  inline QueryScreenshotResponse& operator=(QueryScreenshotResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryScreenshotResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryScreenshotResponse* internal_default_instance() {
    return reinterpret_cast<const QueryScreenshotResponse*>(
               &_QueryScreenshotResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(QueryScreenshotResponse* other);
  friend void swap(QueryScreenshotResponse& a, QueryScreenshotResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryScreenshotResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryScreenshotResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryScreenshotResponse& from);
  void MergeFrom(const QueryScreenshotResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryScreenshotResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string format = 1;
  void clear_format();
  static const int kFormatFieldNumber = 1;
  const ::std::string& format() const;
  void set_format(const ::std::string& value);
  #if LANG_CXX11
  void set_format(::std::string&& value);
  #endif
  void set_format(const char* value);
  void set_format(const char* value, size_t size);
  ::std::string* mutable_format();
  ::std::string* release_format();
  void set_allocated_format(::std::string* format);

  // bytes data = 4;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint32 width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SweetProtocol.QueryScreenshotResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr format_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  mutable int _cached_size_;
  friend struct ::protobuf_sweet_2eproto::TableStruct;
  friend void ::protobuf_sweet_2eproto::InitDefaultsQueryScreenshotResponseImpl();
};
// -------------------------------------------------------------------

class MonitorsConfig_Monitor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.MonitorsConfig.Monitor) */ {
 public:
  MonitorsConfig_Monitor();
  virtual ~MonitorsConfig_Monitor();

  MonitorsConfig_Monitor(const MonitorsConfig_Monitor& from);

  inline MonitorsConfig_Monitor& operator=(const MonitorsConfig_Monitor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MonitorsConfig_Monitor(MonitorsConfig_Monitor&& from) noexcept
    : MonitorsConfig_Monitor() {
    *this = ::std::move(from);
  }

  inline MonitorsConfig_Monitor& operator=(MonitorsConfig_Monitor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MonitorsConfig_Monitor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MonitorsConfig_Monitor* internal_default_instance() {
    return reinterpret_cast<const MonitorsConfig_Monitor*>(
               &_MonitorsConfig_Monitor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(MonitorsConfig_Monitor* other);
  friend void swap(MonitorsConfig_Monitor& a, MonitorsConfig_Monitor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MonitorsConfig_Monitor* New() const PROTOBUF_FINAL { return New(NULL); }

  MonitorsConfig_Monitor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MonitorsConfig_Monitor& from);
  void MergeFrom(const MonitorsConfig_Monitor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MonitorsConfig_Monitor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // uint32 left = 2;
  void clear_left();
  static const int kLeftFieldNumber = 2;
  ::google::protobuf::uint32 left() const;
  void set_left(::google::protobuf::uint32 value);

  // uint32 top = 3;
  void clear_top();
  static const int kTopFieldNumber = 3;
  ::google::protobuf::uint32 top() const;
  void set_top(::google::protobuf::uint32 value);

  // uint32 width = 4;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 5;
  void clear_height();
  static const int kHeightFieldNumber = 5;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // uint32 depth = 6;
  void clear_depth();
  static const int kDepthFieldNumber = 6;
  ::google::protobuf::uint32 depth() const;
  void set_depth(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SweetProtocol.MonitorsConfig.Monitor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 left_;
  ::google::protobuf::uint32 top_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 depth_;
  mutable int _cached_size_;
  friend struct ::protobuf_sweet_2eproto::TableStruct;
  friend void ::protobuf_sweet_2eproto::InitDefaultsMonitorsConfig_MonitorImpl();
};
// -------------------------------------------------------------------

class MonitorsConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.MonitorsConfig) */ {
 public:
  MonitorsConfig();
  virtual ~MonitorsConfig();

  MonitorsConfig(const MonitorsConfig& from);

  inline MonitorsConfig& operator=(const MonitorsConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MonitorsConfig(MonitorsConfig&& from) noexcept
    : MonitorsConfig() {
    *this = ::std::move(from);
  }

  inline MonitorsConfig& operator=(MonitorsConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MonitorsConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MonitorsConfig* internal_default_instance() {
    return reinterpret_cast<const MonitorsConfig*>(
               &_MonitorsConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(MonitorsConfig* other);
  friend void swap(MonitorsConfig& a, MonitorsConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MonitorsConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  MonitorsConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MonitorsConfig& from);
  void MergeFrom(const MonitorsConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MonitorsConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MonitorsConfig_Monitor Monitor;

  // accessors -------------------------------------------------------

  // repeated .SweetProtocol.MonitorsConfig.Monitor monitors = 2;
  int monitors_size() const;
  void clear_monitors();
  static const int kMonitorsFieldNumber = 2;
  const ::SweetProtocol::MonitorsConfig_Monitor& monitors(int index) const;
  ::SweetProtocol::MonitorsConfig_Monitor* mutable_monitors(int index);
  ::SweetProtocol::MonitorsConfig_Monitor* add_monitors();
  ::google::protobuf::RepeatedPtrField< ::SweetProtocol::MonitorsConfig_Monitor >*
      mutable_monitors();
  const ::google::protobuf::RepeatedPtrField< ::SweetProtocol::MonitorsConfig_Monitor >&
      monitors() const;

  // uint32 count = 1;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SweetProtocol.MonitorsConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::SweetProtocol::MonitorsConfig_Monitor > monitors_;
  ::google::protobuf::uint32 count_;
  mutable int _cached_size_;
  friend struct ::protobuf_sweet_2eproto::TableStruct;
  friend void ::protobuf_sweet_2eproto::InitDefaultsMonitorsConfigImpl();
};
// -------------------------------------------------------------------

class SetCursorEvent_CursorShape : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.SetCursorEvent.CursorShape) */ {
 public:
  SetCursorEvent_CursorShape();
  virtual ~SetCursorEvent_CursorShape();

  SetCursorEvent_CursorShape(const SetCursorEvent_CursorShape& from);

  inline SetCursorEvent_CursorShape& operator=(const SetCursorEvent_CursorShape& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetCursorEvent_CursorShape(SetCursorEvent_CursorShape&& from) noexcept
    : SetCursorEvent_CursorShape() {
    *this = ::std::move(from);
  }

  inline SetCursorEvent_CursorShape& operator=(SetCursorEvent_CursorShape&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetCursorEvent_CursorShape& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetCursorEvent_CursorShape* internal_default_instance() {
    return reinterpret_cast<const SetCursorEvent_CursorShape*>(
               &_SetCursorEvent_CursorShape_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(SetCursorEvent_CursorShape* other);
  friend void swap(SetCursorEvent_CursorShape& a, SetCursorEvent_CursorShape& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetCursorEvent_CursorShape* New() const PROTOBUF_FINAL { return New(NULL); }

  SetCursorEvent_CursorShape* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetCursorEvent_CursorShape& from);
  void MergeFrom(const SetCursorEvent_CursorShape& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetCursorEvent_CursorShape* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 6;
  void clear_data();
  static const int kDataFieldNumber = 6;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // int32 hotspot_x = 3;
  void clear_hotspot_x();
  static const int kHotspotXFieldNumber = 3;
  ::google::protobuf::int32 hotspot_x() const;
  void set_hotspot_x(::google::protobuf::int32 value);

  // int32 hotspot_y = 4;
  void clear_hotspot_y();
  static const int kHotspotYFieldNumber = 4;
  ::google::protobuf::int32 hotspot_y() const;
  void set_hotspot_y(::google::protobuf::int32 value);

  // uint32 type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SweetProtocol.SetCursorEvent.CursorShape)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::int32 hotspot_x_;
  ::google::protobuf::int32 hotspot_y_;
  ::google::protobuf::uint32 type_;
  mutable int _cached_size_;
  friend struct ::protobuf_sweet_2eproto::TableStruct;
  friend void ::protobuf_sweet_2eproto::InitDefaultsSetCursorEvent_CursorShapeImpl();
};
// -------------------------------------------------------------------

class SetCursorEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.SetCursorEvent) */ {
 public:
  SetCursorEvent();
  virtual ~SetCursorEvent();

  SetCursorEvent(const SetCursorEvent& from);

  inline SetCursorEvent& operator=(const SetCursorEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetCursorEvent(SetCursorEvent&& from) noexcept
    : SetCursorEvent() {
    *this = ::std::move(from);
  }

  inline SetCursorEvent& operator=(SetCursorEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetCursorEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetCursorEvent* internal_default_instance() {
    return reinterpret_cast<const SetCursorEvent*>(
               &_SetCursorEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(SetCursorEvent* other);
  friend void swap(SetCursorEvent& a, SetCursorEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetCursorEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  SetCursorEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetCursorEvent& from);
  void MergeFrom(const SetCursorEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetCursorEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SetCursorEvent_CursorShape CursorShape;

  // accessors -------------------------------------------------------

  // .SweetProtocol.SetCursorEvent.CursorShape shape = 4;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 4;
  const ::SweetProtocol::SetCursorEvent_CursorShape& shape() const;
  ::SweetProtocol::SetCursorEvent_CursorShape* release_shape();
  ::SweetProtocol::SetCursorEvent_CursorShape* mutable_shape();
  void set_allocated_shape(::SweetProtocol::SetCursorEvent_CursorShape* shape);

  // bool visible = 1;
  void clear_visible();
  static const int kVisibleFieldNumber = 1;
  bool visible() const;
  void set_visible(bool value);

  // int32 x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SweetProtocol.SetCursorEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::SweetProtocol::SetCursorEvent_CursorShape* shape_;
  bool visible_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  mutable int _cached_size_;
  friend struct ::protobuf_sweet_2eproto::TableStruct;
  friend void ::protobuf_sweet_2eproto::InitDefaultsSetCursorEventImpl();
};
// -------------------------------------------------------------------

class DisplayStreamConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.DisplayStreamConfig) */ {
 public:
  DisplayStreamConfig();
  virtual ~DisplayStreamConfig();

  DisplayStreamConfig(const DisplayStreamConfig& from);

  inline DisplayStreamConfig& operator=(const DisplayStreamConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DisplayStreamConfig(DisplayStreamConfig&& from) noexcept
    : DisplayStreamConfig() {
    *this = ::std::move(from);
  }

  inline DisplayStreamConfig& operator=(DisplayStreamConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DisplayStreamConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisplayStreamConfig* internal_default_instance() {
    return reinterpret_cast<const DisplayStreamConfig*>(
               &_DisplayStreamConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(DisplayStreamConfig* other);
  friend void swap(DisplayStreamConfig& a, DisplayStreamConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DisplayStreamConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  DisplayStreamConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DisplayStreamConfig& from);
  void MergeFrom(const DisplayStreamConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DisplayStreamConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string codec = 1;
  void clear_codec();
  static const int kCodecFieldNumber = 1;
  const ::std::string& codec() const;
  void set_codec(const ::std::string& value);
  #if LANG_CXX11
  void set_codec(::std::string&& value);
  #endif
  void set_codec(const char* value);
  void set_codec(const char* value, size_t size);
  ::std::string* mutable_codec();
  ::std::string* release_codec();
  void set_allocated_codec(::std::string* codec);

  // string profile = 2;
  void clear_profile();
  static const int kProfileFieldNumber = 2;
  const ::std::string& profile() const;
  void set_profile(const ::std::string& value);
  #if LANG_CXX11
  void set_profile(::std::string&& value);
  #endif
  void set_profile(const char* value);
  void set_profile(const char* value, size_t size);
  ::std::string* mutable_profile();
  ::std::string* release_profile();
  void set_allocated_profile(::std::string* profile);

  // string preset = 3;
  void clear_preset();
  static const int kPresetFieldNumber = 3;
  const ::std::string& preset() const;
  void set_preset(const ::std::string& value);
  #if LANG_CXX11
  void set_preset(::std::string&& value);
  #endif
  void set_preset(const char* value);
  void set_preset(const char* value, size_t size);
  ::std::string* mutable_preset();
  ::std::string* release_preset();
  void set_allocated_preset(::std::string* preset);

  // string rate_control = 4;
  void clear_rate_control();
  static const int kRateControlFieldNumber = 4;
  const ::std::string& rate_control() const;
  void set_rate_control(const ::std::string& value);
  #if LANG_CXX11
  void set_rate_control(::std::string&& value);
  #endif
  void set_rate_control(const char* value);
  void set_rate_control(const char* value, size_t size);
  ::std::string* mutable_rate_control();
  ::std::string* release_rate_control();
  void set_allocated_rate_control(::std::string* rate_control);

  // uint32 fps = 5;
  void clear_fps();
  static const int kFpsFieldNumber = 5;
  ::google::protobuf::uint32 fps() const;
  void set_fps(::google::protobuf::uint32 value);

  // uint32 bitrate = 6;
  void clear_bitrate();
  static const int kBitrateFieldNumber = 6;
  ::google::protobuf::uint32 bitrate() const;
  void set_bitrate(::google::protobuf::uint32 value);

  // uint32 qmin = 7;
  void clear_qmin();
  static const int kQminFieldNumber = 7;
  ::google::protobuf::uint32 qmin() const;
  void set_qmin(::google::protobuf::uint32 value);

  // uint32 threads = 8;
  void clear_threads();
  static const int kThreadsFieldNumber = 8;
  ::google::protobuf::uint32 threads() const;
  void set_threads(::google::protobuf::uint32 value);

  // uint32 flags = 9;
  void clear_flags();
  static const int kFlagsFieldNumber = 9;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SweetProtocol.DisplayStreamConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr codec_;
  ::google::protobuf::internal::ArenaStringPtr profile_;
  ::google::protobuf::internal::ArenaStringPtr preset_;
  ::google::protobuf::internal::ArenaStringPtr rate_control_;
  ::google::protobuf::uint32 fps_;
  ::google::protobuf::uint32 bitrate_;
  ::google::protobuf::uint32 qmin_;
  ::google::protobuf::uint32 threads_;
  ::google::protobuf::uint32 flags_;
  mutable int _cached_size_;
  friend struct ::protobuf_sweet_2eproto::TableStruct;
  friend void ::protobuf_sweet_2eproto::InitDefaultsDisplayStreamConfigImpl();
};
// -------------------------------------------------------------------

class PlaybackStreamConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.PlaybackStreamConfig) */ {
 public:
  PlaybackStreamConfig();
  virtual ~PlaybackStreamConfig();

  PlaybackStreamConfig(const PlaybackStreamConfig& from);

  inline PlaybackStreamConfig& operator=(const PlaybackStreamConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlaybackStreamConfig(PlaybackStreamConfig&& from) noexcept
    : PlaybackStreamConfig() {
    *this = ::std::move(from);
  }

  inline PlaybackStreamConfig& operator=(PlaybackStreamConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlaybackStreamConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaybackStreamConfig* internal_default_instance() {
    return reinterpret_cast<const PlaybackStreamConfig*>(
               &_PlaybackStreamConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(PlaybackStreamConfig* other);
  friend void swap(PlaybackStreamConfig& a, PlaybackStreamConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlaybackStreamConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  PlaybackStreamConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlaybackStreamConfig& from);
  void MergeFrom(const PlaybackStreamConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlaybackStreamConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string codec = 1;
  void clear_codec();
  static const int kCodecFieldNumber = 1;
  const ::std::string& codec() const;
  void set_codec(const ::std::string& value);
  #if LANG_CXX11
  void set_codec(::std::string&& value);
  #endif
  void set_codec(const char* value);
  void set_codec(const char* value, size_t size);
  ::std::string* mutable_codec();
  ::std::string* release_codec();
  void set_allocated_codec(::std::string* codec);

  // @@protoc_insertion_point(class_scope:SweetProtocol.PlaybackStreamConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr codec_;
  mutable int _cached_size_;
  friend struct ::protobuf_sweet_2eproto::TableStruct;
  friend void ::protobuf_sweet_2eproto::InitDefaultsPlaybackStreamConfigImpl();
};
// -------------------------------------------------------------------

class DisplayStreamStartEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.DisplayStreamStartEvent) */ {
 public:
  DisplayStreamStartEvent();
  virtual ~DisplayStreamStartEvent();

  DisplayStreamStartEvent(const DisplayStreamStartEvent& from);

  inline DisplayStreamStartEvent& operator=(const DisplayStreamStartEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DisplayStreamStartEvent(DisplayStreamStartEvent&& from) noexcept
    : DisplayStreamStartEvent() {
    *this = ::std::move(from);
  }

  inline DisplayStreamStartEvent& operator=(DisplayStreamStartEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DisplayStreamStartEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisplayStreamStartEvent* internal_default_instance() {
    return reinterpret_cast<const DisplayStreamStartEvent*>(
               &_DisplayStreamStartEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(DisplayStreamStartEvent* other);
  friend void swap(DisplayStreamStartEvent& a, DisplayStreamStartEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DisplayStreamStartEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  DisplayStreamStartEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DisplayStreamStartEvent& from);
  void MergeFrom(const DisplayStreamStartEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DisplayStreamStartEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SweetProtocol.DisplayStreamStartEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  mutable int _cached_size_;
  friend struct ::protobuf_sweet_2eproto::TableStruct;
  friend void ::protobuf_sweet_2eproto::InitDefaultsDisplayStreamStartEventImpl();
};
// -------------------------------------------------------------------

class PlaybackStreamStartEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.PlaybackStreamStartEvent) */ {
 public:
  PlaybackStreamStartEvent();
  virtual ~PlaybackStreamStartEvent();

  PlaybackStreamStartEvent(const PlaybackStreamStartEvent& from);

  inline PlaybackStreamStartEvent& operator=(const PlaybackStreamStartEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlaybackStreamStartEvent(PlaybackStreamStartEvent&& from) noexcept
    : PlaybackStreamStartEvent() {
    *this = ::std::move(from);
  }

  inline PlaybackStreamStartEvent& operator=(PlaybackStreamStartEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlaybackStreamStartEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaybackStreamStartEvent* internal_default_instance() {
    return reinterpret_cast<const PlaybackStreamStartEvent*>(
               &_PlaybackStreamStartEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(PlaybackStreamStartEvent* other);
  friend void swap(PlaybackStreamStartEvent& a, PlaybackStreamStartEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlaybackStreamStartEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  PlaybackStreamStartEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlaybackStreamStartEvent& from);
  void MergeFrom(const PlaybackStreamStartEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlaybackStreamStartEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string codec = 2;
  void clear_codec();
  static const int kCodecFieldNumber = 2;
  const ::std::string& codec() const;
  void set_codec(const ::std::string& value);
  #if LANG_CXX11
  void set_codec(::std::string&& value);
  #endif
  void set_codec(const char* value);
  void set_codec(const char* value, size_t size);
  ::std::string* mutable_codec();
  ::std::string* release_codec();
  void set_allocated_codec(::std::string* codec);

  // uint32 playback_id = 1;
  void clear_playback_id();
  static const int kPlaybackIdFieldNumber = 1;
  ::google::protobuf::uint32 playback_id() const;
  void set_playback_id(::google::protobuf::uint32 value);

  // uint32 format = 3;
  void clear_format();
  static const int kFormatFieldNumber = 3;
  ::google::protobuf::uint32 format() const;
  void set_format(::google::protobuf::uint32 value);

  // uint32 channels = 4;
  void clear_channels();
  static const int kChannelsFieldNumber = 4;
  ::google::protobuf::uint32 channels() const;
  void set_channels(::google::protobuf::uint32 value);

  // uint32 frequency = 5;
  void clear_frequency();
  static const int kFrequencyFieldNumber = 5;
  ::google::protobuf::uint32 frequency() const;
  void set_frequency(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SweetProtocol.PlaybackStreamStartEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr codec_;
  ::google::protobuf::uint32 playback_id_;
  ::google::protobuf::uint32 format_;
  ::google::protobuf::uint32 channels_;
  ::google::protobuf::uint32 frequency_;
  mutable int _cached_size_;
  friend struct ::protobuf_sweet_2eproto::TableStruct;
  friend void ::protobuf_sweet_2eproto::InitDefaultsPlaybackStreamStartEventImpl();
};
// -------------------------------------------------------------------

class ClipboardDataToGuest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.ClipboardDataToGuest) */ {
 public:
  ClipboardDataToGuest();
  virtual ~ClipboardDataToGuest();

  ClipboardDataToGuest(const ClipboardDataToGuest& from);

  inline ClipboardDataToGuest& operator=(const ClipboardDataToGuest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClipboardDataToGuest(ClipboardDataToGuest&& from) noexcept
    : ClipboardDataToGuest() {
    *this = ::std::move(from);
  }

  inline ClipboardDataToGuest& operator=(ClipboardDataToGuest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClipboardDataToGuest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClipboardDataToGuest* internal_default_instance() {
    return reinterpret_cast<const ClipboardDataToGuest*>(
               &_ClipboardDataToGuest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(ClipboardDataToGuest* other);
  friend void swap(ClipboardDataToGuest& a, ClipboardDataToGuest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClipboardDataToGuest* New() const PROTOBUF_FINAL { return New(NULL); }

  ClipboardDataToGuest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClipboardDataToGuest& from);
  void MergeFrom(const ClipboardDataToGuest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClipboardDataToGuest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // string file_name = 3;
  void clear_file_name();
  static const int kFileNameFieldNumber = 3;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // .SweetProtocol.ClipboardDataType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::SweetProtocol::ClipboardDataType type() const;
  void set_type(::SweetProtocol::ClipboardDataType value);

  // @@protoc_insertion_point(class_scope:SweetProtocol.ClipboardDataToGuest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_sweet_2eproto::TableStruct;
  friend void ::protobuf_sweet_2eproto::InitDefaultsClipboardDataToGuestImpl();
};
// -------------------------------------------------------------------

class ClipboardStreamDataEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SweetProtocol.ClipboardStreamDataEvent) */ {
 public:
  ClipboardStreamDataEvent();
  virtual ~ClipboardStreamDataEvent();

  ClipboardStreamDataEvent(const ClipboardStreamDataEvent& from);

  inline ClipboardStreamDataEvent& operator=(const ClipboardStreamDataEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClipboardStreamDataEvent(ClipboardStreamDataEvent&& from) noexcept
    : ClipboardStreamDataEvent() {
    *this = ::std::move(from);
  }

  inline ClipboardStreamDataEvent& operator=(ClipboardStreamDataEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClipboardStreamDataEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClipboardStreamDataEvent* internal_default_instance() {
    return reinterpret_cast<const ClipboardStreamDataEvent*>(
               &_ClipboardStreamDataEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(ClipboardStreamDataEvent* other);
  friend void swap(ClipboardStreamDataEvent& a, ClipboardStreamDataEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClipboardStreamDataEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  ClipboardStreamDataEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClipboardStreamDataEvent& from);
  void MergeFrom(const ClipboardStreamDataEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClipboardStreamDataEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // string file_name = 3;
  void clear_file_name();
  static const int kFileNameFieldNumber = 3;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // .SweetProtocol.ClipboardDataType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::SweetProtocol::ClipboardDataType type() const;
  void set_type(::SweetProtocol::ClipboardDataType value);

  // @@protoc_insertion_point(class_scope:SweetProtocol.ClipboardStreamDataEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_sweet_2eproto::TableStruct;
  friend void ::protobuf_sweet_2eproto::InitDefaultsClipboardStreamDataEventImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QueryStatusResponse

// bool debug = 1;
inline void QueryStatusResponse::clear_debug() {
  debug_ = false;
}
inline bool QueryStatusResponse::debug() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryStatusResponse.debug)
  return debug_;
}
inline void QueryStatusResponse::set_debug(bool value) {
  
  debug_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryStatusResponse.debug)
}

// bool hypervisor = 2;
inline void QueryStatusResponse::clear_hypervisor() {
  hypervisor_ = false;
}
inline bool QueryStatusResponse::hypervisor() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryStatusResponse.hypervisor)
  return hypervisor_;
}
inline void QueryStatusResponse::set_hypervisor(bool value) {
  
  hypervisor_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryStatusResponse.hypervisor)
}

// string status = 3;
inline void QueryStatusResponse::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryStatusResponse::status() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryStatusResponse.status)
  return status_.GetNoArena();
}
inline void QueryStatusResponse::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryStatusResponse.status)
}
#if LANG_CXX11
inline void QueryStatusResponse::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SweetProtocol.QueryStatusResponse.status)
}
#endif
inline void QueryStatusResponse::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SweetProtocol.QueryStatusResponse.status)
}
inline void QueryStatusResponse::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SweetProtocol.QueryStatusResponse.status)
}
inline ::std::string* QueryStatusResponse::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:SweetProtocol.QueryStatusResponse.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryStatusResponse::release_status() {
  // @@protoc_insertion_point(field_release:SweetProtocol.QueryStatusResponse.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryStatusResponse::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.QueryStatusResponse.status)
}

// uint32 vcpu_count = 4;
inline void QueryStatusResponse::clear_vcpu_count() {
  vcpu_count_ = 0u;
}
inline ::google::protobuf::uint32 QueryStatusResponse::vcpu_count() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryStatusResponse.vcpu_count)
  return vcpu_count_;
}
inline void QueryStatusResponse::set_vcpu_count(::google::protobuf::uint32 value) {
  
  vcpu_count_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryStatusResponse.vcpu_count)
}

// uint64 memory_size = 5;
inline void QueryStatusResponse::clear_memory_size() {
  memory_size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 QueryStatusResponse::memory_size() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryStatusResponse.memory_size)
  return memory_size_;
}
inline void QueryStatusResponse::set_memory_size(::google::protobuf::uint64 value) {
  
  memory_size_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryStatusResponse.memory_size)
}

// string vm_uuid = 6;
inline void QueryStatusResponse::clear_vm_uuid() {
  vm_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryStatusResponse::vm_uuid() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryStatusResponse.vm_uuid)
  return vm_uuid_.GetNoArena();
}
inline void QueryStatusResponse::set_vm_uuid(const ::std::string& value) {
  
  vm_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryStatusResponse.vm_uuid)
}
#if LANG_CXX11
inline void QueryStatusResponse::set_vm_uuid(::std::string&& value) {
  
  vm_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SweetProtocol.QueryStatusResponse.vm_uuid)
}
#endif
inline void QueryStatusResponse::set_vm_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vm_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SweetProtocol.QueryStatusResponse.vm_uuid)
}
inline void QueryStatusResponse::set_vm_uuid(const char* value, size_t size) {
  
  vm_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SweetProtocol.QueryStatusResponse.vm_uuid)
}
inline ::std::string* QueryStatusResponse::mutable_vm_uuid() {
  
  // @@protoc_insertion_point(field_mutable:SweetProtocol.QueryStatusResponse.vm_uuid)
  return vm_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryStatusResponse::release_vm_uuid() {
  // @@protoc_insertion_point(field_release:SweetProtocol.QueryStatusResponse.vm_uuid)
  
  return vm_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryStatusResponse::set_allocated_vm_uuid(::std::string* vm_uuid) {
  if (vm_uuid != NULL) {
    
  } else {
    
  }
  vm_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vm_uuid);
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.QueryStatusResponse.vm_uuid)
}

// string vm_name = 7;
inline void QueryStatusResponse::clear_vm_name() {
  vm_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryStatusResponse::vm_name() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryStatusResponse.vm_name)
  return vm_name_.GetNoArena();
}
inline void QueryStatusResponse::set_vm_name(const ::std::string& value) {
  
  vm_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryStatusResponse.vm_name)
}
#if LANG_CXX11
inline void QueryStatusResponse::set_vm_name(::std::string&& value) {
  
  vm_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SweetProtocol.QueryStatusResponse.vm_name)
}
#endif
inline void QueryStatusResponse::set_vm_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vm_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SweetProtocol.QueryStatusResponse.vm_name)
}
inline void QueryStatusResponse::set_vm_name(const char* value, size_t size) {
  
  vm_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SweetProtocol.QueryStatusResponse.vm_name)
}
inline ::std::string* QueryStatusResponse::mutable_vm_name() {
  
  // @@protoc_insertion_point(field_mutable:SweetProtocol.QueryStatusResponse.vm_name)
  return vm_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryStatusResponse::release_vm_name() {
  // @@protoc_insertion_point(field_release:SweetProtocol.QueryStatusResponse.vm_name)
  
  return vm_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryStatusResponse::set_allocated_vm_name(::std::string* vm_name) {
  if (vm_name != NULL) {
    
  } else {
    
  }
  vm_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vm_name);
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.QueryStatusResponse.vm_name)
}

// string config_path = 8;
inline void QueryStatusResponse::clear_config_path() {
  config_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryStatusResponse::config_path() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryStatusResponse.config_path)
  return config_path_.GetNoArena();
}
inline void QueryStatusResponse::set_config_path(const ::std::string& value) {
  
  config_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryStatusResponse.config_path)
}
#if LANG_CXX11
inline void QueryStatusResponse::set_config_path(::std::string&& value) {
  
  config_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SweetProtocol.QueryStatusResponse.config_path)
}
#endif
inline void QueryStatusResponse::set_config_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  config_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SweetProtocol.QueryStatusResponse.config_path)
}
inline void QueryStatusResponse::set_config_path(const char* value, size_t size) {
  
  config_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SweetProtocol.QueryStatusResponse.config_path)
}
inline ::std::string* QueryStatusResponse::mutable_config_path() {
  
  // @@protoc_insertion_point(field_mutable:SweetProtocol.QueryStatusResponse.config_path)
  return config_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryStatusResponse::release_config_path() {
  // @@protoc_insertion_point(field_release:SweetProtocol.QueryStatusResponse.config_path)
  
  return config_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryStatusResponse::set_allocated_config_path(::std::string* config_path) {
  if (config_path != NULL) {
    
  } else {
    
  }
  config_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config_path);
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.QueryStatusResponse.config_path)
}

// bool spice_agent = 1001;
inline void QueryStatusResponse::clear_spice_agent() {
  spice_agent_ = false;
}
inline bool QueryStatusResponse::spice_agent() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryStatusResponse.spice_agent)
  return spice_agent_;
}
inline void QueryStatusResponse::set_spice_agent(bool value) {
  
  spice_agent_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryStatusResponse.spice_agent)
}

// bool qemu_agent = 1002;
inline void QueryStatusResponse::clear_qemu_agent() {
  qemu_agent_ = false;
}
inline bool QueryStatusResponse::qemu_agent() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryStatusResponse.qemu_agent)
  return qemu_agent_;
}
inline void QueryStatusResponse::set_qemu_agent(bool value) {
  
  qemu_agent_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryStatusResponse.qemu_agent)
}

// bool tenclass_agent = 1005;
inline void QueryStatusResponse::clear_tenclass_agent() {
  tenclass_agent_ = false;
}
inline bool QueryStatusResponse::tenclass_agent() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryStatusResponse.tenclass_agent)
  return tenclass_agent_;
}
inline void QueryStatusResponse::set_tenclass_agent(bool value) {
  
  tenclass_agent_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryStatusResponse.tenclass_agent)
}

// -------------------------------------------------------------------

// SerialPortStatusEvent

// string port_name = 1;
inline void SerialPortStatusEvent::clear_port_name() {
  port_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SerialPortStatusEvent::port_name() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SerialPortStatusEvent.port_name)
  return port_name_.GetNoArena();
}
inline void SerialPortStatusEvent::set_port_name(const ::std::string& value) {
  
  port_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SweetProtocol.SerialPortStatusEvent.port_name)
}
#if LANG_CXX11
inline void SerialPortStatusEvent::set_port_name(::std::string&& value) {
  
  port_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SweetProtocol.SerialPortStatusEvent.port_name)
}
#endif
inline void SerialPortStatusEvent::set_port_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  port_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SweetProtocol.SerialPortStatusEvent.port_name)
}
inline void SerialPortStatusEvent::set_port_name(const char* value, size_t size) {
  
  port_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SweetProtocol.SerialPortStatusEvent.port_name)
}
inline ::std::string* SerialPortStatusEvent::mutable_port_name() {
  
  // @@protoc_insertion_point(field_mutable:SweetProtocol.SerialPortStatusEvent.port_name)
  return port_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SerialPortStatusEvent::release_port_name() {
  // @@protoc_insertion_point(field_release:SweetProtocol.SerialPortStatusEvent.port_name)
  
  return port_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SerialPortStatusEvent::set_allocated_port_name(::std::string* port_name) {
  if (port_name != NULL) {
    
  } else {
    
  }
  port_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), port_name);
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.SerialPortStatusEvent.port_name)
}

// bool ready = 2;
inline void SerialPortStatusEvent::clear_ready() {
  ready_ = false;
}
inline bool SerialPortStatusEvent::ready() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SerialPortStatusEvent.ready)
  return ready_;
}
inline void SerialPortStatusEvent::set_ready(bool value) {
  
  ready_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SerialPortStatusEvent.ready)
}

// -------------------------------------------------------------------

// SaveMachineOptions

// string path = 1;
inline void SaveMachineOptions::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SaveMachineOptions::path() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SaveMachineOptions.path)
  return path_.GetNoArena();
}
inline void SaveMachineOptions::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SweetProtocol.SaveMachineOptions.path)
}
#if LANG_CXX11
inline void SaveMachineOptions::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SweetProtocol.SaveMachineOptions.path)
}
#endif
inline void SaveMachineOptions::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SweetProtocol.SaveMachineOptions.path)
}
inline void SaveMachineOptions::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SweetProtocol.SaveMachineOptions.path)
}
inline ::std::string* SaveMachineOptions::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:SweetProtocol.SaveMachineOptions.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SaveMachineOptions::release_path() {
  // @@protoc_insertion_point(field_release:SweetProtocol.SaveMachineOptions.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaveMachineOptions::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.SaveMachineOptions.path)
}

// -------------------------------------------------------------------

// SendKeyboardInput

// uint32 scancode = 1;
inline void SendKeyboardInput::clear_scancode() {
  scancode_ = 0u;
}
inline ::google::protobuf::uint32 SendKeyboardInput::scancode() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendKeyboardInput.scancode)
  return scancode_;
}
inline void SendKeyboardInput::set_scancode(::google::protobuf::uint32 value) {
  
  scancode_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SendKeyboardInput.scancode)
}

// bool pressed = 2;
inline void SendKeyboardInput::clear_pressed() {
  pressed_ = false;
}
inline bool SendKeyboardInput::pressed() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendKeyboardInput.pressed)
  return pressed_;
}
inline void SendKeyboardInput::set_pressed(bool value) {
  
  pressed_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SendKeyboardInput.pressed)
}

// uint32 modifiers = 3;
inline void SendKeyboardInput::clear_modifiers() {
  modifiers_ = 0u;
}
inline ::google::protobuf::uint32 SendKeyboardInput::modifiers() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendKeyboardInput.modifiers)
  return modifiers_;
}
inline void SendKeyboardInput::set_modifiers(::google::protobuf::uint32 value) {
  
  modifiers_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SendKeyboardInput.modifiers)
}

// -------------------------------------------------------------------

// SendMidiInput

// uint32 cable_code_index = 1;
inline void SendMidiInput::clear_cable_code_index() {
  cable_code_index_ = 0u;
}
inline ::google::protobuf::uint32 SendMidiInput::cable_code_index() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendMidiInput.cable_code_index)
  return cable_code_index_;
}
inline void SendMidiInput::set_cable_code_index(::google::protobuf::uint32 value) {
  
  cable_code_index_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SendMidiInput.cable_code_index)
}

// uint32 midi_0 = 2;
inline void SendMidiInput::clear_midi_0() {
  midi_0_ = 0u;
}
inline ::google::protobuf::uint32 SendMidiInput::midi_0() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendMidiInput.midi_0)
  return midi_0_;
}
inline void SendMidiInput::set_midi_0(::google::protobuf::uint32 value) {
  
  midi_0_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SendMidiInput.midi_0)
}

// uint32 midi_1 = 3;
inline void SendMidiInput::clear_midi_1() {
  midi_1_ = 0u;
}
inline ::google::protobuf::uint32 SendMidiInput::midi_1() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendMidiInput.midi_1)
  return midi_1_;
}
inline void SendMidiInput::set_midi_1(::google::protobuf::uint32 value) {
  
  midi_1_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SendMidiInput.midi_1)
}

// uint32 midi_2 = 4;
inline void SendMidiInput::clear_midi_2() {
  midi_2_ = 0u;
}
inline ::google::protobuf::uint32 SendMidiInput::midi_2() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendMidiInput.midi_2)
  return midi_2_;
}
inline void SendMidiInput::set_midi_2(::google::protobuf::uint32 value) {
  
  midi_2_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SendMidiInput.midi_2)
}

// -------------------------------------------------------------------

// SendPointerInput

// uint32 buttons = 1;
inline void SendPointerInput::clear_buttons() {
  buttons_ = 0u;
}
inline ::google::protobuf::uint32 SendPointerInput::buttons() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendPointerInput.buttons)
  return buttons_;
}
inline void SendPointerInput::set_buttons(::google::protobuf::uint32 value) {
  
  buttons_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SendPointerInput.buttons)
}

// int32 x = 2;
inline void SendPointerInput::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 SendPointerInput::x() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendPointerInput.x)
  return x_;
}
inline void SendPointerInput::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SendPointerInput.x)
}

// int32 y = 3;
inline void SendPointerInput::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 SendPointerInput::y() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendPointerInput.y)
  return y_;
}
inline void SendPointerInput::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SendPointerInput.y)
}

// int32 z = 4;
inline void SendPointerInput::clear_z() {
  z_ = 0;
}
inline ::google::protobuf::int32 SendPointerInput::z() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SendPointerInput.z)
  return z_;
}
inline void SendPointerInput::set_z(::google::protobuf::int32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SendPointerInput.z)
}

// -------------------------------------------------------------------

// QueryScreeenshot

// string format = 1;
inline void QueryScreeenshot::clear_format() {
  format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryScreeenshot::format() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryScreeenshot.format)
  return format_.GetNoArena();
}
inline void QueryScreeenshot::set_format(const ::std::string& value) {
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryScreeenshot.format)
}
#if LANG_CXX11
inline void QueryScreeenshot::set_format(::std::string&& value) {
  
  format_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SweetProtocol.QueryScreeenshot.format)
}
#endif
inline void QueryScreeenshot::set_format(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SweetProtocol.QueryScreeenshot.format)
}
inline void QueryScreeenshot::set_format(const char* value, size_t size) {
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SweetProtocol.QueryScreeenshot.format)
}
inline ::std::string* QueryScreeenshot::mutable_format() {
  
  // @@protoc_insertion_point(field_mutable:SweetProtocol.QueryScreeenshot.format)
  return format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryScreeenshot::release_format() {
  // @@protoc_insertion_point(field_release:SweetProtocol.QueryScreeenshot.format)
  
  return format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryScreeenshot::set_allocated_format(::std::string* format) {
  if (format != NULL) {
    
  } else {
    
  }
  format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), format);
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.QueryScreeenshot.format)
}

// uint32 width = 2;
inline void QueryScreeenshot::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 QueryScreeenshot::width() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryScreeenshot.width)
  return width_;
}
inline void QueryScreeenshot::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryScreeenshot.width)
}

// uint32 height = 3;
inline void QueryScreeenshot::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 QueryScreeenshot::height() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryScreeenshot.height)
  return height_;
}
inline void QueryScreeenshot::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryScreeenshot.height)
}

// -------------------------------------------------------------------

// QueryScreenshotResponse

// string format = 1;
inline void QueryScreenshotResponse::clear_format() {
  format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryScreenshotResponse::format() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryScreenshotResponse.format)
  return format_.GetNoArena();
}
inline void QueryScreenshotResponse::set_format(const ::std::string& value) {
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryScreenshotResponse.format)
}
#if LANG_CXX11
inline void QueryScreenshotResponse::set_format(::std::string&& value) {
  
  format_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SweetProtocol.QueryScreenshotResponse.format)
}
#endif
inline void QueryScreenshotResponse::set_format(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SweetProtocol.QueryScreenshotResponse.format)
}
inline void QueryScreenshotResponse::set_format(const char* value, size_t size) {
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SweetProtocol.QueryScreenshotResponse.format)
}
inline ::std::string* QueryScreenshotResponse::mutable_format() {
  
  // @@protoc_insertion_point(field_mutable:SweetProtocol.QueryScreenshotResponse.format)
  return format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryScreenshotResponse::release_format() {
  // @@protoc_insertion_point(field_release:SweetProtocol.QueryScreenshotResponse.format)
  
  return format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryScreenshotResponse::set_allocated_format(::std::string* format) {
  if (format != NULL) {
    
  } else {
    
  }
  format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), format);
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.QueryScreenshotResponse.format)
}

// uint32 width = 2;
inline void QueryScreenshotResponse::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 QueryScreenshotResponse::width() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryScreenshotResponse.width)
  return width_;
}
inline void QueryScreenshotResponse::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryScreenshotResponse.width)
}

// uint32 height = 3;
inline void QueryScreenshotResponse::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 QueryScreenshotResponse::height() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryScreenshotResponse.height)
  return height_;
}
inline void QueryScreenshotResponse::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryScreenshotResponse.height)
}

// bytes data = 4;
inline void QueryScreenshotResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryScreenshotResponse::data() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.QueryScreenshotResponse.data)
  return data_.GetNoArena();
}
inline void QueryScreenshotResponse::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SweetProtocol.QueryScreenshotResponse.data)
}
#if LANG_CXX11
inline void QueryScreenshotResponse::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SweetProtocol.QueryScreenshotResponse.data)
}
#endif
inline void QueryScreenshotResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SweetProtocol.QueryScreenshotResponse.data)
}
inline void QueryScreenshotResponse::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SweetProtocol.QueryScreenshotResponse.data)
}
inline ::std::string* QueryScreenshotResponse::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:SweetProtocol.QueryScreenshotResponse.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryScreenshotResponse::release_data() {
  // @@protoc_insertion_point(field_release:SweetProtocol.QueryScreenshotResponse.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryScreenshotResponse::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.QueryScreenshotResponse.data)
}

// -------------------------------------------------------------------

// MonitorsConfig_Monitor

// uint32 index = 1;
inline void MonitorsConfig_Monitor::clear_index() {
  index_ = 0u;
}
inline ::google::protobuf::uint32 MonitorsConfig_Monitor::index() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.MonitorsConfig.Monitor.index)
  return index_;
}
inline void MonitorsConfig_Monitor::set_index(::google::protobuf::uint32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.MonitorsConfig.Monitor.index)
}

// uint32 left = 2;
inline void MonitorsConfig_Monitor::clear_left() {
  left_ = 0u;
}
inline ::google::protobuf::uint32 MonitorsConfig_Monitor::left() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.MonitorsConfig.Monitor.left)
  return left_;
}
inline void MonitorsConfig_Monitor::set_left(::google::protobuf::uint32 value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.MonitorsConfig.Monitor.left)
}

// uint32 top = 3;
inline void MonitorsConfig_Monitor::clear_top() {
  top_ = 0u;
}
inline ::google::protobuf::uint32 MonitorsConfig_Monitor::top() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.MonitorsConfig.Monitor.top)
  return top_;
}
inline void MonitorsConfig_Monitor::set_top(::google::protobuf::uint32 value) {
  
  top_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.MonitorsConfig.Monitor.top)
}

// uint32 width = 4;
inline void MonitorsConfig_Monitor::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 MonitorsConfig_Monitor::width() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.MonitorsConfig.Monitor.width)
  return width_;
}
inline void MonitorsConfig_Monitor::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.MonitorsConfig.Monitor.width)
}

// uint32 height = 5;
inline void MonitorsConfig_Monitor::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 MonitorsConfig_Monitor::height() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.MonitorsConfig.Monitor.height)
  return height_;
}
inline void MonitorsConfig_Monitor::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.MonitorsConfig.Monitor.height)
}

// uint32 depth = 6;
inline void MonitorsConfig_Monitor::clear_depth() {
  depth_ = 0u;
}
inline ::google::protobuf::uint32 MonitorsConfig_Monitor::depth() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.MonitorsConfig.Monitor.depth)
  return depth_;
}
inline void MonitorsConfig_Monitor::set_depth(::google::protobuf::uint32 value) {
  
  depth_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.MonitorsConfig.Monitor.depth)
}

// -------------------------------------------------------------------

// MonitorsConfig

// uint32 count = 1;
inline void MonitorsConfig::clear_count() {
  count_ = 0u;
}
inline ::google::protobuf::uint32 MonitorsConfig::count() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.MonitorsConfig.count)
  return count_;
}
inline void MonitorsConfig::set_count(::google::protobuf::uint32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.MonitorsConfig.count)
}

// repeated .SweetProtocol.MonitorsConfig.Monitor monitors = 2;
inline int MonitorsConfig::monitors_size() const {
  return monitors_.size();
}
inline void MonitorsConfig::clear_monitors() {
  monitors_.Clear();
}
inline const ::SweetProtocol::MonitorsConfig_Monitor& MonitorsConfig::monitors(int index) const {
  // @@protoc_insertion_point(field_get:SweetProtocol.MonitorsConfig.monitors)
  return monitors_.Get(index);
}
inline ::SweetProtocol::MonitorsConfig_Monitor* MonitorsConfig::mutable_monitors(int index) {
  // @@protoc_insertion_point(field_mutable:SweetProtocol.MonitorsConfig.monitors)
  return monitors_.Mutable(index);
}
inline ::SweetProtocol::MonitorsConfig_Monitor* MonitorsConfig::add_monitors() {
  // @@protoc_insertion_point(field_add:SweetProtocol.MonitorsConfig.monitors)
  return monitors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::SweetProtocol::MonitorsConfig_Monitor >*
MonitorsConfig::mutable_monitors() {
  // @@protoc_insertion_point(field_mutable_list:SweetProtocol.MonitorsConfig.monitors)
  return &monitors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::SweetProtocol::MonitorsConfig_Monitor >&
MonitorsConfig::monitors() const {
  // @@protoc_insertion_point(field_list:SweetProtocol.MonitorsConfig.monitors)
  return monitors_;
}

// -------------------------------------------------------------------

// SetCursorEvent_CursorShape

// uint32 width = 1;
inline void SetCursorEvent_CursorShape::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 SetCursorEvent_CursorShape::width() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SetCursorEvent.CursorShape.width)
  return width_;
}
inline void SetCursorEvent_CursorShape::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SetCursorEvent.CursorShape.width)
}

// uint32 height = 2;
inline void SetCursorEvent_CursorShape::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 SetCursorEvent_CursorShape::height() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SetCursorEvent.CursorShape.height)
  return height_;
}
inline void SetCursorEvent_CursorShape::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SetCursorEvent.CursorShape.height)
}

// int32 hotspot_x = 3;
inline void SetCursorEvent_CursorShape::clear_hotspot_x() {
  hotspot_x_ = 0;
}
inline ::google::protobuf::int32 SetCursorEvent_CursorShape::hotspot_x() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SetCursorEvent.CursorShape.hotspot_x)
  return hotspot_x_;
}
inline void SetCursorEvent_CursorShape::set_hotspot_x(::google::protobuf::int32 value) {
  
  hotspot_x_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SetCursorEvent.CursorShape.hotspot_x)
}

// int32 hotspot_y = 4;
inline void SetCursorEvent_CursorShape::clear_hotspot_y() {
  hotspot_y_ = 0;
}
inline ::google::protobuf::int32 SetCursorEvent_CursorShape::hotspot_y() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SetCursorEvent.CursorShape.hotspot_y)
  return hotspot_y_;
}
inline void SetCursorEvent_CursorShape::set_hotspot_y(::google::protobuf::int32 value) {
  
  hotspot_y_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SetCursorEvent.CursorShape.hotspot_y)
}

// uint32 type = 5;
inline void SetCursorEvent_CursorShape::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 SetCursorEvent_CursorShape::type() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SetCursorEvent.CursorShape.type)
  return type_;
}
inline void SetCursorEvent_CursorShape::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SetCursorEvent.CursorShape.type)
}

// bytes data = 6;
inline void SetCursorEvent_CursorShape::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetCursorEvent_CursorShape::data() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SetCursorEvent.CursorShape.data)
  return data_.GetNoArena();
}
inline void SetCursorEvent_CursorShape::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SweetProtocol.SetCursorEvent.CursorShape.data)
}
#if LANG_CXX11
inline void SetCursorEvent_CursorShape::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SweetProtocol.SetCursorEvent.CursorShape.data)
}
#endif
inline void SetCursorEvent_CursorShape::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SweetProtocol.SetCursorEvent.CursorShape.data)
}
inline void SetCursorEvent_CursorShape::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SweetProtocol.SetCursorEvent.CursorShape.data)
}
inline ::std::string* SetCursorEvent_CursorShape::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:SweetProtocol.SetCursorEvent.CursorShape.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetCursorEvent_CursorShape::release_data() {
  // @@protoc_insertion_point(field_release:SweetProtocol.SetCursorEvent.CursorShape.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetCursorEvent_CursorShape::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.SetCursorEvent.CursorShape.data)
}

// -------------------------------------------------------------------

// SetCursorEvent

// bool visible = 1;
inline void SetCursorEvent::clear_visible() {
  visible_ = false;
}
inline bool SetCursorEvent::visible() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SetCursorEvent.visible)
  return visible_;
}
inline void SetCursorEvent::set_visible(bool value) {
  
  visible_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SetCursorEvent.visible)
}

// int32 x = 2;
inline void SetCursorEvent::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 SetCursorEvent::x() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SetCursorEvent.x)
  return x_;
}
inline void SetCursorEvent::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SetCursorEvent.x)
}

// int32 y = 3;
inline void SetCursorEvent::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 SetCursorEvent::y() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.SetCursorEvent.y)
  return y_;
}
inline void SetCursorEvent::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.SetCursorEvent.y)
}

// .SweetProtocol.SetCursorEvent.CursorShape shape = 4;
inline bool SetCursorEvent::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
inline void SetCursorEvent::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
}
inline const ::SweetProtocol::SetCursorEvent_CursorShape& SetCursorEvent::shape() const {
  const ::SweetProtocol::SetCursorEvent_CursorShape* p = shape_;
  // @@protoc_insertion_point(field_get:SweetProtocol.SetCursorEvent.shape)
  return p != NULL ? *p : *reinterpret_cast<const ::SweetProtocol::SetCursorEvent_CursorShape*>(
      &::SweetProtocol::_SetCursorEvent_CursorShape_default_instance_);
}
inline ::SweetProtocol::SetCursorEvent_CursorShape* SetCursorEvent::release_shape() {
  // @@protoc_insertion_point(field_release:SweetProtocol.SetCursorEvent.shape)
  
  ::SweetProtocol::SetCursorEvent_CursorShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline ::SweetProtocol::SetCursorEvent_CursorShape* SetCursorEvent::mutable_shape() {
  
  if (shape_ == NULL) {
    shape_ = new ::SweetProtocol::SetCursorEvent_CursorShape;
  }
  // @@protoc_insertion_point(field_mutable:SweetProtocol.SetCursorEvent.shape)
  return shape_;
}
inline void SetCursorEvent::set_allocated_shape(::SweetProtocol::SetCursorEvent_CursorShape* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      shape = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    
  } else {
    
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.SetCursorEvent.shape)
}

// -------------------------------------------------------------------

// DisplayStreamConfig

// string codec = 1;
inline void DisplayStreamConfig::clear_codec() {
  codec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DisplayStreamConfig::codec() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.DisplayStreamConfig.codec)
  return codec_.GetNoArena();
}
inline void DisplayStreamConfig::set_codec(const ::std::string& value) {
  
  codec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SweetProtocol.DisplayStreamConfig.codec)
}
#if LANG_CXX11
inline void DisplayStreamConfig::set_codec(::std::string&& value) {
  
  codec_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SweetProtocol.DisplayStreamConfig.codec)
}
#endif
inline void DisplayStreamConfig::set_codec(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  codec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SweetProtocol.DisplayStreamConfig.codec)
}
inline void DisplayStreamConfig::set_codec(const char* value, size_t size) {
  
  codec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SweetProtocol.DisplayStreamConfig.codec)
}
inline ::std::string* DisplayStreamConfig::mutable_codec() {
  
  // @@protoc_insertion_point(field_mutable:SweetProtocol.DisplayStreamConfig.codec)
  return codec_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DisplayStreamConfig::release_codec() {
  // @@protoc_insertion_point(field_release:SweetProtocol.DisplayStreamConfig.codec)
  
  return codec_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DisplayStreamConfig::set_allocated_codec(::std::string* codec) {
  if (codec != NULL) {
    
  } else {
    
  }
  codec_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), codec);
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.DisplayStreamConfig.codec)
}

// string profile = 2;
inline void DisplayStreamConfig::clear_profile() {
  profile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DisplayStreamConfig::profile() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.DisplayStreamConfig.profile)
  return profile_.GetNoArena();
}
inline void DisplayStreamConfig::set_profile(const ::std::string& value) {
  
  profile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SweetProtocol.DisplayStreamConfig.profile)
}
#if LANG_CXX11
inline void DisplayStreamConfig::set_profile(::std::string&& value) {
  
  profile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SweetProtocol.DisplayStreamConfig.profile)
}
#endif
inline void DisplayStreamConfig::set_profile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  profile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SweetProtocol.DisplayStreamConfig.profile)
}
inline void DisplayStreamConfig::set_profile(const char* value, size_t size) {
  
  profile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SweetProtocol.DisplayStreamConfig.profile)
}
inline ::std::string* DisplayStreamConfig::mutable_profile() {
  
  // @@protoc_insertion_point(field_mutable:SweetProtocol.DisplayStreamConfig.profile)
  return profile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DisplayStreamConfig::release_profile() {
  // @@protoc_insertion_point(field_release:SweetProtocol.DisplayStreamConfig.profile)
  
  return profile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DisplayStreamConfig::set_allocated_profile(::std::string* profile) {
  if (profile != NULL) {
    
  } else {
    
  }
  profile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), profile);
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.DisplayStreamConfig.profile)
}

// string preset = 3;
inline void DisplayStreamConfig::clear_preset() {
  preset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DisplayStreamConfig::preset() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.DisplayStreamConfig.preset)
  return preset_.GetNoArena();
}
inline void DisplayStreamConfig::set_preset(const ::std::string& value) {
  
  preset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SweetProtocol.DisplayStreamConfig.preset)
}
#if LANG_CXX11
inline void DisplayStreamConfig::set_preset(::std::string&& value) {
  
  preset_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SweetProtocol.DisplayStreamConfig.preset)
}
#endif
inline void DisplayStreamConfig::set_preset(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  preset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SweetProtocol.DisplayStreamConfig.preset)
}
inline void DisplayStreamConfig::set_preset(const char* value, size_t size) {
  
  preset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SweetProtocol.DisplayStreamConfig.preset)
}
inline ::std::string* DisplayStreamConfig::mutable_preset() {
  
  // @@protoc_insertion_point(field_mutable:SweetProtocol.DisplayStreamConfig.preset)
  return preset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DisplayStreamConfig::release_preset() {
  // @@protoc_insertion_point(field_release:SweetProtocol.DisplayStreamConfig.preset)
  
  return preset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DisplayStreamConfig::set_allocated_preset(::std::string* preset) {
  if (preset != NULL) {
    
  } else {
    
  }
  preset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), preset);
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.DisplayStreamConfig.preset)
}

// string rate_control = 4;
inline void DisplayStreamConfig::clear_rate_control() {
  rate_control_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DisplayStreamConfig::rate_control() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.DisplayStreamConfig.rate_control)
  return rate_control_.GetNoArena();
}
inline void DisplayStreamConfig::set_rate_control(const ::std::string& value) {
  
  rate_control_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SweetProtocol.DisplayStreamConfig.rate_control)
}
#if LANG_CXX11
inline void DisplayStreamConfig::set_rate_control(::std::string&& value) {
  
  rate_control_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SweetProtocol.DisplayStreamConfig.rate_control)
}
#endif
inline void DisplayStreamConfig::set_rate_control(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rate_control_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SweetProtocol.DisplayStreamConfig.rate_control)
}
inline void DisplayStreamConfig::set_rate_control(const char* value, size_t size) {
  
  rate_control_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SweetProtocol.DisplayStreamConfig.rate_control)
}
inline ::std::string* DisplayStreamConfig::mutable_rate_control() {
  
  // @@protoc_insertion_point(field_mutable:SweetProtocol.DisplayStreamConfig.rate_control)
  return rate_control_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DisplayStreamConfig::release_rate_control() {
  // @@protoc_insertion_point(field_release:SweetProtocol.DisplayStreamConfig.rate_control)
  
  return rate_control_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DisplayStreamConfig::set_allocated_rate_control(::std::string* rate_control) {
  if (rate_control != NULL) {
    
  } else {
    
  }
  rate_control_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rate_control);
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.DisplayStreamConfig.rate_control)
}

// uint32 fps = 5;
inline void DisplayStreamConfig::clear_fps() {
  fps_ = 0u;
}
inline ::google::protobuf::uint32 DisplayStreamConfig::fps() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.DisplayStreamConfig.fps)
  return fps_;
}
inline void DisplayStreamConfig::set_fps(::google::protobuf::uint32 value) {
  
  fps_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.DisplayStreamConfig.fps)
}

// uint32 bitrate = 6;
inline void DisplayStreamConfig::clear_bitrate() {
  bitrate_ = 0u;
}
inline ::google::protobuf::uint32 DisplayStreamConfig::bitrate() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.DisplayStreamConfig.bitrate)
  return bitrate_;
}
inline void DisplayStreamConfig::set_bitrate(::google::protobuf::uint32 value) {
  
  bitrate_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.DisplayStreamConfig.bitrate)
}

// uint32 qmin = 7;
inline void DisplayStreamConfig::clear_qmin() {
  qmin_ = 0u;
}
inline ::google::protobuf::uint32 DisplayStreamConfig::qmin() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.DisplayStreamConfig.qmin)
  return qmin_;
}
inline void DisplayStreamConfig::set_qmin(::google::protobuf::uint32 value) {
  
  qmin_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.DisplayStreamConfig.qmin)
}

// uint32 threads = 8;
inline void DisplayStreamConfig::clear_threads() {
  threads_ = 0u;
}
inline ::google::protobuf::uint32 DisplayStreamConfig::threads() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.DisplayStreamConfig.threads)
  return threads_;
}
inline void DisplayStreamConfig::set_threads(::google::protobuf::uint32 value) {
  
  threads_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.DisplayStreamConfig.threads)
}

// uint32 flags = 9;
inline void DisplayStreamConfig::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 DisplayStreamConfig::flags() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.DisplayStreamConfig.flags)
  return flags_;
}
inline void DisplayStreamConfig::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.DisplayStreamConfig.flags)
}

// -------------------------------------------------------------------

// PlaybackStreamConfig

// string codec = 1;
inline void PlaybackStreamConfig::clear_codec() {
  codec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlaybackStreamConfig::codec() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.PlaybackStreamConfig.codec)
  return codec_.GetNoArena();
}
inline void PlaybackStreamConfig::set_codec(const ::std::string& value) {
  
  codec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SweetProtocol.PlaybackStreamConfig.codec)
}
#if LANG_CXX11
inline void PlaybackStreamConfig::set_codec(::std::string&& value) {
  
  codec_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SweetProtocol.PlaybackStreamConfig.codec)
}
#endif
inline void PlaybackStreamConfig::set_codec(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  codec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SweetProtocol.PlaybackStreamConfig.codec)
}
inline void PlaybackStreamConfig::set_codec(const char* value, size_t size) {
  
  codec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SweetProtocol.PlaybackStreamConfig.codec)
}
inline ::std::string* PlaybackStreamConfig::mutable_codec() {
  
  // @@protoc_insertion_point(field_mutable:SweetProtocol.PlaybackStreamConfig.codec)
  return codec_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlaybackStreamConfig::release_codec() {
  // @@protoc_insertion_point(field_release:SweetProtocol.PlaybackStreamConfig.codec)
  
  return codec_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlaybackStreamConfig::set_allocated_codec(::std::string* codec) {
  if (codec != NULL) {
    
  } else {
    
  }
  codec_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), codec);
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.PlaybackStreamConfig.codec)
}

// -------------------------------------------------------------------

// DisplayStreamStartEvent

// uint32 width = 1;
inline void DisplayStreamStartEvent::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 DisplayStreamStartEvent::width() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.DisplayStreamStartEvent.width)
  return width_;
}
inline void DisplayStreamStartEvent::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.DisplayStreamStartEvent.width)
}

// uint32 height = 2;
inline void DisplayStreamStartEvent::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 DisplayStreamStartEvent::height() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.DisplayStreamStartEvent.height)
  return height_;
}
inline void DisplayStreamStartEvent::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.DisplayStreamStartEvent.height)
}

// -------------------------------------------------------------------

// PlaybackStreamStartEvent

// uint32 playback_id = 1;
inline void PlaybackStreamStartEvent::clear_playback_id() {
  playback_id_ = 0u;
}
inline ::google::protobuf::uint32 PlaybackStreamStartEvent::playback_id() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.PlaybackStreamStartEvent.playback_id)
  return playback_id_;
}
inline void PlaybackStreamStartEvent::set_playback_id(::google::protobuf::uint32 value) {
  
  playback_id_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.PlaybackStreamStartEvent.playback_id)
}

// string codec = 2;
inline void PlaybackStreamStartEvent::clear_codec() {
  codec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlaybackStreamStartEvent::codec() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.PlaybackStreamStartEvent.codec)
  return codec_.GetNoArena();
}
inline void PlaybackStreamStartEvent::set_codec(const ::std::string& value) {
  
  codec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SweetProtocol.PlaybackStreamStartEvent.codec)
}
#if LANG_CXX11
inline void PlaybackStreamStartEvent::set_codec(::std::string&& value) {
  
  codec_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SweetProtocol.PlaybackStreamStartEvent.codec)
}
#endif
inline void PlaybackStreamStartEvent::set_codec(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  codec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SweetProtocol.PlaybackStreamStartEvent.codec)
}
inline void PlaybackStreamStartEvent::set_codec(const char* value, size_t size) {
  
  codec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SweetProtocol.PlaybackStreamStartEvent.codec)
}
inline ::std::string* PlaybackStreamStartEvent::mutable_codec() {
  
  // @@protoc_insertion_point(field_mutable:SweetProtocol.PlaybackStreamStartEvent.codec)
  return codec_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlaybackStreamStartEvent::release_codec() {
  // @@protoc_insertion_point(field_release:SweetProtocol.PlaybackStreamStartEvent.codec)
  
  return codec_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlaybackStreamStartEvent::set_allocated_codec(::std::string* codec) {
  if (codec != NULL) {
    
  } else {
    
  }
  codec_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), codec);
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.PlaybackStreamStartEvent.codec)
}

// uint32 format = 3;
inline void PlaybackStreamStartEvent::clear_format() {
  format_ = 0u;
}
inline ::google::protobuf::uint32 PlaybackStreamStartEvent::format() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.PlaybackStreamStartEvent.format)
  return format_;
}
inline void PlaybackStreamStartEvent::set_format(::google::protobuf::uint32 value) {
  
  format_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.PlaybackStreamStartEvent.format)
}

// uint32 channels = 4;
inline void PlaybackStreamStartEvent::clear_channels() {
  channels_ = 0u;
}
inline ::google::protobuf::uint32 PlaybackStreamStartEvent::channels() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.PlaybackStreamStartEvent.channels)
  return channels_;
}
inline void PlaybackStreamStartEvent::set_channels(::google::protobuf::uint32 value) {
  
  channels_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.PlaybackStreamStartEvent.channels)
}

// uint32 frequency = 5;
inline void PlaybackStreamStartEvent::clear_frequency() {
  frequency_ = 0u;
}
inline ::google::protobuf::uint32 PlaybackStreamStartEvent::frequency() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.PlaybackStreamStartEvent.frequency)
  return frequency_;
}
inline void PlaybackStreamStartEvent::set_frequency(::google::protobuf::uint32 value) {
  
  frequency_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.PlaybackStreamStartEvent.frequency)
}

// -------------------------------------------------------------------

// ClipboardDataToGuest

// .SweetProtocol.ClipboardDataType type = 1;
inline void ClipboardDataToGuest::clear_type() {
  type_ = 0;
}
inline ::SweetProtocol::ClipboardDataType ClipboardDataToGuest::type() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.ClipboardDataToGuest.type)
  return static_cast< ::SweetProtocol::ClipboardDataType >(type_);
}
inline void ClipboardDataToGuest::set_type(::SweetProtocol::ClipboardDataType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.ClipboardDataToGuest.type)
}

// bytes data = 2;
inline void ClipboardDataToGuest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClipboardDataToGuest::data() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.ClipboardDataToGuest.data)
  return data_.GetNoArena();
}
inline void ClipboardDataToGuest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SweetProtocol.ClipboardDataToGuest.data)
}
#if LANG_CXX11
inline void ClipboardDataToGuest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SweetProtocol.ClipboardDataToGuest.data)
}
#endif
inline void ClipboardDataToGuest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SweetProtocol.ClipboardDataToGuest.data)
}
inline void ClipboardDataToGuest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SweetProtocol.ClipboardDataToGuest.data)
}
inline ::std::string* ClipboardDataToGuest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:SweetProtocol.ClipboardDataToGuest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClipboardDataToGuest::release_data() {
  // @@protoc_insertion_point(field_release:SweetProtocol.ClipboardDataToGuest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClipboardDataToGuest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.ClipboardDataToGuest.data)
}

// string file_name = 3;
inline void ClipboardDataToGuest::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClipboardDataToGuest::file_name() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.ClipboardDataToGuest.file_name)
  return file_name_.GetNoArena();
}
inline void ClipboardDataToGuest::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SweetProtocol.ClipboardDataToGuest.file_name)
}
#if LANG_CXX11
inline void ClipboardDataToGuest::set_file_name(::std::string&& value) {
  
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SweetProtocol.ClipboardDataToGuest.file_name)
}
#endif
inline void ClipboardDataToGuest::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SweetProtocol.ClipboardDataToGuest.file_name)
}
inline void ClipboardDataToGuest::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SweetProtocol.ClipboardDataToGuest.file_name)
}
inline ::std::string* ClipboardDataToGuest::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:SweetProtocol.ClipboardDataToGuest.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClipboardDataToGuest::release_file_name() {
  // @@protoc_insertion_point(field_release:SweetProtocol.ClipboardDataToGuest.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClipboardDataToGuest::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.ClipboardDataToGuest.file_name)
}

// -------------------------------------------------------------------

// ClipboardStreamDataEvent

// .SweetProtocol.ClipboardDataType type = 1;
inline void ClipboardStreamDataEvent::clear_type() {
  type_ = 0;
}
inline ::SweetProtocol::ClipboardDataType ClipboardStreamDataEvent::type() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.ClipboardStreamDataEvent.type)
  return static_cast< ::SweetProtocol::ClipboardDataType >(type_);
}
inline void ClipboardStreamDataEvent::set_type(::SweetProtocol::ClipboardDataType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:SweetProtocol.ClipboardStreamDataEvent.type)
}

// bytes data = 2;
inline void ClipboardStreamDataEvent::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClipboardStreamDataEvent::data() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.ClipboardStreamDataEvent.data)
  return data_.GetNoArena();
}
inline void ClipboardStreamDataEvent::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SweetProtocol.ClipboardStreamDataEvent.data)
}
#if LANG_CXX11
inline void ClipboardStreamDataEvent::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SweetProtocol.ClipboardStreamDataEvent.data)
}
#endif
inline void ClipboardStreamDataEvent::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SweetProtocol.ClipboardStreamDataEvent.data)
}
inline void ClipboardStreamDataEvent::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SweetProtocol.ClipboardStreamDataEvent.data)
}
inline ::std::string* ClipboardStreamDataEvent::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:SweetProtocol.ClipboardStreamDataEvent.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClipboardStreamDataEvent::release_data() {
  // @@protoc_insertion_point(field_release:SweetProtocol.ClipboardStreamDataEvent.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClipboardStreamDataEvent::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.ClipboardStreamDataEvent.data)
}

// string file_name = 3;
inline void ClipboardStreamDataEvent::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClipboardStreamDataEvent::file_name() const {
  // @@protoc_insertion_point(field_get:SweetProtocol.ClipboardStreamDataEvent.file_name)
  return file_name_.GetNoArena();
}
inline void ClipboardStreamDataEvent::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SweetProtocol.ClipboardStreamDataEvent.file_name)
}
#if LANG_CXX11
inline void ClipboardStreamDataEvent::set_file_name(::std::string&& value) {
  
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SweetProtocol.ClipboardStreamDataEvent.file_name)
}
#endif
inline void ClipboardStreamDataEvent::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SweetProtocol.ClipboardStreamDataEvent.file_name)
}
inline void ClipboardStreamDataEvent::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SweetProtocol.ClipboardStreamDataEvent.file_name)
}
inline ::std::string* ClipboardStreamDataEvent::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:SweetProtocol.ClipboardStreamDataEvent.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClipboardStreamDataEvent::release_file_name() {
  // @@protoc_insertion_point(field_release:SweetProtocol.ClipboardStreamDataEvent.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClipboardStreamDataEvent::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:SweetProtocol.ClipboardStreamDataEvent.file_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SweetProtocol

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::SweetProtocol::SendPointerInput_PointerButtonBit> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SweetProtocol::SendPointerInput_PointerButtonBit>() {
  return ::SweetProtocol::SendPointerInput_PointerButtonBit_descriptor();
}
template <> struct is_proto_enum< ::SweetProtocol::SweetCommand> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SweetProtocol::SweetCommand>() {
  return ::SweetProtocol::SweetCommand_descriptor();
}
template <> struct is_proto_enum< ::SweetProtocol::SweetResponseAndEvent> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SweetProtocol::SweetResponseAndEvent>() {
  return ::SweetProtocol::SweetResponseAndEvent_descriptor();
}
template <> struct is_proto_enum< ::SweetProtocol::ClipboardDataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SweetProtocol::ClipboardDataType>() {
  return ::SweetProtocol::ClipboardDataType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sweet_2eproto__INCLUDED
