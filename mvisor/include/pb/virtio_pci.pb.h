// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: virtio_pci.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_virtio_5fpci_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_virtio_5fpci_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_virtio_5fpci_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_virtio_5fpci_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_virtio_5fpci_2eproto;
class VirtioPciState;
struct VirtioPciStateDefaultTypeInternal;
extern VirtioPciStateDefaultTypeInternal _VirtioPciState_default_instance_;
class VirtioPciState_CommonConfig;
struct VirtioPciState_CommonConfigDefaultTypeInternal;
extern VirtioPciState_CommonConfigDefaultTypeInternal _VirtioPciState_CommonConfig_default_instance_;
class VirtioPciState_Queue;
struct VirtioPciState_QueueDefaultTypeInternal;
extern VirtioPciState_QueueDefaultTypeInternal _VirtioPciState_Queue_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::VirtioPciState* Arena::CreateMaybeMessage<::VirtioPciState>(Arena*);
template<> ::VirtioPciState_CommonConfig* Arena::CreateMaybeMessage<::VirtioPciState_CommonConfig>(Arena*);
template<> ::VirtioPciState_Queue* Arena::CreateMaybeMessage<::VirtioPciState_Queue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class VirtioPciState_CommonConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VirtioPciState.CommonConfig) */ {
 public:
  inline VirtioPciState_CommonConfig() : VirtioPciState_CommonConfig(nullptr) {}
  ~VirtioPciState_CommonConfig() override;
  explicit constexpr VirtioPciState_CommonConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioPciState_CommonConfig(const VirtioPciState_CommonConfig& from);
  VirtioPciState_CommonConfig(VirtioPciState_CommonConfig&& from) noexcept
    : VirtioPciState_CommonConfig() {
    *this = ::std::move(from);
  }

  inline VirtioPciState_CommonConfig& operator=(const VirtioPciState_CommonConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioPciState_CommonConfig& operator=(VirtioPciState_CommonConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioPciState_CommonConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioPciState_CommonConfig* internal_default_instance() {
    return reinterpret_cast<const VirtioPciState_CommonConfig*>(
               &_VirtioPciState_CommonConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VirtioPciState_CommonConfig& a, VirtioPciState_CommonConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioPciState_CommonConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioPciState_CommonConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioPciState_CommonConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioPciState_CommonConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioPciState_CommonConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioPciState_CommonConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioPciState_CommonConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VirtioPciState.CommonConfig";
  }
  protected:
  explicit VirtioPciState_CommonConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuestFeatureFieldNumber = 4,
    kQueueSelectFieldNumber = 10,
    kMsixConfigFieldNumber = 5,
    kDeviceStatusFieldNumber = 7,
  };
  // uint64 guest_feature = 4;
  void clear_guest_feature();
  uint64_t guest_feature() const;
  void set_guest_feature(uint64_t value);
  private:
  uint64_t _internal_guest_feature() const;
  void _internal_set_guest_feature(uint64_t value);
  public:

  // uint32 queue_select = 10;
  void clear_queue_select();
  uint32_t queue_select() const;
  void set_queue_select(uint32_t value);
  private:
  uint32_t _internal_queue_select() const;
  void _internal_set_queue_select(uint32_t value);
  public:

  // uint32 msix_config = 5;
  void clear_msix_config();
  uint32_t msix_config() const;
  void set_msix_config(uint32_t value);
  private:
  uint32_t _internal_msix_config() const;
  void _internal_set_msix_config(uint32_t value);
  public:

  // uint32 device_status = 7;
  void clear_device_status();
  uint32_t device_status() const;
  void set_device_status(uint32_t value);
  private:
  uint32_t _internal_device_status() const;
  void _internal_set_device_status(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:VirtioPciState.CommonConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t guest_feature_;
  uint32_t queue_select_;
  uint32_t msix_config_;
  uint32_t device_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_virtio_5fpci_2eproto;
};
// -------------------------------------------------------------------

class VirtioPciState_Queue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VirtioPciState.Queue) */ {
 public:
  inline VirtioPciState_Queue() : VirtioPciState_Queue(nullptr) {}
  ~VirtioPciState_Queue() override;
  explicit constexpr VirtioPciState_Queue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioPciState_Queue(const VirtioPciState_Queue& from);
  VirtioPciState_Queue(VirtioPciState_Queue&& from) noexcept
    : VirtioPciState_Queue() {
    *this = ::std::move(from);
  }

  inline VirtioPciState_Queue& operator=(const VirtioPciState_Queue& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioPciState_Queue& operator=(VirtioPciState_Queue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioPciState_Queue& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioPciState_Queue* internal_default_instance() {
    return reinterpret_cast<const VirtioPciState_Queue*>(
               &_VirtioPciState_Queue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VirtioPciState_Queue& a, VirtioPciState_Queue& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioPciState_Queue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioPciState_Queue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioPciState_Queue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioPciState_Queue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioPciState_Queue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioPciState_Queue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioPciState_Queue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VirtioPciState.Queue";
  }
  protected:
  explicit VirtioPciState_Queue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kMsixVectorFieldNumber = 2,
    kSizeFieldNumber = 4,
    kLastAvailableIndexFieldNumber = 5,
    kDescriptorTableAddressFieldNumber = 6,
    kAvailableRingAddressFieldNumber = 7,
    kUsedRingAddressFieldNumber = 8,
  };
  // bool enabled = 1;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // int32 msix_vector = 2;
  void clear_msix_vector();
  int32_t msix_vector() const;
  void set_msix_vector(int32_t value);
  private:
  int32_t _internal_msix_vector() const;
  void _internal_set_msix_vector(int32_t value);
  public:

  // int32 size = 4;
  void clear_size();
  int32_t size() const;
  void set_size(int32_t value);
  private:
  int32_t _internal_size() const;
  void _internal_set_size(int32_t value);
  public:

  // uint32 last_available_index = 5;
  void clear_last_available_index();
  uint32_t last_available_index() const;
  void set_last_available_index(uint32_t value);
  private:
  uint32_t _internal_last_available_index() const;
  void _internal_set_last_available_index(uint32_t value);
  public:

  // uint64 descriptor_table_address = 6;
  void clear_descriptor_table_address();
  uint64_t descriptor_table_address() const;
  void set_descriptor_table_address(uint64_t value);
  private:
  uint64_t _internal_descriptor_table_address() const;
  void _internal_set_descriptor_table_address(uint64_t value);
  public:

  // uint64 available_ring_address = 7;
  void clear_available_ring_address();
  uint64_t available_ring_address() const;
  void set_available_ring_address(uint64_t value);
  private:
  uint64_t _internal_available_ring_address() const;
  void _internal_set_available_ring_address(uint64_t value);
  public:

  // uint64 used_ring_address = 8;
  void clear_used_ring_address();
  uint64_t used_ring_address() const;
  void set_used_ring_address(uint64_t value);
  private:
  uint64_t _internal_used_ring_address() const;
  void _internal_set_used_ring_address(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:VirtioPciState.Queue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool enabled_;
  int32_t msix_vector_;
  int32_t size_;
  uint32_t last_available_index_;
  uint64_t descriptor_table_address_;
  uint64_t available_ring_address_;
  uint64_t used_ring_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_virtio_5fpci_2eproto;
};
// -------------------------------------------------------------------

class VirtioPciState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VirtioPciState) */ {
 public:
  inline VirtioPciState() : VirtioPciState(nullptr) {}
  ~VirtioPciState() override;
  explicit constexpr VirtioPciState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioPciState(const VirtioPciState& from);
  VirtioPciState(VirtioPciState&& from) noexcept
    : VirtioPciState() {
    *this = ::std::move(from);
  }

  inline VirtioPciState& operator=(const VirtioPciState& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioPciState& operator=(VirtioPciState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioPciState& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioPciState* internal_default_instance() {
    return reinterpret_cast<const VirtioPciState*>(
               &_VirtioPciState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VirtioPciState& a, VirtioPciState& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioPciState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioPciState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioPciState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioPciState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioPciState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioPciState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioPciState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VirtioPciState";
  }
  protected:
  explicit VirtioPciState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VirtioPciState_CommonConfig CommonConfig;
  typedef VirtioPciState_Queue Queue;

  // accessors -------------------------------------------------------

  enum : int {
    kQueuesFieldNumber = 2,
    kCommonConfigFieldNumber = 1,
    kIsrStatusFieldNumber = 3,
  };
  // repeated .VirtioPciState.Queue queues = 2;
  int queues_size() const;
  private:
  int _internal_queues_size() const;
  public:
  void clear_queues();
  ::VirtioPciState_Queue* mutable_queues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VirtioPciState_Queue >*
      mutable_queues();
  private:
  const ::VirtioPciState_Queue& _internal_queues(int index) const;
  ::VirtioPciState_Queue* _internal_add_queues();
  public:
  const ::VirtioPciState_Queue& queues(int index) const;
  ::VirtioPciState_Queue* add_queues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VirtioPciState_Queue >&
      queues() const;

  // .VirtioPciState.CommonConfig common_config = 1;
  bool has_common_config() const;
  private:
  bool _internal_has_common_config() const;
  public:
  void clear_common_config();
  const ::VirtioPciState_CommonConfig& common_config() const;
  PROTOBUF_NODISCARD ::VirtioPciState_CommonConfig* release_common_config();
  ::VirtioPciState_CommonConfig* mutable_common_config();
  void set_allocated_common_config(::VirtioPciState_CommonConfig* common_config);
  private:
  const ::VirtioPciState_CommonConfig& _internal_common_config() const;
  ::VirtioPciState_CommonConfig* _internal_mutable_common_config();
  public:
  void unsafe_arena_set_allocated_common_config(
      ::VirtioPciState_CommonConfig* common_config);
  ::VirtioPciState_CommonConfig* unsafe_arena_release_common_config();

  // uint32 isr_status = 3;
  void clear_isr_status();
  uint32_t isr_status() const;
  void set_isr_status(uint32_t value);
  private:
  uint32_t _internal_isr_status() const;
  void _internal_set_isr_status(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:VirtioPciState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VirtioPciState_Queue > queues_;
  ::VirtioPciState_CommonConfig* common_config_;
  uint32_t isr_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_virtio_5fpci_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VirtioPciState_CommonConfig

// uint64 guest_feature = 4;
inline void VirtioPciState_CommonConfig::clear_guest_feature() {
  guest_feature_ = uint64_t{0u};
}
inline uint64_t VirtioPciState_CommonConfig::_internal_guest_feature() const {
  return guest_feature_;
}
inline uint64_t VirtioPciState_CommonConfig::guest_feature() const {
  // @@protoc_insertion_point(field_get:VirtioPciState.CommonConfig.guest_feature)
  return _internal_guest_feature();
}
inline void VirtioPciState_CommonConfig::_internal_set_guest_feature(uint64_t value) {
  
  guest_feature_ = value;
}
inline void VirtioPciState_CommonConfig::set_guest_feature(uint64_t value) {
  _internal_set_guest_feature(value);
  // @@protoc_insertion_point(field_set:VirtioPciState.CommonConfig.guest_feature)
}

// uint32 msix_config = 5;
inline void VirtioPciState_CommonConfig::clear_msix_config() {
  msix_config_ = 0u;
}
inline uint32_t VirtioPciState_CommonConfig::_internal_msix_config() const {
  return msix_config_;
}
inline uint32_t VirtioPciState_CommonConfig::msix_config() const {
  // @@protoc_insertion_point(field_get:VirtioPciState.CommonConfig.msix_config)
  return _internal_msix_config();
}
inline void VirtioPciState_CommonConfig::_internal_set_msix_config(uint32_t value) {
  
  msix_config_ = value;
}
inline void VirtioPciState_CommonConfig::set_msix_config(uint32_t value) {
  _internal_set_msix_config(value);
  // @@protoc_insertion_point(field_set:VirtioPciState.CommonConfig.msix_config)
}

// uint32 device_status = 7;
inline void VirtioPciState_CommonConfig::clear_device_status() {
  device_status_ = 0u;
}
inline uint32_t VirtioPciState_CommonConfig::_internal_device_status() const {
  return device_status_;
}
inline uint32_t VirtioPciState_CommonConfig::device_status() const {
  // @@protoc_insertion_point(field_get:VirtioPciState.CommonConfig.device_status)
  return _internal_device_status();
}
inline void VirtioPciState_CommonConfig::_internal_set_device_status(uint32_t value) {
  
  device_status_ = value;
}
inline void VirtioPciState_CommonConfig::set_device_status(uint32_t value) {
  _internal_set_device_status(value);
  // @@protoc_insertion_point(field_set:VirtioPciState.CommonConfig.device_status)
}

// uint32 queue_select = 10;
inline void VirtioPciState_CommonConfig::clear_queue_select() {
  queue_select_ = 0u;
}
inline uint32_t VirtioPciState_CommonConfig::_internal_queue_select() const {
  return queue_select_;
}
inline uint32_t VirtioPciState_CommonConfig::queue_select() const {
  // @@protoc_insertion_point(field_get:VirtioPciState.CommonConfig.queue_select)
  return _internal_queue_select();
}
inline void VirtioPciState_CommonConfig::_internal_set_queue_select(uint32_t value) {
  
  queue_select_ = value;
}
inline void VirtioPciState_CommonConfig::set_queue_select(uint32_t value) {
  _internal_set_queue_select(value);
  // @@protoc_insertion_point(field_set:VirtioPciState.CommonConfig.queue_select)
}

// -------------------------------------------------------------------

// VirtioPciState_Queue

// bool enabled = 1;
inline void VirtioPciState_Queue::clear_enabled() {
  enabled_ = false;
}
inline bool VirtioPciState_Queue::_internal_enabled() const {
  return enabled_;
}
inline bool VirtioPciState_Queue::enabled() const {
  // @@protoc_insertion_point(field_get:VirtioPciState.Queue.enabled)
  return _internal_enabled();
}
inline void VirtioPciState_Queue::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void VirtioPciState_Queue::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:VirtioPciState.Queue.enabled)
}

// int32 msix_vector = 2;
inline void VirtioPciState_Queue::clear_msix_vector() {
  msix_vector_ = 0;
}
inline int32_t VirtioPciState_Queue::_internal_msix_vector() const {
  return msix_vector_;
}
inline int32_t VirtioPciState_Queue::msix_vector() const {
  // @@protoc_insertion_point(field_get:VirtioPciState.Queue.msix_vector)
  return _internal_msix_vector();
}
inline void VirtioPciState_Queue::_internal_set_msix_vector(int32_t value) {
  
  msix_vector_ = value;
}
inline void VirtioPciState_Queue::set_msix_vector(int32_t value) {
  _internal_set_msix_vector(value);
  // @@protoc_insertion_point(field_set:VirtioPciState.Queue.msix_vector)
}

// int32 size = 4;
inline void VirtioPciState_Queue::clear_size() {
  size_ = 0;
}
inline int32_t VirtioPciState_Queue::_internal_size() const {
  return size_;
}
inline int32_t VirtioPciState_Queue::size() const {
  // @@protoc_insertion_point(field_get:VirtioPciState.Queue.size)
  return _internal_size();
}
inline void VirtioPciState_Queue::_internal_set_size(int32_t value) {
  
  size_ = value;
}
inline void VirtioPciState_Queue::set_size(int32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:VirtioPciState.Queue.size)
}

// uint32 last_available_index = 5;
inline void VirtioPciState_Queue::clear_last_available_index() {
  last_available_index_ = 0u;
}
inline uint32_t VirtioPciState_Queue::_internal_last_available_index() const {
  return last_available_index_;
}
inline uint32_t VirtioPciState_Queue::last_available_index() const {
  // @@protoc_insertion_point(field_get:VirtioPciState.Queue.last_available_index)
  return _internal_last_available_index();
}
inline void VirtioPciState_Queue::_internal_set_last_available_index(uint32_t value) {
  
  last_available_index_ = value;
}
inline void VirtioPciState_Queue::set_last_available_index(uint32_t value) {
  _internal_set_last_available_index(value);
  // @@protoc_insertion_point(field_set:VirtioPciState.Queue.last_available_index)
}

// uint64 descriptor_table_address = 6;
inline void VirtioPciState_Queue::clear_descriptor_table_address() {
  descriptor_table_address_ = uint64_t{0u};
}
inline uint64_t VirtioPciState_Queue::_internal_descriptor_table_address() const {
  return descriptor_table_address_;
}
inline uint64_t VirtioPciState_Queue::descriptor_table_address() const {
  // @@protoc_insertion_point(field_get:VirtioPciState.Queue.descriptor_table_address)
  return _internal_descriptor_table_address();
}
inline void VirtioPciState_Queue::_internal_set_descriptor_table_address(uint64_t value) {
  
  descriptor_table_address_ = value;
}
inline void VirtioPciState_Queue::set_descriptor_table_address(uint64_t value) {
  _internal_set_descriptor_table_address(value);
  // @@protoc_insertion_point(field_set:VirtioPciState.Queue.descriptor_table_address)
}

// uint64 available_ring_address = 7;
inline void VirtioPciState_Queue::clear_available_ring_address() {
  available_ring_address_ = uint64_t{0u};
}
inline uint64_t VirtioPciState_Queue::_internal_available_ring_address() const {
  return available_ring_address_;
}
inline uint64_t VirtioPciState_Queue::available_ring_address() const {
  // @@protoc_insertion_point(field_get:VirtioPciState.Queue.available_ring_address)
  return _internal_available_ring_address();
}
inline void VirtioPciState_Queue::_internal_set_available_ring_address(uint64_t value) {
  
  available_ring_address_ = value;
}
inline void VirtioPciState_Queue::set_available_ring_address(uint64_t value) {
  _internal_set_available_ring_address(value);
  // @@protoc_insertion_point(field_set:VirtioPciState.Queue.available_ring_address)
}

// uint64 used_ring_address = 8;
inline void VirtioPciState_Queue::clear_used_ring_address() {
  used_ring_address_ = uint64_t{0u};
}
inline uint64_t VirtioPciState_Queue::_internal_used_ring_address() const {
  return used_ring_address_;
}
inline uint64_t VirtioPciState_Queue::used_ring_address() const {
  // @@protoc_insertion_point(field_get:VirtioPciState.Queue.used_ring_address)
  return _internal_used_ring_address();
}
inline void VirtioPciState_Queue::_internal_set_used_ring_address(uint64_t value) {
  
  used_ring_address_ = value;
}
inline void VirtioPciState_Queue::set_used_ring_address(uint64_t value) {
  _internal_set_used_ring_address(value);
  // @@protoc_insertion_point(field_set:VirtioPciState.Queue.used_ring_address)
}

// -------------------------------------------------------------------

// VirtioPciState

// .VirtioPciState.CommonConfig common_config = 1;
inline bool VirtioPciState::_internal_has_common_config() const {
  return this != internal_default_instance() && common_config_ != nullptr;
}
inline bool VirtioPciState::has_common_config() const {
  return _internal_has_common_config();
}
inline void VirtioPciState::clear_common_config() {
  if (GetArenaForAllocation() == nullptr && common_config_ != nullptr) {
    delete common_config_;
  }
  common_config_ = nullptr;
}
inline const ::VirtioPciState_CommonConfig& VirtioPciState::_internal_common_config() const {
  const ::VirtioPciState_CommonConfig* p = common_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::VirtioPciState_CommonConfig&>(
      ::_VirtioPciState_CommonConfig_default_instance_);
}
inline const ::VirtioPciState_CommonConfig& VirtioPciState::common_config() const {
  // @@protoc_insertion_point(field_get:VirtioPciState.common_config)
  return _internal_common_config();
}
inline void VirtioPciState::unsafe_arena_set_allocated_common_config(
    ::VirtioPciState_CommonConfig* common_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_config_);
  }
  common_config_ = common_config;
  if (common_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VirtioPciState.common_config)
}
inline ::VirtioPciState_CommonConfig* VirtioPciState::release_common_config() {
  
  ::VirtioPciState_CommonConfig* temp = common_config_;
  common_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::VirtioPciState_CommonConfig* VirtioPciState::unsafe_arena_release_common_config() {
  // @@protoc_insertion_point(field_release:VirtioPciState.common_config)
  
  ::VirtioPciState_CommonConfig* temp = common_config_;
  common_config_ = nullptr;
  return temp;
}
inline ::VirtioPciState_CommonConfig* VirtioPciState::_internal_mutable_common_config() {
  
  if (common_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::VirtioPciState_CommonConfig>(GetArenaForAllocation());
    common_config_ = p;
  }
  return common_config_;
}
inline ::VirtioPciState_CommonConfig* VirtioPciState::mutable_common_config() {
  ::VirtioPciState_CommonConfig* _msg = _internal_mutable_common_config();
  // @@protoc_insertion_point(field_mutable:VirtioPciState.common_config)
  return _msg;
}
inline void VirtioPciState::set_allocated_common_config(::VirtioPciState_CommonConfig* common_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete common_config_;
  }
  if (common_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::VirtioPciState_CommonConfig>::GetOwningArena(common_config);
    if (message_arena != submessage_arena) {
      common_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common_config, submessage_arena);
    }
    
  } else {
    
  }
  common_config_ = common_config;
  // @@protoc_insertion_point(field_set_allocated:VirtioPciState.common_config)
}

// repeated .VirtioPciState.Queue queues = 2;
inline int VirtioPciState::_internal_queues_size() const {
  return queues_.size();
}
inline int VirtioPciState::queues_size() const {
  return _internal_queues_size();
}
inline void VirtioPciState::clear_queues() {
  queues_.Clear();
}
inline ::VirtioPciState_Queue* VirtioPciState::mutable_queues(int index) {
  // @@protoc_insertion_point(field_mutable:VirtioPciState.queues)
  return queues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VirtioPciState_Queue >*
VirtioPciState::mutable_queues() {
  // @@protoc_insertion_point(field_mutable_list:VirtioPciState.queues)
  return &queues_;
}
inline const ::VirtioPciState_Queue& VirtioPciState::_internal_queues(int index) const {
  return queues_.Get(index);
}
inline const ::VirtioPciState_Queue& VirtioPciState::queues(int index) const {
  // @@protoc_insertion_point(field_get:VirtioPciState.queues)
  return _internal_queues(index);
}
inline ::VirtioPciState_Queue* VirtioPciState::_internal_add_queues() {
  return queues_.Add();
}
inline ::VirtioPciState_Queue* VirtioPciState::add_queues() {
  ::VirtioPciState_Queue* _add = _internal_add_queues();
  // @@protoc_insertion_point(field_add:VirtioPciState.queues)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VirtioPciState_Queue >&
VirtioPciState::queues() const {
  // @@protoc_insertion_point(field_list:VirtioPciState.queues)
  return queues_;
}

// uint32 isr_status = 3;
inline void VirtioPciState::clear_isr_status() {
  isr_status_ = 0u;
}
inline uint32_t VirtioPciState::_internal_isr_status() const {
  return isr_status_;
}
inline uint32_t VirtioPciState::isr_status() const {
  // @@protoc_insertion_point(field_get:VirtioPciState.isr_status)
  return _internal_isr_status();
}
inline void VirtioPciState::_internal_set_isr_status(uint32_t value) {
  
  isr_status_ = value;
}
inline void VirtioPciState::set_isr_status(uint32_t value) {
  _internal_set_isr_status(value);
  // @@protoc_insertion_point(field_set:VirtioPciState.isr_status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_virtio_5fpci_2eproto
