// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hda_duplex.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_hda_5fduplex_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_hda_5fduplex_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_hda_5fduplex_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_hda_5fduplex_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hda_5fduplex_2eproto;
class HdaDuplexState;
struct HdaDuplexStateDefaultTypeInternal;
extern HdaDuplexStateDefaultTypeInternal _HdaDuplexState_default_instance_;
class HdaDuplexState_Stream;
struct HdaDuplexState_StreamDefaultTypeInternal;
extern HdaDuplexState_StreamDefaultTypeInternal _HdaDuplexState_Stream_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::HdaDuplexState* Arena::CreateMaybeMessage<::HdaDuplexState>(Arena*);
template<> ::HdaDuplexState_Stream* Arena::CreateMaybeMessage<::HdaDuplexState_Stream>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class HdaDuplexState_Stream final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HdaDuplexState.Stream) */ {
 public:
  inline HdaDuplexState_Stream() : HdaDuplexState_Stream(nullptr) {}
  ~HdaDuplexState_Stream() override;
  explicit constexpr HdaDuplexState_Stream(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HdaDuplexState_Stream(const HdaDuplexState_Stream& from);
  HdaDuplexState_Stream(HdaDuplexState_Stream&& from) noexcept
    : HdaDuplexState_Stream() {
    *this = ::std::move(from);
  }

  inline HdaDuplexState_Stream& operator=(const HdaDuplexState_Stream& from) {
    CopyFrom(from);
    return *this;
  }
  inline HdaDuplexState_Stream& operator=(HdaDuplexState_Stream&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HdaDuplexState_Stream& default_instance() {
    return *internal_default_instance();
  }
  static inline const HdaDuplexState_Stream* internal_default_instance() {
    return reinterpret_cast<const HdaDuplexState_Stream*>(
               &_HdaDuplexState_Stream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HdaDuplexState_Stream& a, HdaDuplexState_Stream& b) {
    a.Swap(&b);
  }
  inline void Swap(HdaDuplexState_Stream* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HdaDuplexState_Stream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HdaDuplexState_Stream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HdaDuplexState_Stream>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HdaDuplexState_Stream& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HdaDuplexState_Stream& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HdaDuplexState_Stream* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HdaDuplexState.Stream";
  }
  protected:
  explicit HdaDuplexState_Stream(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kChannelFieldNumber = 2,
    kFormatFieldNumber = 3,
    kGainLeftFieldNumber = 4,
    kGainRightFieldNumber = 5,
    kMuteLeftFieldNumber = 6,
    kMuteRightFieldNumber = 7,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 channel = 2;
  void clear_channel();
  uint32_t channel() const;
  void set_channel(uint32_t value);
  private:
  uint32_t _internal_channel() const;
  void _internal_set_channel(uint32_t value);
  public:

  // uint32 format = 3;
  void clear_format();
  uint32_t format() const;
  void set_format(uint32_t value);
  private:
  uint32_t _internal_format() const;
  void _internal_set_format(uint32_t value);
  public:

  // uint32 gain_left = 4;
  void clear_gain_left();
  uint32_t gain_left() const;
  void set_gain_left(uint32_t value);
  private:
  uint32_t _internal_gain_left() const;
  void _internal_set_gain_left(uint32_t value);
  public:

  // uint32 gain_right = 5;
  void clear_gain_right();
  uint32_t gain_right() const;
  void set_gain_right(uint32_t value);
  private:
  uint32_t _internal_gain_right() const;
  void _internal_set_gain_right(uint32_t value);
  public:

  // bool mute_left = 6;
  void clear_mute_left();
  bool mute_left() const;
  void set_mute_left(bool value);
  private:
  bool _internal_mute_left() const;
  void _internal_set_mute_left(bool value);
  public:

  // bool mute_right = 7;
  void clear_mute_right();
  bool mute_right() const;
  void set_mute_right(bool value);
  private:
  bool _internal_mute_right() const;
  void _internal_set_mute_right(bool value);
  public:

  // @@protoc_insertion_point(class_scope:HdaDuplexState.Stream)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t id_;
  uint32_t channel_;
  uint32_t format_;
  uint32_t gain_left_;
  uint32_t gain_right_;
  bool mute_left_;
  bool mute_right_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hda_5fduplex_2eproto;
};
// -------------------------------------------------------------------

class HdaDuplexState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HdaDuplexState) */ {
 public:
  inline HdaDuplexState() : HdaDuplexState(nullptr) {}
  ~HdaDuplexState() override;
  explicit constexpr HdaDuplexState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HdaDuplexState(const HdaDuplexState& from);
  HdaDuplexState(HdaDuplexState&& from) noexcept
    : HdaDuplexState() {
    *this = ::std::move(from);
  }

  inline HdaDuplexState& operator=(const HdaDuplexState& from) {
    CopyFrom(from);
    return *this;
  }
  inline HdaDuplexState& operator=(HdaDuplexState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HdaDuplexState& default_instance() {
    return *internal_default_instance();
  }
  static inline const HdaDuplexState* internal_default_instance() {
    return reinterpret_cast<const HdaDuplexState*>(
               &_HdaDuplexState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HdaDuplexState& a, HdaDuplexState& b) {
    a.Swap(&b);
  }
  inline void Swap(HdaDuplexState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HdaDuplexState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HdaDuplexState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HdaDuplexState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HdaDuplexState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HdaDuplexState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HdaDuplexState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HdaDuplexState";
  }
  protected:
  explicit HdaDuplexState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HdaDuplexState_Stream Stream;

  // accessors -------------------------------------------------------

  enum : int {
    kStreamsFieldNumber = 1,
  };
  // repeated .HdaDuplexState.Stream streams = 1;
  int streams_size() const;
  private:
  int _internal_streams_size() const;
  public:
  void clear_streams();
  ::HdaDuplexState_Stream* mutable_streams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HdaDuplexState_Stream >*
      mutable_streams();
  private:
  const ::HdaDuplexState_Stream& _internal_streams(int index) const;
  ::HdaDuplexState_Stream* _internal_add_streams();
  public:
  const ::HdaDuplexState_Stream& streams(int index) const;
  ::HdaDuplexState_Stream* add_streams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HdaDuplexState_Stream >&
      streams() const;

  // @@protoc_insertion_point(class_scope:HdaDuplexState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HdaDuplexState_Stream > streams_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hda_5fduplex_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HdaDuplexState_Stream

// uint32 id = 1;
inline void HdaDuplexState_Stream::clear_id() {
  id_ = 0u;
}
inline uint32_t HdaDuplexState_Stream::_internal_id() const {
  return id_;
}
inline uint32_t HdaDuplexState_Stream::id() const {
  // @@protoc_insertion_point(field_get:HdaDuplexState.Stream.id)
  return _internal_id();
}
inline void HdaDuplexState_Stream::_internal_set_id(uint32_t value) {
  
  id_ = value;
}
inline void HdaDuplexState_Stream::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:HdaDuplexState.Stream.id)
}

// uint32 channel = 2;
inline void HdaDuplexState_Stream::clear_channel() {
  channel_ = 0u;
}
inline uint32_t HdaDuplexState_Stream::_internal_channel() const {
  return channel_;
}
inline uint32_t HdaDuplexState_Stream::channel() const {
  // @@protoc_insertion_point(field_get:HdaDuplexState.Stream.channel)
  return _internal_channel();
}
inline void HdaDuplexState_Stream::_internal_set_channel(uint32_t value) {
  
  channel_ = value;
}
inline void HdaDuplexState_Stream::set_channel(uint32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:HdaDuplexState.Stream.channel)
}

// uint32 format = 3;
inline void HdaDuplexState_Stream::clear_format() {
  format_ = 0u;
}
inline uint32_t HdaDuplexState_Stream::_internal_format() const {
  return format_;
}
inline uint32_t HdaDuplexState_Stream::format() const {
  // @@protoc_insertion_point(field_get:HdaDuplexState.Stream.format)
  return _internal_format();
}
inline void HdaDuplexState_Stream::_internal_set_format(uint32_t value) {
  
  format_ = value;
}
inline void HdaDuplexState_Stream::set_format(uint32_t value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:HdaDuplexState.Stream.format)
}

// uint32 gain_left = 4;
inline void HdaDuplexState_Stream::clear_gain_left() {
  gain_left_ = 0u;
}
inline uint32_t HdaDuplexState_Stream::_internal_gain_left() const {
  return gain_left_;
}
inline uint32_t HdaDuplexState_Stream::gain_left() const {
  // @@protoc_insertion_point(field_get:HdaDuplexState.Stream.gain_left)
  return _internal_gain_left();
}
inline void HdaDuplexState_Stream::_internal_set_gain_left(uint32_t value) {
  
  gain_left_ = value;
}
inline void HdaDuplexState_Stream::set_gain_left(uint32_t value) {
  _internal_set_gain_left(value);
  // @@protoc_insertion_point(field_set:HdaDuplexState.Stream.gain_left)
}

// uint32 gain_right = 5;
inline void HdaDuplexState_Stream::clear_gain_right() {
  gain_right_ = 0u;
}
inline uint32_t HdaDuplexState_Stream::_internal_gain_right() const {
  return gain_right_;
}
inline uint32_t HdaDuplexState_Stream::gain_right() const {
  // @@protoc_insertion_point(field_get:HdaDuplexState.Stream.gain_right)
  return _internal_gain_right();
}
inline void HdaDuplexState_Stream::_internal_set_gain_right(uint32_t value) {
  
  gain_right_ = value;
}
inline void HdaDuplexState_Stream::set_gain_right(uint32_t value) {
  _internal_set_gain_right(value);
  // @@protoc_insertion_point(field_set:HdaDuplexState.Stream.gain_right)
}

// bool mute_left = 6;
inline void HdaDuplexState_Stream::clear_mute_left() {
  mute_left_ = false;
}
inline bool HdaDuplexState_Stream::_internal_mute_left() const {
  return mute_left_;
}
inline bool HdaDuplexState_Stream::mute_left() const {
  // @@protoc_insertion_point(field_get:HdaDuplexState.Stream.mute_left)
  return _internal_mute_left();
}
inline void HdaDuplexState_Stream::_internal_set_mute_left(bool value) {
  
  mute_left_ = value;
}
inline void HdaDuplexState_Stream::set_mute_left(bool value) {
  _internal_set_mute_left(value);
  // @@protoc_insertion_point(field_set:HdaDuplexState.Stream.mute_left)
}

// bool mute_right = 7;
inline void HdaDuplexState_Stream::clear_mute_right() {
  mute_right_ = false;
}
inline bool HdaDuplexState_Stream::_internal_mute_right() const {
  return mute_right_;
}
inline bool HdaDuplexState_Stream::mute_right() const {
  // @@protoc_insertion_point(field_get:HdaDuplexState.Stream.mute_right)
  return _internal_mute_right();
}
inline void HdaDuplexState_Stream::_internal_set_mute_right(bool value) {
  
  mute_right_ = value;
}
inline void HdaDuplexState_Stream::set_mute_right(bool value) {
  _internal_set_mute_right(value);
  // @@protoc_insertion_point(field_set:HdaDuplexState.Stream.mute_right)
}

// -------------------------------------------------------------------

// HdaDuplexState

// repeated .HdaDuplexState.Stream streams = 1;
inline int HdaDuplexState::_internal_streams_size() const {
  return streams_.size();
}
inline int HdaDuplexState::streams_size() const {
  return _internal_streams_size();
}
inline void HdaDuplexState::clear_streams() {
  streams_.Clear();
}
inline ::HdaDuplexState_Stream* HdaDuplexState::mutable_streams(int index) {
  // @@protoc_insertion_point(field_mutable:HdaDuplexState.streams)
  return streams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HdaDuplexState_Stream >*
HdaDuplexState::mutable_streams() {
  // @@protoc_insertion_point(field_mutable_list:HdaDuplexState.streams)
  return &streams_;
}
inline const ::HdaDuplexState_Stream& HdaDuplexState::_internal_streams(int index) const {
  return streams_.Get(index);
}
inline const ::HdaDuplexState_Stream& HdaDuplexState::streams(int index) const {
  // @@protoc_insertion_point(field_get:HdaDuplexState.streams)
  return _internal_streams(index);
}
inline ::HdaDuplexState_Stream* HdaDuplexState::_internal_add_streams() {
  return streams_.Add();
}
inline ::HdaDuplexState_Stream* HdaDuplexState::add_streams() {
  ::HdaDuplexState_Stream* _add = _internal_add_streams();
  // @@protoc_insertion_point(field_add:HdaDuplexState.streams)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HdaDuplexState_Stream >&
HdaDuplexState::streams() const {
  // @@protoc_insertion_point(field_list:HdaDuplexState.streams)
  return streams_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_hda_5fduplex_2eproto
