// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pci_device.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pci_5fdevice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pci_5fdevice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pci_5fdevice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pci_5fdevice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pci_5fdevice_2eproto;
class PciDeviceState;
struct PciDeviceStateDefaultTypeInternal;
extern PciDeviceStateDefaultTypeInternal _PciDeviceState_default_instance_;
class PciDeviceState_MsiXTableEntry;
struct PciDeviceState_MsiXTableEntryDefaultTypeInternal;
extern PciDeviceState_MsiXTableEntryDefaultTypeInternal _PciDeviceState_MsiXTableEntry_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::PciDeviceState* Arena::CreateMaybeMessage<::PciDeviceState>(Arena*);
template<> ::PciDeviceState_MsiXTableEntry* Arena::CreateMaybeMessage<::PciDeviceState_MsiXTableEntry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PciDeviceState_MsiXTableEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PciDeviceState.MsiXTableEntry) */ {
 public:
  inline PciDeviceState_MsiXTableEntry() : PciDeviceState_MsiXTableEntry(nullptr) {}
  ~PciDeviceState_MsiXTableEntry() override;
  explicit constexpr PciDeviceState_MsiXTableEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PciDeviceState_MsiXTableEntry(const PciDeviceState_MsiXTableEntry& from);
  PciDeviceState_MsiXTableEntry(PciDeviceState_MsiXTableEntry&& from) noexcept
    : PciDeviceState_MsiXTableEntry() {
    *this = ::std::move(from);
  }

  inline PciDeviceState_MsiXTableEntry& operator=(const PciDeviceState_MsiXTableEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline PciDeviceState_MsiXTableEntry& operator=(PciDeviceState_MsiXTableEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PciDeviceState_MsiXTableEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const PciDeviceState_MsiXTableEntry* internal_default_instance() {
    return reinterpret_cast<const PciDeviceState_MsiXTableEntry*>(
               &_PciDeviceState_MsiXTableEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PciDeviceState_MsiXTableEntry& a, PciDeviceState_MsiXTableEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(PciDeviceState_MsiXTableEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PciDeviceState_MsiXTableEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PciDeviceState_MsiXTableEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PciDeviceState_MsiXTableEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PciDeviceState_MsiXTableEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PciDeviceState_MsiXTableEntry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PciDeviceState_MsiXTableEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PciDeviceState.MsiXTableEntry";
  }
  protected:
  explicit PciDeviceState_MsiXTableEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kDataFieldNumber = 2,
    kControlFieldNumber = 3,
  };
  // uint64 address = 1;
  void clear_address();
  uint64_t address() const;
  void set_address(uint64_t value);
  private:
  uint64_t _internal_address() const;
  void _internal_set_address(uint64_t value);
  public:

  // uint32 data = 2;
  void clear_data();
  uint32_t data() const;
  void set_data(uint32_t value);
  private:
  uint32_t _internal_data() const;
  void _internal_set_data(uint32_t value);
  public:

  // uint32 control = 3;
  void clear_control();
  uint32_t control() const;
  void set_control(uint32_t value);
  private:
  uint32_t _internal_control() const;
  void _internal_set_control(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PciDeviceState.MsiXTableEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t address_;
  uint32_t data_;
  uint32_t control_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pci_5fdevice_2eproto;
};
// -------------------------------------------------------------------

class PciDeviceState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PciDeviceState) */ {
 public:
  inline PciDeviceState() : PciDeviceState(nullptr) {}
  ~PciDeviceState() override;
  explicit constexpr PciDeviceState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PciDeviceState(const PciDeviceState& from);
  PciDeviceState(PciDeviceState&& from) noexcept
    : PciDeviceState() {
    *this = ::std::move(from);
  }

  inline PciDeviceState& operator=(const PciDeviceState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PciDeviceState& operator=(PciDeviceState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PciDeviceState& default_instance() {
    return *internal_default_instance();
  }
  static inline const PciDeviceState* internal_default_instance() {
    return reinterpret_cast<const PciDeviceState*>(
               &_PciDeviceState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PciDeviceState& a, PciDeviceState& b) {
    a.Swap(&b);
  }
  inline void Swap(PciDeviceState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PciDeviceState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PciDeviceState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PciDeviceState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PciDeviceState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PciDeviceState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PciDeviceState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PciDeviceState";
  }
  protected:
  explicit PciDeviceState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PciDeviceState_MsiXTableEntry MsiXTableEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kMsixEntriesFieldNumber = 5,
    kConfigSpaceFieldNumber = 4,
    kBusFieldNumber = 1,
    kSlotFieldNumber = 2,
    kFunctionFieldNumber = 3,
    kPcieFieldNumber = 6,
  };
  // repeated .PciDeviceState.MsiXTableEntry msix_entries = 5;
  int msix_entries_size() const;
  private:
  int _internal_msix_entries_size() const;
  public:
  void clear_msix_entries();
  ::PciDeviceState_MsiXTableEntry* mutable_msix_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PciDeviceState_MsiXTableEntry >*
      mutable_msix_entries();
  private:
  const ::PciDeviceState_MsiXTableEntry& _internal_msix_entries(int index) const;
  ::PciDeviceState_MsiXTableEntry* _internal_add_msix_entries();
  public:
  const ::PciDeviceState_MsiXTableEntry& msix_entries(int index) const;
  ::PciDeviceState_MsiXTableEntry* add_msix_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PciDeviceState_MsiXTableEntry >&
      msix_entries() const;

  // bytes config_space = 4;
  void clear_config_space();
  const std::string& config_space() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_config_space(ArgT0&& arg0, ArgT... args);
  std::string* mutable_config_space();
  PROTOBUF_NODISCARD std::string* release_config_space();
  void set_allocated_config_space(std::string* config_space);
  private:
  const std::string& _internal_config_space() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_config_space(const std::string& value);
  std::string* _internal_mutable_config_space();
  public:

  // uint32 bus = 1;
  void clear_bus();
  uint32_t bus() const;
  void set_bus(uint32_t value);
  private:
  uint32_t _internal_bus() const;
  void _internal_set_bus(uint32_t value);
  public:

  // uint32 slot = 2;
  void clear_slot();
  uint32_t slot() const;
  void set_slot(uint32_t value);
  private:
  uint32_t _internal_slot() const;
  void _internal_set_slot(uint32_t value);
  public:

  // uint32 function = 3;
  void clear_function();
  uint32_t function() const;
  void set_function(uint32_t value);
  private:
  uint32_t _internal_function() const;
  void _internal_set_function(uint32_t value);
  public:

  // bool pcie = 6;
  void clear_pcie();
  bool pcie() const;
  void set_pcie(bool value);
  private:
  bool _internal_pcie() const;
  void _internal_set_pcie(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PciDeviceState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PciDeviceState_MsiXTableEntry > msix_entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_space_;
  uint32_t bus_;
  uint32_t slot_;
  uint32_t function_;
  bool pcie_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pci_5fdevice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PciDeviceState_MsiXTableEntry

// uint64 address = 1;
inline void PciDeviceState_MsiXTableEntry::clear_address() {
  address_ = uint64_t{0u};
}
inline uint64_t PciDeviceState_MsiXTableEntry::_internal_address() const {
  return address_;
}
inline uint64_t PciDeviceState_MsiXTableEntry::address() const {
  // @@protoc_insertion_point(field_get:PciDeviceState.MsiXTableEntry.address)
  return _internal_address();
}
inline void PciDeviceState_MsiXTableEntry::_internal_set_address(uint64_t value) {
  
  address_ = value;
}
inline void PciDeviceState_MsiXTableEntry::set_address(uint64_t value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:PciDeviceState.MsiXTableEntry.address)
}

// uint32 data = 2;
inline void PciDeviceState_MsiXTableEntry::clear_data() {
  data_ = 0u;
}
inline uint32_t PciDeviceState_MsiXTableEntry::_internal_data() const {
  return data_;
}
inline uint32_t PciDeviceState_MsiXTableEntry::data() const {
  // @@protoc_insertion_point(field_get:PciDeviceState.MsiXTableEntry.data)
  return _internal_data();
}
inline void PciDeviceState_MsiXTableEntry::_internal_set_data(uint32_t value) {
  
  data_ = value;
}
inline void PciDeviceState_MsiXTableEntry::set_data(uint32_t value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:PciDeviceState.MsiXTableEntry.data)
}

// uint32 control = 3;
inline void PciDeviceState_MsiXTableEntry::clear_control() {
  control_ = 0u;
}
inline uint32_t PciDeviceState_MsiXTableEntry::_internal_control() const {
  return control_;
}
inline uint32_t PciDeviceState_MsiXTableEntry::control() const {
  // @@protoc_insertion_point(field_get:PciDeviceState.MsiXTableEntry.control)
  return _internal_control();
}
inline void PciDeviceState_MsiXTableEntry::_internal_set_control(uint32_t value) {
  
  control_ = value;
}
inline void PciDeviceState_MsiXTableEntry::set_control(uint32_t value) {
  _internal_set_control(value);
  // @@protoc_insertion_point(field_set:PciDeviceState.MsiXTableEntry.control)
}

// -------------------------------------------------------------------

// PciDeviceState

// uint32 bus = 1;
inline void PciDeviceState::clear_bus() {
  bus_ = 0u;
}
inline uint32_t PciDeviceState::_internal_bus() const {
  return bus_;
}
inline uint32_t PciDeviceState::bus() const {
  // @@protoc_insertion_point(field_get:PciDeviceState.bus)
  return _internal_bus();
}
inline void PciDeviceState::_internal_set_bus(uint32_t value) {
  
  bus_ = value;
}
inline void PciDeviceState::set_bus(uint32_t value) {
  _internal_set_bus(value);
  // @@protoc_insertion_point(field_set:PciDeviceState.bus)
}

// uint32 slot = 2;
inline void PciDeviceState::clear_slot() {
  slot_ = 0u;
}
inline uint32_t PciDeviceState::_internal_slot() const {
  return slot_;
}
inline uint32_t PciDeviceState::slot() const {
  // @@protoc_insertion_point(field_get:PciDeviceState.slot)
  return _internal_slot();
}
inline void PciDeviceState::_internal_set_slot(uint32_t value) {
  
  slot_ = value;
}
inline void PciDeviceState::set_slot(uint32_t value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:PciDeviceState.slot)
}

// uint32 function = 3;
inline void PciDeviceState::clear_function() {
  function_ = 0u;
}
inline uint32_t PciDeviceState::_internal_function() const {
  return function_;
}
inline uint32_t PciDeviceState::function() const {
  // @@protoc_insertion_point(field_get:PciDeviceState.function)
  return _internal_function();
}
inline void PciDeviceState::_internal_set_function(uint32_t value) {
  
  function_ = value;
}
inline void PciDeviceState::set_function(uint32_t value) {
  _internal_set_function(value);
  // @@protoc_insertion_point(field_set:PciDeviceState.function)
}

// bytes config_space = 4;
inline void PciDeviceState::clear_config_space() {
  config_space_.ClearToEmpty();
}
inline const std::string& PciDeviceState::config_space() const {
  // @@protoc_insertion_point(field_get:PciDeviceState.config_space)
  return _internal_config_space();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PciDeviceState::set_config_space(ArgT0&& arg0, ArgT... args) {
 
 config_space_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PciDeviceState.config_space)
}
inline std::string* PciDeviceState::mutable_config_space() {
  std::string* _s = _internal_mutable_config_space();
  // @@protoc_insertion_point(field_mutable:PciDeviceState.config_space)
  return _s;
}
inline const std::string& PciDeviceState::_internal_config_space() const {
  return config_space_.Get();
}
inline void PciDeviceState::_internal_set_config_space(const std::string& value) {
  
  config_space_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PciDeviceState::_internal_mutable_config_space() {
  
  return config_space_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PciDeviceState::release_config_space() {
  // @@protoc_insertion_point(field_release:PciDeviceState.config_space)
  return config_space_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PciDeviceState::set_allocated_config_space(std::string* config_space) {
  if (config_space != nullptr) {
    
  } else {
    
  }
  config_space_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config_space,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (config_space_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    config_space_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PciDeviceState.config_space)
}

// repeated .PciDeviceState.MsiXTableEntry msix_entries = 5;
inline int PciDeviceState::_internal_msix_entries_size() const {
  return msix_entries_.size();
}
inline int PciDeviceState::msix_entries_size() const {
  return _internal_msix_entries_size();
}
inline void PciDeviceState::clear_msix_entries() {
  msix_entries_.Clear();
}
inline ::PciDeviceState_MsiXTableEntry* PciDeviceState::mutable_msix_entries(int index) {
  // @@protoc_insertion_point(field_mutable:PciDeviceState.msix_entries)
  return msix_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PciDeviceState_MsiXTableEntry >*
PciDeviceState::mutable_msix_entries() {
  // @@protoc_insertion_point(field_mutable_list:PciDeviceState.msix_entries)
  return &msix_entries_;
}
inline const ::PciDeviceState_MsiXTableEntry& PciDeviceState::_internal_msix_entries(int index) const {
  return msix_entries_.Get(index);
}
inline const ::PciDeviceState_MsiXTableEntry& PciDeviceState::msix_entries(int index) const {
  // @@protoc_insertion_point(field_get:PciDeviceState.msix_entries)
  return _internal_msix_entries(index);
}
inline ::PciDeviceState_MsiXTableEntry* PciDeviceState::_internal_add_msix_entries() {
  return msix_entries_.Add();
}
inline ::PciDeviceState_MsiXTableEntry* PciDeviceState::add_msix_entries() {
  ::PciDeviceState_MsiXTableEntry* _add = _internal_add_msix_entries();
  // @@protoc_insertion_point(field_add:PciDeviceState.msix_entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PciDeviceState_MsiXTableEntry >&
PciDeviceState::msix_entries() const {
  // @@protoc_insertion_point(field_list:PciDeviceState.msix_entries)
  return msix_entries_;
}

// bool pcie = 6;
inline void PciDeviceState::clear_pcie() {
  pcie_ = false;
}
inline bool PciDeviceState::_internal_pcie() const {
  return pcie_;
}
inline bool PciDeviceState::pcie() const {
  // @@protoc_insertion_point(field_get:PciDeviceState.pcie)
  return _internal_pcie();
}
inline void PciDeviceState::_internal_set_pcie(bool value) {
  
  pcie_ = value;
}
inline void PciDeviceState::set_pcie(bool value) {
  _internal_set_pcie(value);
  // @@protoc_insertion_point(field_set:PciDeviceState.pcie)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pci_5fdevice_2eproto
