// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ps2.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ps2_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ps2_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ps2_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ps2_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ps2_2eproto;
class Ps2State;
struct Ps2StateDefaultTypeInternal;
extern Ps2StateDefaultTypeInternal _Ps2State_default_instance_;
class Ps2State_Keyboard;
struct Ps2State_KeyboardDefaultTypeInternal;
extern Ps2State_KeyboardDefaultTypeInternal _Ps2State_Keyboard_default_instance_;
class Ps2State_Mouse;
struct Ps2State_MouseDefaultTypeInternal;
extern Ps2State_MouseDefaultTypeInternal _Ps2State_Mouse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Ps2State* Arena::CreateMaybeMessage<::Ps2State>(Arena*);
template<> ::Ps2State_Keyboard* Arena::CreateMaybeMessage<::Ps2State_Keyboard>(Arena*);
template<> ::Ps2State_Mouse* Arena::CreateMaybeMessage<::Ps2State_Mouse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Ps2State_Mouse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Ps2State.Mouse) */ {
 public:
  inline Ps2State_Mouse() : Ps2State_Mouse(nullptr) {}
  ~Ps2State_Mouse() override;
  explicit constexpr Ps2State_Mouse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ps2State_Mouse(const Ps2State_Mouse& from);
  Ps2State_Mouse(Ps2State_Mouse&& from) noexcept
    : Ps2State_Mouse() {
    *this = ::std::move(from);
  }

  inline Ps2State_Mouse& operator=(const Ps2State_Mouse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ps2State_Mouse& operator=(Ps2State_Mouse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ps2State_Mouse& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ps2State_Mouse* internal_default_instance() {
    return reinterpret_cast<const Ps2State_Mouse*>(
               &_Ps2State_Mouse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Ps2State_Mouse& a, Ps2State_Mouse& b) {
    a.Swap(&b);
  }
  inline void Swap(Ps2State_Mouse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ps2State_Mouse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ps2State_Mouse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ps2State_Mouse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ps2State_Mouse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Ps2State_Mouse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ps2State_Mouse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Ps2State.Mouse";
  }
  protected:
  explicit Ps2State_Mouse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kButtonsFieldNumber = 1,
    kDxFieldNumber = 2,
    kDyFieldNumber = 3,
    kResolutionFieldNumber = 4,
    kSampleRateFieldNumber = 5,
    kScalingFieldNumber = 6,
    kStreamModeFieldNumber = 7,
  };
  // uint32 buttons = 1;
  void clear_buttons();
  uint32_t buttons() const;
  void set_buttons(uint32_t value);
  private:
  uint32_t _internal_buttons() const;
  void _internal_set_buttons(uint32_t value);
  public:

  // uint32 dx = 2;
  void clear_dx();
  uint32_t dx() const;
  void set_dx(uint32_t value);
  private:
  uint32_t _internal_dx() const;
  void _internal_set_dx(uint32_t value);
  public:

  // uint32 dy = 3;
  void clear_dy();
  uint32_t dy() const;
  void set_dy(uint32_t value);
  private:
  uint32_t _internal_dy() const;
  void _internal_set_dy(uint32_t value);
  public:

  // uint32 resolution = 4;
  void clear_resolution();
  uint32_t resolution() const;
  void set_resolution(uint32_t value);
  private:
  uint32_t _internal_resolution() const;
  void _internal_set_resolution(uint32_t value);
  public:

  // uint32 sample_rate = 5;
  void clear_sample_rate();
  uint32_t sample_rate() const;
  void set_sample_rate(uint32_t value);
  private:
  uint32_t _internal_sample_rate() const;
  void _internal_set_sample_rate(uint32_t value);
  public:

  // uint32 scaling = 6;
  void clear_scaling();
  uint32_t scaling() const;
  void set_scaling(uint32_t value);
  private:
  uint32_t _internal_scaling() const;
  void _internal_set_scaling(uint32_t value);
  public:

  // uint32 stream_mode = 7;
  void clear_stream_mode();
  uint32_t stream_mode() const;
  void set_stream_mode(uint32_t value);
  private:
  uint32_t _internal_stream_mode() const;
  void _internal_set_stream_mode(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Ps2State.Mouse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t buttons_;
  uint32_t dx_;
  uint32_t dy_;
  uint32_t resolution_;
  uint32_t sample_rate_;
  uint32_t scaling_;
  uint32_t stream_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ps2_2eproto;
};
// -------------------------------------------------------------------

class Ps2State_Keyboard final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Ps2State.Keyboard) */ {
 public:
  inline Ps2State_Keyboard() : Ps2State_Keyboard(nullptr) {}
  ~Ps2State_Keyboard() override;
  explicit constexpr Ps2State_Keyboard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ps2State_Keyboard(const Ps2State_Keyboard& from);
  Ps2State_Keyboard(Ps2State_Keyboard&& from) noexcept
    : Ps2State_Keyboard() {
    *this = ::std::move(from);
  }

  inline Ps2State_Keyboard& operator=(const Ps2State_Keyboard& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ps2State_Keyboard& operator=(Ps2State_Keyboard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ps2State_Keyboard& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ps2State_Keyboard* internal_default_instance() {
    return reinterpret_cast<const Ps2State_Keyboard*>(
               &_Ps2State_Keyboard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Ps2State_Keyboard& a, Ps2State_Keyboard& b) {
    a.Swap(&b);
  }
  inline void Swap(Ps2State_Keyboard* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ps2State_Keyboard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ps2State_Keyboard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ps2State_Keyboard>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ps2State_Keyboard& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Ps2State_Keyboard& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ps2State_Keyboard* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Ps2State.Keyboard";
  }
  protected:
  explicit Ps2State_Keyboard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScancodeSetFieldNumber = 1,
    kLedsFieldNumber = 2,
  };
  // uint32 scancode_set = 1;
  void clear_scancode_set();
  uint32_t scancode_set() const;
  void set_scancode_set(uint32_t value);
  private:
  uint32_t _internal_scancode_set() const;
  void _internal_set_scancode_set(uint32_t value);
  public:

  // uint32 leds = 2;
  void clear_leds();
  uint32_t leds() const;
  void set_leds(uint32_t value);
  private:
  uint32_t _internal_leds() const;
  void _internal_set_leds(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Ps2State.Keyboard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t scancode_set_;
  uint32_t leds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ps2_2eproto;
};
// -------------------------------------------------------------------

class Ps2State final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Ps2State) */ {
 public:
  inline Ps2State() : Ps2State(nullptr) {}
  ~Ps2State() override;
  explicit constexpr Ps2State(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ps2State(const Ps2State& from);
  Ps2State(Ps2State&& from) noexcept
    : Ps2State() {
    *this = ::std::move(from);
  }

  inline Ps2State& operator=(const Ps2State& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ps2State& operator=(Ps2State&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ps2State& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ps2State* internal_default_instance() {
    return reinterpret_cast<const Ps2State*>(
               &_Ps2State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Ps2State& a, Ps2State& b) {
    a.Swap(&b);
  }
  inline void Swap(Ps2State* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ps2State* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ps2State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ps2State>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ps2State& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Ps2State& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ps2State* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Ps2State";
  }
  protected:
  explicit Ps2State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Ps2State_Mouse Mouse;
  typedef Ps2State_Keyboard Keyboard;

  // accessors -------------------------------------------------------

  enum : int {
    kKeyboardFieldNumber = 3,
    kMouseFieldNumber = 4,
    kStatusFieldNumber = 1,
    kModeFieldNumber = 2,
  };
  // .Ps2State.Keyboard keyboard = 3;
  bool has_keyboard() const;
  private:
  bool _internal_has_keyboard() const;
  public:
  void clear_keyboard();
  const ::Ps2State_Keyboard& keyboard() const;
  PROTOBUF_NODISCARD ::Ps2State_Keyboard* release_keyboard();
  ::Ps2State_Keyboard* mutable_keyboard();
  void set_allocated_keyboard(::Ps2State_Keyboard* keyboard);
  private:
  const ::Ps2State_Keyboard& _internal_keyboard() const;
  ::Ps2State_Keyboard* _internal_mutable_keyboard();
  public:
  void unsafe_arena_set_allocated_keyboard(
      ::Ps2State_Keyboard* keyboard);
  ::Ps2State_Keyboard* unsafe_arena_release_keyboard();

  // .Ps2State.Mouse mouse = 4;
  bool has_mouse() const;
  private:
  bool _internal_has_mouse() const;
  public:
  void clear_mouse();
  const ::Ps2State_Mouse& mouse() const;
  PROTOBUF_NODISCARD ::Ps2State_Mouse* release_mouse();
  ::Ps2State_Mouse* mutable_mouse();
  void set_allocated_mouse(::Ps2State_Mouse* mouse);
  private:
  const ::Ps2State_Mouse& _internal_mouse() const;
  ::Ps2State_Mouse* _internal_mutable_mouse();
  public:
  void unsafe_arena_set_allocated_mouse(
      ::Ps2State_Mouse* mouse);
  ::Ps2State_Mouse* unsafe_arena_release_mouse();

  // uint32 status = 1;
  void clear_status();
  uint32_t status() const;
  void set_status(uint32_t value);
  private:
  uint32_t _internal_status() const;
  void _internal_set_status(uint32_t value);
  public:

  // uint32 mode = 2;
  void clear_mode();
  uint32_t mode() const;
  void set_mode(uint32_t value);
  private:
  uint32_t _internal_mode() const;
  void _internal_set_mode(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Ps2State)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Ps2State_Keyboard* keyboard_;
  ::Ps2State_Mouse* mouse_;
  uint32_t status_;
  uint32_t mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ps2_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ps2State_Mouse

// uint32 buttons = 1;
inline void Ps2State_Mouse::clear_buttons() {
  buttons_ = 0u;
}
inline uint32_t Ps2State_Mouse::_internal_buttons() const {
  return buttons_;
}
inline uint32_t Ps2State_Mouse::buttons() const {
  // @@protoc_insertion_point(field_get:Ps2State.Mouse.buttons)
  return _internal_buttons();
}
inline void Ps2State_Mouse::_internal_set_buttons(uint32_t value) {
  
  buttons_ = value;
}
inline void Ps2State_Mouse::set_buttons(uint32_t value) {
  _internal_set_buttons(value);
  // @@protoc_insertion_point(field_set:Ps2State.Mouse.buttons)
}

// uint32 dx = 2;
inline void Ps2State_Mouse::clear_dx() {
  dx_ = 0u;
}
inline uint32_t Ps2State_Mouse::_internal_dx() const {
  return dx_;
}
inline uint32_t Ps2State_Mouse::dx() const {
  // @@protoc_insertion_point(field_get:Ps2State.Mouse.dx)
  return _internal_dx();
}
inline void Ps2State_Mouse::_internal_set_dx(uint32_t value) {
  
  dx_ = value;
}
inline void Ps2State_Mouse::set_dx(uint32_t value) {
  _internal_set_dx(value);
  // @@protoc_insertion_point(field_set:Ps2State.Mouse.dx)
}

// uint32 dy = 3;
inline void Ps2State_Mouse::clear_dy() {
  dy_ = 0u;
}
inline uint32_t Ps2State_Mouse::_internal_dy() const {
  return dy_;
}
inline uint32_t Ps2State_Mouse::dy() const {
  // @@protoc_insertion_point(field_get:Ps2State.Mouse.dy)
  return _internal_dy();
}
inline void Ps2State_Mouse::_internal_set_dy(uint32_t value) {
  
  dy_ = value;
}
inline void Ps2State_Mouse::set_dy(uint32_t value) {
  _internal_set_dy(value);
  // @@protoc_insertion_point(field_set:Ps2State.Mouse.dy)
}

// uint32 resolution = 4;
inline void Ps2State_Mouse::clear_resolution() {
  resolution_ = 0u;
}
inline uint32_t Ps2State_Mouse::_internal_resolution() const {
  return resolution_;
}
inline uint32_t Ps2State_Mouse::resolution() const {
  // @@protoc_insertion_point(field_get:Ps2State.Mouse.resolution)
  return _internal_resolution();
}
inline void Ps2State_Mouse::_internal_set_resolution(uint32_t value) {
  
  resolution_ = value;
}
inline void Ps2State_Mouse::set_resolution(uint32_t value) {
  _internal_set_resolution(value);
  // @@protoc_insertion_point(field_set:Ps2State.Mouse.resolution)
}

// uint32 sample_rate = 5;
inline void Ps2State_Mouse::clear_sample_rate() {
  sample_rate_ = 0u;
}
inline uint32_t Ps2State_Mouse::_internal_sample_rate() const {
  return sample_rate_;
}
inline uint32_t Ps2State_Mouse::sample_rate() const {
  // @@protoc_insertion_point(field_get:Ps2State.Mouse.sample_rate)
  return _internal_sample_rate();
}
inline void Ps2State_Mouse::_internal_set_sample_rate(uint32_t value) {
  
  sample_rate_ = value;
}
inline void Ps2State_Mouse::set_sample_rate(uint32_t value) {
  _internal_set_sample_rate(value);
  // @@protoc_insertion_point(field_set:Ps2State.Mouse.sample_rate)
}

// uint32 scaling = 6;
inline void Ps2State_Mouse::clear_scaling() {
  scaling_ = 0u;
}
inline uint32_t Ps2State_Mouse::_internal_scaling() const {
  return scaling_;
}
inline uint32_t Ps2State_Mouse::scaling() const {
  // @@protoc_insertion_point(field_get:Ps2State.Mouse.scaling)
  return _internal_scaling();
}
inline void Ps2State_Mouse::_internal_set_scaling(uint32_t value) {
  
  scaling_ = value;
}
inline void Ps2State_Mouse::set_scaling(uint32_t value) {
  _internal_set_scaling(value);
  // @@protoc_insertion_point(field_set:Ps2State.Mouse.scaling)
}

// uint32 stream_mode = 7;
inline void Ps2State_Mouse::clear_stream_mode() {
  stream_mode_ = 0u;
}
inline uint32_t Ps2State_Mouse::_internal_stream_mode() const {
  return stream_mode_;
}
inline uint32_t Ps2State_Mouse::stream_mode() const {
  // @@protoc_insertion_point(field_get:Ps2State.Mouse.stream_mode)
  return _internal_stream_mode();
}
inline void Ps2State_Mouse::_internal_set_stream_mode(uint32_t value) {
  
  stream_mode_ = value;
}
inline void Ps2State_Mouse::set_stream_mode(uint32_t value) {
  _internal_set_stream_mode(value);
  // @@protoc_insertion_point(field_set:Ps2State.Mouse.stream_mode)
}

// -------------------------------------------------------------------

// Ps2State_Keyboard

// uint32 scancode_set = 1;
inline void Ps2State_Keyboard::clear_scancode_set() {
  scancode_set_ = 0u;
}
inline uint32_t Ps2State_Keyboard::_internal_scancode_set() const {
  return scancode_set_;
}
inline uint32_t Ps2State_Keyboard::scancode_set() const {
  // @@protoc_insertion_point(field_get:Ps2State.Keyboard.scancode_set)
  return _internal_scancode_set();
}
inline void Ps2State_Keyboard::_internal_set_scancode_set(uint32_t value) {
  
  scancode_set_ = value;
}
inline void Ps2State_Keyboard::set_scancode_set(uint32_t value) {
  _internal_set_scancode_set(value);
  // @@protoc_insertion_point(field_set:Ps2State.Keyboard.scancode_set)
}

// uint32 leds = 2;
inline void Ps2State_Keyboard::clear_leds() {
  leds_ = 0u;
}
inline uint32_t Ps2State_Keyboard::_internal_leds() const {
  return leds_;
}
inline uint32_t Ps2State_Keyboard::leds() const {
  // @@protoc_insertion_point(field_get:Ps2State.Keyboard.leds)
  return _internal_leds();
}
inline void Ps2State_Keyboard::_internal_set_leds(uint32_t value) {
  
  leds_ = value;
}
inline void Ps2State_Keyboard::set_leds(uint32_t value) {
  _internal_set_leds(value);
  // @@protoc_insertion_point(field_set:Ps2State.Keyboard.leds)
}

// -------------------------------------------------------------------

// Ps2State

// uint32 status = 1;
inline void Ps2State::clear_status() {
  status_ = 0u;
}
inline uint32_t Ps2State::_internal_status() const {
  return status_;
}
inline uint32_t Ps2State::status() const {
  // @@protoc_insertion_point(field_get:Ps2State.status)
  return _internal_status();
}
inline void Ps2State::_internal_set_status(uint32_t value) {
  
  status_ = value;
}
inline void Ps2State::set_status(uint32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:Ps2State.status)
}

// uint32 mode = 2;
inline void Ps2State::clear_mode() {
  mode_ = 0u;
}
inline uint32_t Ps2State::_internal_mode() const {
  return mode_;
}
inline uint32_t Ps2State::mode() const {
  // @@protoc_insertion_point(field_get:Ps2State.mode)
  return _internal_mode();
}
inline void Ps2State::_internal_set_mode(uint32_t value) {
  
  mode_ = value;
}
inline void Ps2State::set_mode(uint32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:Ps2State.mode)
}

// .Ps2State.Keyboard keyboard = 3;
inline bool Ps2State::_internal_has_keyboard() const {
  return this != internal_default_instance() && keyboard_ != nullptr;
}
inline bool Ps2State::has_keyboard() const {
  return _internal_has_keyboard();
}
inline void Ps2State::clear_keyboard() {
  if (GetArenaForAllocation() == nullptr && keyboard_ != nullptr) {
    delete keyboard_;
  }
  keyboard_ = nullptr;
}
inline const ::Ps2State_Keyboard& Ps2State::_internal_keyboard() const {
  const ::Ps2State_Keyboard* p = keyboard_;
  return p != nullptr ? *p : reinterpret_cast<const ::Ps2State_Keyboard&>(
      ::_Ps2State_Keyboard_default_instance_);
}
inline const ::Ps2State_Keyboard& Ps2State::keyboard() const {
  // @@protoc_insertion_point(field_get:Ps2State.keyboard)
  return _internal_keyboard();
}
inline void Ps2State::unsafe_arena_set_allocated_keyboard(
    ::Ps2State_Keyboard* keyboard) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(keyboard_);
  }
  keyboard_ = keyboard;
  if (keyboard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Ps2State.keyboard)
}
inline ::Ps2State_Keyboard* Ps2State::release_keyboard() {
  
  ::Ps2State_Keyboard* temp = keyboard_;
  keyboard_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Ps2State_Keyboard* Ps2State::unsafe_arena_release_keyboard() {
  // @@protoc_insertion_point(field_release:Ps2State.keyboard)
  
  ::Ps2State_Keyboard* temp = keyboard_;
  keyboard_ = nullptr;
  return temp;
}
inline ::Ps2State_Keyboard* Ps2State::_internal_mutable_keyboard() {
  
  if (keyboard_ == nullptr) {
    auto* p = CreateMaybeMessage<::Ps2State_Keyboard>(GetArenaForAllocation());
    keyboard_ = p;
  }
  return keyboard_;
}
inline ::Ps2State_Keyboard* Ps2State::mutable_keyboard() {
  ::Ps2State_Keyboard* _msg = _internal_mutable_keyboard();
  // @@protoc_insertion_point(field_mutable:Ps2State.keyboard)
  return _msg;
}
inline void Ps2State::set_allocated_keyboard(::Ps2State_Keyboard* keyboard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete keyboard_;
  }
  if (keyboard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Ps2State_Keyboard>::GetOwningArena(keyboard);
    if (message_arena != submessage_arena) {
      keyboard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keyboard, submessage_arena);
    }
    
  } else {
    
  }
  keyboard_ = keyboard;
  // @@protoc_insertion_point(field_set_allocated:Ps2State.keyboard)
}

// .Ps2State.Mouse mouse = 4;
inline bool Ps2State::_internal_has_mouse() const {
  return this != internal_default_instance() && mouse_ != nullptr;
}
inline bool Ps2State::has_mouse() const {
  return _internal_has_mouse();
}
inline void Ps2State::clear_mouse() {
  if (GetArenaForAllocation() == nullptr && mouse_ != nullptr) {
    delete mouse_;
  }
  mouse_ = nullptr;
}
inline const ::Ps2State_Mouse& Ps2State::_internal_mouse() const {
  const ::Ps2State_Mouse* p = mouse_;
  return p != nullptr ? *p : reinterpret_cast<const ::Ps2State_Mouse&>(
      ::_Ps2State_Mouse_default_instance_);
}
inline const ::Ps2State_Mouse& Ps2State::mouse() const {
  // @@protoc_insertion_point(field_get:Ps2State.mouse)
  return _internal_mouse();
}
inline void Ps2State::unsafe_arena_set_allocated_mouse(
    ::Ps2State_Mouse* mouse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mouse_);
  }
  mouse_ = mouse;
  if (mouse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Ps2State.mouse)
}
inline ::Ps2State_Mouse* Ps2State::release_mouse() {
  
  ::Ps2State_Mouse* temp = mouse_;
  mouse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Ps2State_Mouse* Ps2State::unsafe_arena_release_mouse() {
  // @@protoc_insertion_point(field_release:Ps2State.mouse)
  
  ::Ps2State_Mouse* temp = mouse_;
  mouse_ = nullptr;
  return temp;
}
inline ::Ps2State_Mouse* Ps2State::_internal_mutable_mouse() {
  
  if (mouse_ == nullptr) {
    auto* p = CreateMaybeMessage<::Ps2State_Mouse>(GetArenaForAllocation());
    mouse_ = p;
  }
  return mouse_;
}
inline ::Ps2State_Mouse* Ps2State::mutable_mouse() {
  ::Ps2State_Mouse* _msg = _internal_mutable_mouse();
  // @@protoc_insertion_point(field_mutable:Ps2State.mouse)
  return _msg;
}
inline void Ps2State::set_allocated_mouse(::Ps2State_Mouse* mouse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mouse_;
  }
  if (mouse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Ps2State_Mouse>::GetOwningArena(mouse);
    if (message_arena != submessage_arena) {
      mouse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mouse, submessage_arena);
    }
    
  } else {
    
  }
  mouse_ = mouse;
  // @@protoc_insertion_point(field_set_allocated:Ps2State.mouse)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ps2_2eproto
