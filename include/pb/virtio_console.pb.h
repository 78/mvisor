// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: virtio_console.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_virtio_5fconsole_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_virtio_5fconsole_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_virtio_5fconsole_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_virtio_5fconsole_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_virtio_5fconsole_2eproto;
class VirtioConsoleState;
struct VirtioConsoleStateDefaultTypeInternal;
extern VirtioConsoleStateDefaultTypeInternal _VirtioConsoleState_default_instance_;
class VirtioConsoleState_Port;
struct VirtioConsoleState_PortDefaultTypeInternal;
extern VirtioConsoleState_PortDefaultTypeInternal _VirtioConsoleState_Port_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::VirtioConsoleState* Arena::CreateMaybeMessage<::VirtioConsoleState>(Arena*);
template<> ::VirtioConsoleState_Port* Arena::CreateMaybeMessage<::VirtioConsoleState_Port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class VirtioConsoleState_Port final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VirtioConsoleState.Port) */ {
 public:
  inline VirtioConsoleState_Port() : VirtioConsoleState_Port(nullptr) {}
  ~VirtioConsoleState_Port() override;
  explicit constexpr VirtioConsoleState_Port(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioConsoleState_Port(const VirtioConsoleState_Port& from);
  VirtioConsoleState_Port(VirtioConsoleState_Port&& from) noexcept
    : VirtioConsoleState_Port() {
    *this = ::std::move(from);
  }

  inline VirtioConsoleState_Port& operator=(const VirtioConsoleState_Port& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioConsoleState_Port& operator=(VirtioConsoleState_Port&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioConsoleState_Port& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioConsoleState_Port* internal_default_instance() {
    return reinterpret_cast<const VirtioConsoleState_Port*>(
               &_VirtioConsoleState_Port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VirtioConsoleState_Port& a, VirtioConsoleState_Port& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioConsoleState_Port* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioConsoleState_Port* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioConsoleState_Port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioConsoleState_Port>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioConsoleState_Port& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioConsoleState_Port& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioConsoleState_Port* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VirtioConsoleState.Port";
  }
  protected:
  explicit VirtioConsoleState_Port(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kReadyFieldNumber = 2,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // bool ready = 2;
  void clear_ready();
  bool ready() const;
  void set_ready(bool value);
  private:
  bool _internal_ready() const;
  void _internal_set_ready(bool value);
  public:

  // @@protoc_insertion_point(class_scope:VirtioConsoleState.Port)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t id_;
  bool ready_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_virtio_5fconsole_2eproto;
};
// -------------------------------------------------------------------

class VirtioConsoleState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VirtioConsoleState) */ {
 public:
  inline VirtioConsoleState() : VirtioConsoleState(nullptr) {}
  ~VirtioConsoleState() override;
  explicit constexpr VirtioConsoleState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioConsoleState(const VirtioConsoleState& from);
  VirtioConsoleState(VirtioConsoleState&& from) noexcept
    : VirtioConsoleState() {
    *this = ::std::move(from);
  }

  inline VirtioConsoleState& operator=(const VirtioConsoleState& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioConsoleState& operator=(VirtioConsoleState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioConsoleState& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioConsoleState* internal_default_instance() {
    return reinterpret_cast<const VirtioConsoleState*>(
               &_VirtioConsoleState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VirtioConsoleState& a, VirtioConsoleState& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioConsoleState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioConsoleState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioConsoleState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioConsoleState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioConsoleState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtioConsoleState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioConsoleState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VirtioConsoleState";
  }
  protected:
  explicit VirtioConsoleState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VirtioConsoleState_Port Port;

  // accessors -------------------------------------------------------

  enum : int {
    kPortsFieldNumber = 1,
  };
  // repeated .VirtioConsoleState.Port ports = 1;
  int ports_size() const;
  private:
  int _internal_ports_size() const;
  public:
  void clear_ports();
  ::VirtioConsoleState_Port* mutable_ports(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VirtioConsoleState_Port >*
      mutable_ports();
  private:
  const ::VirtioConsoleState_Port& _internal_ports(int index) const;
  ::VirtioConsoleState_Port* _internal_add_ports();
  public:
  const ::VirtioConsoleState_Port& ports(int index) const;
  ::VirtioConsoleState_Port* add_ports();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VirtioConsoleState_Port >&
      ports() const;

  // @@protoc_insertion_point(class_scope:VirtioConsoleState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VirtioConsoleState_Port > ports_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_virtio_5fconsole_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VirtioConsoleState_Port

// uint32 id = 1;
inline void VirtioConsoleState_Port::clear_id() {
  id_ = 0u;
}
inline uint32_t VirtioConsoleState_Port::_internal_id() const {
  return id_;
}
inline uint32_t VirtioConsoleState_Port::id() const {
  // @@protoc_insertion_point(field_get:VirtioConsoleState.Port.id)
  return _internal_id();
}
inline void VirtioConsoleState_Port::_internal_set_id(uint32_t value) {
  
  id_ = value;
}
inline void VirtioConsoleState_Port::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:VirtioConsoleState.Port.id)
}

// bool ready = 2;
inline void VirtioConsoleState_Port::clear_ready() {
  ready_ = false;
}
inline bool VirtioConsoleState_Port::_internal_ready() const {
  return ready_;
}
inline bool VirtioConsoleState_Port::ready() const {
  // @@protoc_insertion_point(field_get:VirtioConsoleState.Port.ready)
  return _internal_ready();
}
inline void VirtioConsoleState_Port::_internal_set_ready(bool value) {
  
  ready_ = value;
}
inline void VirtioConsoleState_Port::set_ready(bool value) {
  _internal_set_ready(value);
  // @@protoc_insertion_point(field_set:VirtioConsoleState.Port.ready)
}

// -------------------------------------------------------------------

// VirtioConsoleState

// repeated .VirtioConsoleState.Port ports = 1;
inline int VirtioConsoleState::_internal_ports_size() const {
  return ports_.size();
}
inline int VirtioConsoleState::ports_size() const {
  return _internal_ports_size();
}
inline void VirtioConsoleState::clear_ports() {
  ports_.Clear();
}
inline ::VirtioConsoleState_Port* VirtioConsoleState::mutable_ports(int index) {
  // @@protoc_insertion_point(field_mutable:VirtioConsoleState.ports)
  return ports_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VirtioConsoleState_Port >*
VirtioConsoleState::mutable_ports() {
  // @@protoc_insertion_point(field_mutable_list:VirtioConsoleState.ports)
  return &ports_;
}
inline const ::VirtioConsoleState_Port& VirtioConsoleState::_internal_ports(int index) const {
  return ports_.Get(index);
}
inline const ::VirtioConsoleState_Port& VirtioConsoleState::ports(int index) const {
  // @@protoc_insertion_point(field_get:VirtioConsoleState.ports)
  return _internal_ports(index);
}
inline ::VirtioConsoleState_Port* VirtioConsoleState::_internal_add_ports() {
  return ports_.Add();
}
inline ::VirtioConsoleState_Port* VirtioConsoleState::add_ports() {
  ::VirtioConsoleState_Port* _add = _internal_add_ports();
  // @@protoc_insertion_point(field_add:VirtioConsoleState.ports)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VirtioConsoleState_Port >&
VirtioConsoleState::ports() const {
  // @@protoc_insertion_point(field_list:VirtioConsoleState.ports)
  return ports_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_virtio_5fconsole_2eproto
