// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xhci_host.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_xhci_5fhost_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_xhci_5fhost_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_xhci_5fhost_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_xhci_5fhost_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_xhci_5fhost_2eproto;
class XhciHostState;
struct XhciHostStateDefaultTypeInternal;
extern XhciHostStateDefaultTypeInternal _XhciHostState_default_instance_;
class XhciHostState_CommandRing;
struct XhciHostState_CommandRingDefaultTypeInternal;
extern XhciHostState_CommandRingDefaultTypeInternal _XhciHostState_CommandRing_default_instance_;
class XhciHostState_Interrupt;
struct XhciHostState_InterruptDefaultTypeInternal;
extern XhciHostState_InterruptDefaultTypeInternal _XhciHostState_Interrupt_default_instance_;
class XhciHostState_Operational;
struct XhciHostState_OperationalDefaultTypeInternal;
extern XhciHostState_OperationalDefaultTypeInternal _XhciHostState_Operational_default_instance_;
class XhciHostState_Port;
struct XhciHostState_PortDefaultTypeInternal;
extern XhciHostState_PortDefaultTypeInternal _XhciHostState_Port_default_instance_;
class XhciHostState_Runtime;
struct XhciHostState_RuntimeDefaultTypeInternal;
extern XhciHostState_RuntimeDefaultTypeInternal _XhciHostState_Runtime_default_instance_;
class XhciHostState_Slot;
struct XhciHostState_SlotDefaultTypeInternal;
extern XhciHostState_SlotDefaultTypeInternal _XhciHostState_Slot_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::XhciHostState* Arena::CreateMaybeMessage<::XhciHostState>(Arena*);
template<> ::XhciHostState_CommandRing* Arena::CreateMaybeMessage<::XhciHostState_CommandRing>(Arena*);
template<> ::XhciHostState_Interrupt* Arena::CreateMaybeMessage<::XhciHostState_Interrupt>(Arena*);
template<> ::XhciHostState_Operational* Arena::CreateMaybeMessage<::XhciHostState_Operational>(Arena*);
template<> ::XhciHostState_Port* Arena::CreateMaybeMessage<::XhciHostState_Port>(Arena*);
template<> ::XhciHostState_Runtime* Arena::CreateMaybeMessage<::XhciHostState_Runtime>(Arena*);
template<> ::XhciHostState_Slot* Arena::CreateMaybeMessage<::XhciHostState_Slot>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class XhciHostState_Operational final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XhciHostState.Operational) */ {
 public:
  inline XhciHostState_Operational() : XhciHostState_Operational(nullptr) {}
  ~XhciHostState_Operational() override;
  explicit constexpr XhciHostState_Operational(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XhciHostState_Operational(const XhciHostState_Operational& from);
  XhciHostState_Operational(XhciHostState_Operational&& from) noexcept
    : XhciHostState_Operational() {
    *this = ::std::move(from);
  }

  inline XhciHostState_Operational& operator=(const XhciHostState_Operational& from) {
    CopyFrom(from);
    return *this;
  }
  inline XhciHostState_Operational& operator=(XhciHostState_Operational&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XhciHostState_Operational& default_instance() {
    return *internal_default_instance();
  }
  static inline const XhciHostState_Operational* internal_default_instance() {
    return reinterpret_cast<const XhciHostState_Operational*>(
               &_XhciHostState_Operational_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(XhciHostState_Operational& a, XhciHostState_Operational& b) {
    a.Swap(&b);
  }
  inline void Swap(XhciHostState_Operational* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XhciHostState_Operational* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  XhciHostState_Operational* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<XhciHostState_Operational>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const XhciHostState_Operational& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const XhciHostState_Operational& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XhciHostState_Operational* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XhciHostState.Operational";
  }
  protected:
  explicit XhciHostState_Operational(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsbCommandFieldNumber = 1,
    kUsbStatusFieldNumber = 2,
    kCommandRingControlFieldNumber = 4,
    kDeviceNotificationControlFieldNumber = 3,
    kConfigureFieldNumber = 6,
    kContextBaseArrayPointerFieldNumber = 5,
  };
  // uint32 usb_command = 1;
  void clear_usb_command();
  uint32_t usb_command() const;
  void set_usb_command(uint32_t value);
  private:
  uint32_t _internal_usb_command() const;
  void _internal_set_usb_command(uint32_t value);
  public:

  // uint32 usb_status = 2;
  void clear_usb_status();
  uint32_t usb_status() const;
  void set_usb_status(uint32_t value);
  private:
  uint32_t _internal_usb_status() const;
  void _internal_set_usb_status(uint32_t value);
  public:

  // uint64 command_ring_control = 4;
  void clear_command_ring_control();
  uint64_t command_ring_control() const;
  void set_command_ring_control(uint64_t value);
  private:
  uint64_t _internal_command_ring_control() const;
  void _internal_set_command_ring_control(uint64_t value);
  public:

  // uint32 device_notification_control = 3;
  void clear_device_notification_control();
  uint32_t device_notification_control() const;
  void set_device_notification_control(uint32_t value);
  private:
  uint32_t _internal_device_notification_control() const;
  void _internal_set_device_notification_control(uint32_t value);
  public:

  // uint32 configure = 6;
  void clear_configure();
  uint32_t configure() const;
  void set_configure(uint32_t value);
  private:
  uint32_t _internal_configure() const;
  void _internal_set_configure(uint32_t value);
  public:

  // uint64 context_base_array_pointer = 5;
  void clear_context_base_array_pointer();
  uint64_t context_base_array_pointer() const;
  void set_context_base_array_pointer(uint64_t value);
  private:
  uint64_t _internal_context_base_array_pointer() const;
  void _internal_set_context_base_array_pointer(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XhciHostState.Operational)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t usb_command_;
  uint32_t usb_status_;
  uint64_t command_ring_control_;
  uint32_t device_notification_control_;
  uint32_t configure_;
  uint64_t context_base_array_pointer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xhci_5fhost_2eproto;
};
// -------------------------------------------------------------------

class XhciHostState_Runtime final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XhciHostState.Runtime) */ {
 public:
  inline XhciHostState_Runtime() : XhciHostState_Runtime(nullptr) {}
  ~XhciHostState_Runtime() override;
  explicit constexpr XhciHostState_Runtime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XhciHostState_Runtime(const XhciHostState_Runtime& from);
  XhciHostState_Runtime(XhciHostState_Runtime&& from) noexcept
    : XhciHostState_Runtime() {
    *this = ::std::move(from);
  }

  inline XhciHostState_Runtime& operator=(const XhciHostState_Runtime& from) {
    CopyFrom(from);
    return *this;
  }
  inline XhciHostState_Runtime& operator=(XhciHostState_Runtime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XhciHostState_Runtime& default_instance() {
    return *internal_default_instance();
  }
  static inline const XhciHostState_Runtime* internal_default_instance() {
    return reinterpret_cast<const XhciHostState_Runtime*>(
               &_XhciHostState_Runtime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(XhciHostState_Runtime& a, XhciHostState_Runtime& b) {
    a.Swap(&b);
  }
  inline void Swap(XhciHostState_Runtime* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XhciHostState_Runtime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  XhciHostState_Runtime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<XhciHostState_Runtime>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const XhciHostState_Runtime& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const XhciHostState_Runtime& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XhciHostState_Runtime* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XhciHostState.Runtime";
  }
  protected:
  explicit XhciHostState_Runtime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMicroframeIndexFieldNumber = 1,
  };
  // uint32 microframe_index = 1;
  void clear_microframe_index();
  uint32_t microframe_index() const;
  void set_microframe_index(uint32_t value);
  private:
  uint32_t _internal_microframe_index() const;
  void _internal_set_microframe_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XhciHostState.Runtime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t microframe_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xhci_5fhost_2eproto;
};
// -------------------------------------------------------------------

class XhciHostState_CommandRing final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XhciHostState.CommandRing) */ {
 public:
  inline XhciHostState_CommandRing() : XhciHostState_CommandRing(nullptr) {}
  ~XhciHostState_CommandRing() override;
  explicit constexpr XhciHostState_CommandRing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XhciHostState_CommandRing(const XhciHostState_CommandRing& from);
  XhciHostState_CommandRing(XhciHostState_CommandRing&& from) noexcept
    : XhciHostState_CommandRing() {
    *this = ::std::move(from);
  }

  inline XhciHostState_CommandRing& operator=(const XhciHostState_CommandRing& from) {
    CopyFrom(from);
    return *this;
  }
  inline XhciHostState_CommandRing& operator=(XhciHostState_CommandRing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XhciHostState_CommandRing& default_instance() {
    return *internal_default_instance();
  }
  static inline const XhciHostState_CommandRing* internal_default_instance() {
    return reinterpret_cast<const XhciHostState_CommandRing*>(
               &_XhciHostState_CommandRing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(XhciHostState_CommandRing& a, XhciHostState_CommandRing& b) {
    a.Swap(&b);
  }
  inline void Swap(XhciHostState_CommandRing* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XhciHostState_CommandRing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  XhciHostState_CommandRing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<XhciHostState_CommandRing>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const XhciHostState_CommandRing& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const XhciHostState_CommandRing& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XhciHostState_CommandRing* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XhciHostState.CommandRing";
  }
  protected:
  explicit XhciHostState_CommandRing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDequeueFieldNumber = 1,
    kConsumerCycleBitFieldNumber = 2,
  };
  // uint32 dequeue = 1;
  void clear_dequeue();
  uint32_t dequeue() const;
  void set_dequeue(uint32_t value);
  private:
  uint32_t _internal_dequeue() const;
  void _internal_set_dequeue(uint32_t value);
  public:

  // bool consumer_cycle_bit = 2;
  void clear_consumer_cycle_bit();
  bool consumer_cycle_bit() const;
  void set_consumer_cycle_bit(bool value);
  private:
  bool _internal_consumer_cycle_bit() const;
  void _internal_set_consumer_cycle_bit(bool value);
  public:

  // @@protoc_insertion_point(class_scope:XhciHostState.CommandRing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t dequeue_;
  bool consumer_cycle_bit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xhci_5fhost_2eproto;
};
// -------------------------------------------------------------------

class XhciHostState_Port final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XhciHostState.Port) */ {
 public:
  inline XhciHostState_Port() : XhciHostState_Port(nullptr) {}
  ~XhciHostState_Port() override;
  explicit constexpr XhciHostState_Port(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XhciHostState_Port(const XhciHostState_Port& from);
  XhciHostState_Port(XhciHostState_Port&& from) noexcept
    : XhciHostState_Port() {
    *this = ::std::move(from);
  }

  inline XhciHostState_Port& operator=(const XhciHostState_Port& from) {
    CopyFrom(from);
    return *this;
  }
  inline XhciHostState_Port& operator=(XhciHostState_Port&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XhciHostState_Port& default_instance() {
    return *internal_default_instance();
  }
  static inline const XhciHostState_Port* internal_default_instance() {
    return reinterpret_cast<const XhciHostState_Port*>(
               &_XhciHostState_Port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(XhciHostState_Port& a, XhciHostState_Port& b) {
    a.Swap(&b);
  }
  inline void Swap(XhciHostState_Port* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XhciHostState_Port* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  XhciHostState_Port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<XhciHostState_Port>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const XhciHostState_Port& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const XhciHostState_Port& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XhciHostState_Port* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XhciHostState.Port";
  }
  protected:
  explicit XhciHostState_Port(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusControlFieldNumber = 1,
  };
  // uint32 status_control = 1;
  void clear_status_control();
  uint32_t status_control() const;
  void set_status_control(uint32_t value);
  private:
  uint32_t _internal_status_control() const;
  void _internal_set_status_control(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XhciHostState.Port)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t status_control_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xhci_5fhost_2eproto;
};
// -------------------------------------------------------------------

class XhciHostState_Slot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XhciHostState.Slot) */ {
 public:
  inline XhciHostState_Slot() : XhciHostState_Slot(nullptr) {}
  ~XhciHostState_Slot() override;
  explicit constexpr XhciHostState_Slot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XhciHostState_Slot(const XhciHostState_Slot& from);
  XhciHostState_Slot(XhciHostState_Slot&& from) noexcept
    : XhciHostState_Slot() {
    *this = ::std::move(from);
  }

  inline XhciHostState_Slot& operator=(const XhciHostState_Slot& from) {
    CopyFrom(from);
    return *this;
  }
  inline XhciHostState_Slot& operator=(XhciHostState_Slot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XhciHostState_Slot& default_instance() {
    return *internal_default_instance();
  }
  static inline const XhciHostState_Slot* internal_default_instance() {
    return reinterpret_cast<const XhciHostState_Slot*>(
               &_XhciHostState_Slot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(XhciHostState_Slot& a, XhciHostState_Slot& b) {
    a.Swap(&b);
  }
  inline void Swap(XhciHostState_Slot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XhciHostState_Slot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  XhciHostState_Slot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<XhciHostState_Slot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const XhciHostState_Slot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const XhciHostState_Slot& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XhciHostState_Slot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XhciHostState.Slot";
  }
  protected:
  explicit XhciHostState_Slot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kAddressedFieldNumber = 2,
  };
  // bool enabled = 1;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // bool addressed = 2;
  void clear_addressed();
  bool addressed() const;
  void set_addressed(bool value);
  private:
  bool _internal_addressed() const;
  void _internal_set_addressed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:XhciHostState.Slot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool enabled_;
  bool addressed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xhci_5fhost_2eproto;
};
// -------------------------------------------------------------------

class XhciHostState_Interrupt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XhciHostState.Interrupt) */ {
 public:
  inline XhciHostState_Interrupt() : XhciHostState_Interrupt(nullptr) {}
  ~XhciHostState_Interrupt() override;
  explicit constexpr XhciHostState_Interrupt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XhciHostState_Interrupt(const XhciHostState_Interrupt& from);
  XhciHostState_Interrupt(XhciHostState_Interrupt&& from) noexcept
    : XhciHostState_Interrupt() {
    *this = ::std::move(from);
  }

  inline XhciHostState_Interrupt& operator=(const XhciHostState_Interrupt& from) {
    CopyFrom(from);
    return *this;
  }
  inline XhciHostState_Interrupt& operator=(XhciHostState_Interrupt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XhciHostState_Interrupt& default_instance() {
    return *internal_default_instance();
  }
  static inline const XhciHostState_Interrupt* internal_default_instance() {
    return reinterpret_cast<const XhciHostState_Interrupt*>(
               &_XhciHostState_Interrupt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(XhciHostState_Interrupt& a, XhciHostState_Interrupt& b) {
    a.Swap(&b);
  }
  inline void Swap(XhciHostState_Interrupt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XhciHostState_Interrupt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  XhciHostState_Interrupt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<XhciHostState_Interrupt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const XhciHostState_Interrupt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const XhciHostState_Interrupt& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XhciHostState_Interrupt* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XhciHostState.Interrupt";
  }
  protected:
  explicit XhciHostState_Interrupt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kManagementFieldNumber = 1,
    kModerationFieldNumber = 2,
    kEventRingTableBaseFieldNumber = 4,
    kEventRingDequeuePointerFieldNumber = 5,
    kEventRingTableSizeFieldNumber = 3,
    kEventRingSegmentSizeFieldNumber = 7,
    kEventRingSegmentStartFieldNumber = 6,
    kEventRingEnqueueIndexFieldNumber = 8,
    kEventRingProducerCycleBitFieldNumber = 9,
  };
  // uint32 management = 1;
  void clear_management();
  uint32_t management() const;
  void set_management(uint32_t value);
  private:
  uint32_t _internal_management() const;
  void _internal_set_management(uint32_t value);
  public:

  // uint32 moderation = 2;
  void clear_moderation();
  uint32_t moderation() const;
  void set_moderation(uint32_t value);
  private:
  uint32_t _internal_moderation() const;
  void _internal_set_moderation(uint32_t value);
  public:

  // uint64 event_ring_table_base = 4;
  void clear_event_ring_table_base();
  uint64_t event_ring_table_base() const;
  void set_event_ring_table_base(uint64_t value);
  private:
  uint64_t _internal_event_ring_table_base() const;
  void _internal_set_event_ring_table_base(uint64_t value);
  public:

  // uint64 event_ring_dequeue_pointer = 5;
  void clear_event_ring_dequeue_pointer();
  uint64_t event_ring_dequeue_pointer() const;
  void set_event_ring_dequeue_pointer(uint64_t value);
  private:
  uint64_t _internal_event_ring_dequeue_pointer() const;
  void _internal_set_event_ring_dequeue_pointer(uint64_t value);
  public:

  // uint32 event_ring_table_size = 3;
  void clear_event_ring_table_size();
  uint32_t event_ring_table_size() const;
  void set_event_ring_table_size(uint32_t value);
  private:
  uint32_t _internal_event_ring_table_size() const;
  void _internal_set_event_ring_table_size(uint32_t value);
  public:

  // uint32 event_ring_segment_size = 7;
  void clear_event_ring_segment_size();
  uint32_t event_ring_segment_size() const;
  void set_event_ring_segment_size(uint32_t value);
  private:
  uint32_t _internal_event_ring_segment_size() const;
  void _internal_set_event_ring_segment_size(uint32_t value);
  public:

  // uint64 event_ring_segment_start = 6;
  void clear_event_ring_segment_start();
  uint64_t event_ring_segment_start() const;
  void set_event_ring_segment_start(uint64_t value);
  private:
  uint64_t _internal_event_ring_segment_start() const;
  void _internal_set_event_ring_segment_start(uint64_t value);
  public:

  // uint64 event_ring_enqueue_index = 8;
  void clear_event_ring_enqueue_index();
  uint64_t event_ring_enqueue_index() const;
  void set_event_ring_enqueue_index(uint64_t value);
  private:
  uint64_t _internal_event_ring_enqueue_index() const;
  void _internal_set_event_ring_enqueue_index(uint64_t value);
  public:

  // bool event_ring_producer_cycle_bit = 9;
  void clear_event_ring_producer_cycle_bit();
  bool event_ring_producer_cycle_bit() const;
  void set_event_ring_producer_cycle_bit(bool value);
  private:
  bool _internal_event_ring_producer_cycle_bit() const;
  void _internal_set_event_ring_producer_cycle_bit(bool value);
  public:

  // @@protoc_insertion_point(class_scope:XhciHostState.Interrupt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t management_;
  uint32_t moderation_;
  uint64_t event_ring_table_base_;
  uint64_t event_ring_dequeue_pointer_;
  uint32_t event_ring_table_size_;
  uint32_t event_ring_segment_size_;
  uint64_t event_ring_segment_start_;
  uint64_t event_ring_enqueue_index_;
  bool event_ring_producer_cycle_bit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xhci_5fhost_2eproto;
};
// -------------------------------------------------------------------

class XhciHostState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XhciHostState) */ {
 public:
  inline XhciHostState() : XhciHostState(nullptr) {}
  ~XhciHostState() override;
  explicit constexpr XhciHostState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XhciHostState(const XhciHostState& from);
  XhciHostState(XhciHostState&& from) noexcept
    : XhciHostState() {
    *this = ::std::move(from);
  }

  inline XhciHostState& operator=(const XhciHostState& from) {
    CopyFrom(from);
    return *this;
  }
  inline XhciHostState& operator=(XhciHostState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XhciHostState& default_instance() {
    return *internal_default_instance();
  }
  static inline const XhciHostState* internal_default_instance() {
    return reinterpret_cast<const XhciHostState*>(
               &_XhciHostState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(XhciHostState& a, XhciHostState& b) {
    a.Swap(&b);
  }
  inline void Swap(XhciHostState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XhciHostState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  XhciHostState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<XhciHostState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const XhciHostState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const XhciHostState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XhciHostState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XhciHostState";
  }
  protected:
  explicit XhciHostState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef XhciHostState_Operational Operational;
  typedef XhciHostState_Runtime Runtime;
  typedef XhciHostState_CommandRing CommandRing;
  typedef XhciHostState_Port Port;
  typedef XhciHostState_Slot Slot;
  typedef XhciHostState_Interrupt Interrupt;

  // accessors -------------------------------------------------------

  enum : int {
    kPortsFieldNumber = 5,
    kSlotsFieldNumber = 6,
    kInterruptsFieldNumber = 7,
    kOperationalFieldNumber = 2,
    kRuntimeFieldNumber = 3,
    kCommandRingFieldNumber = 4,
  };
  // repeated .XhciHostState.Port ports = 5;
  int ports_size() const;
  private:
  int _internal_ports_size() const;
  public:
  void clear_ports();
  ::XhciHostState_Port* mutable_ports(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XhciHostState_Port >*
      mutable_ports();
  private:
  const ::XhciHostState_Port& _internal_ports(int index) const;
  ::XhciHostState_Port* _internal_add_ports();
  public:
  const ::XhciHostState_Port& ports(int index) const;
  ::XhciHostState_Port* add_ports();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XhciHostState_Port >&
      ports() const;

  // repeated .XhciHostState.Slot slots = 6;
  int slots_size() const;
  private:
  int _internal_slots_size() const;
  public:
  void clear_slots();
  ::XhciHostState_Slot* mutable_slots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XhciHostState_Slot >*
      mutable_slots();
  private:
  const ::XhciHostState_Slot& _internal_slots(int index) const;
  ::XhciHostState_Slot* _internal_add_slots();
  public:
  const ::XhciHostState_Slot& slots(int index) const;
  ::XhciHostState_Slot* add_slots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XhciHostState_Slot >&
      slots() const;

  // repeated .XhciHostState.Interrupt interrupts = 7;
  int interrupts_size() const;
  private:
  int _internal_interrupts_size() const;
  public:
  void clear_interrupts();
  ::XhciHostState_Interrupt* mutable_interrupts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XhciHostState_Interrupt >*
      mutable_interrupts();
  private:
  const ::XhciHostState_Interrupt& _internal_interrupts(int index) const;
  ::XhciHostState_Interrupt* _internal_add_interrupts();
  public:
  const ::XhciHostState_Interrupt& interrupts(int index) const;
  ::XhciHostState_Interrupt* add_interrupts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XhciHostState_Interrupt >&
      interrupts() const;

  // .XhciHostState.Operational operational = 2;
  bool has_operational() const;
  private:
  bool _internal_has_operational() const;
  public:
  void clear_operational();
  const ::XhciHostState_Operational& operational() const;
  PROTOBUF_NODISCARD ::XhciHostState_Operational* release_operational();
  ::XhciHostState_Operational* mutable_operational();
  void set_allocated_operational(::XhciHostState_Operational* operational);
  private:
  const ::XhciHostState_Operational& _internal_operational() const;
  ::XhciHostState_Operational* _internal_mutable_operational();
  public:
  void unsafe_arena_set_allocated_operational(
      ::XhciHostState_Operational* operational);
  ::XhciHostState_Operational* unsafe_arena_release_operational();

  // .XhciHostState.Runtime runtime = 3;
  bool has_runtime() const;
  private:
  bool _internal_has_runtime() const;
  public:
  void clear_runtime();
  const ::XhciHostState_Runtime& runtime() const;
  PROTOBUF_NODISCARD ::XhciHostState_Runtime* release_runtime();
  ::XhciHostState_Runtime* mutable_runtime();
  void set_allocated_runtime(::XhciHostState_Runtime* runtime);
  private:
  const ::XhciHostState_Runtime& _internal_runtime() const;
  ::XhciHostState_Runtime* _internal_mutable_runtime();
  public:
  void unsafe_arena_set_allocated_runtime(
      ::XhciHostState_Runtime* runtime);
  ::XhciHostState_Runtime* unsafe_arena_release_runtime();

  // .XhciHostState.CommandRing command_ring = 4;
  bool has_command_ring() const;
  private:
  bool _internal_has_command_ring() const;
  public:
  void clear_command_ring();
  const ::XhciHostState_CommandRing& command_ring() const;
  PROTOBUF_NODISCARD ::XhciHostState_CommandRing* release_command_ring();
  ::XhciHostState_CommandRing* mutable_command_ring();
  void set_allocated_command_ring(::XhciHostState_CommandRing* command_ring);
  private:
  const ::XhciHostState_CommandRing& _internal_command_ring() const;
  ::XhciHostState_CommandRing* _internal_mutable_command_ring();
  public:
  void unsafe_arena_set_allocated_command_ring(
      ::XhciHostState_CommandRing* command_ring);
  ::XhciHostState_CommandRing* unsafe_arena_release_command_ring();

  // @@protoc_insertion_point(class_scope:XhciHostState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XhciHostState_Port > ports_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XhciHostState_Slot > slots_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XhciHostState_Interrupt > interrupts_;
  ::XhciHostState_Operational* operational_;
  ::XhciHostState_Runtime* runtime_;
  ::XhciHostState_CommandRing* command_ring_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xhci_5fhost_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// XhciHostState_Operational

// uint32 usb_command = 1;
inline void XhciHostState_Operational::clear_usb_command() {
  usb_command_ = 0u;
}
inline uint32_t XhciHostState_Operational::_internal_usb_command() const {
  return usb_command_;
}
inline uint32_t XhciHostState_Operational::usb_command() const {
  // @@protoc_insertion_point(field_get:XhciHostState.Operational.usb_command)
  return _internal_usb_command();
}
inline void XhciHostState_Operational::_internal_set_usb_command(uint32_t value) {
  
  usb_command_ = value;
}
inline void XhciHostState_Operational::set_usb_command(uint32_t value) {
  _internal_set_usb_command(value);
  // @@protoc_insertion_point(field_set:XhciHostState.Operational.usb_command)
}

// uint32 usb_status = 2;
inline void XhciHostState_Operational::clear_usb_status() {
  usb_status_ = 0u;
}
inline uint32_t XhciHostState_Operational::_internal_usb_status() const {
  return usb_status_;
}
inline uint32_t XhciHostState_Operational::usb_status() const {
  // @@protoc_insertion_point(field_get:XhciHostState.Operational.usb_status)
  return _internal_usb_status();
}
inline void XhciHostState_Operational::_internal_set_usb_status(uint32_t value) {
  
  usb_status_ = value;
}
inline void XhciHostState_Operational::set_usb_status(uint32_t value) {
  _internal_set_usb_status(value);
  // @@protoc_insertion_point(field_set:XhciHostState.Operational.usb_status)
}

// uint32 device_notification_control = 3;
inline void XhciHostState_Operational::clear_device_notification_control() {
  device_notification_control_ = 0u;
}
inline uint32_t XhciHostState_Operational::_internal_device_notification_control() const {
  return device_notification_control_;
}
inline uint32_t XhciHostState_Operational::device_notification_control() const {
  // @@protoc_insertion_point(field_get:XhciHostState.Operational.device_notification_control)
  return _internal_device_notification_control();
}
inline void XhciHostState_Operational::_internal_set_device_notification_control(uint32_t value) {
  
  device_notification_control_ = value;
}
inline void XhciHostState_Operational::set_device_notification_control(uint32_t value) {
  _internal_set_device_notification_control(value);
  // @@protoc_insertion_point(field_set:XhciHostState.Operational.device_notification_control)
}

// uint64 command_ring_control = 4;
inline void XhciHostState_Operational::clear_command_ring_control() {
  command_ring_control_ = uint64_t{0u};
}
inline uint64_t XhciHostState_Operational::_internal_command_ring_control() const {
  return command_ring_control_;
}
inline uint64_t XhciHostState_Operational::command_ring_control() const {
  // @@protoc_insertion_point(field_get:XhciHostState.Operational.command_ring_control)
  return _internal_command_ring_control();
}
inline void XhciHostState_Operational::_internal_set_command_ring_control(uint64_t value) {
  
  command_ring_control_ = value;
}
inline void XhciHostState_Operational::set_command_ring_control(uint64_t value) {
  _internal_set_command_ring_control(value);
  // @@protoc_insertion_point(field_set:XhciHostState.Operational.command_ring_control)
}

// uint64 context_base_array_pointer = 5;
inline void XhciHostState_Operational::clear_context_base_array_pointer() {
  context_base_array_pointer_ = uint64_t{0u};
}
inline uint64_t XhciHostState_Operational::_internal_context_base_array_pointer() const {
  return context_base_array_pointer_;
}
inline uint64_t XhciHostState_Operational::context_base_array_pointer() const {
  // @@protoc_insertion_point(field_get:XhciHostState.Operational.context_base_array_pointer)
  return _internal_context_base_array_pointer();
}
inline void XhciHostState_Operational::_internal_set_context_base_array_pointer(uint64_t value) {
  
  context_base_array_pointer_ = value;
}
inline void XhciHostState_Operational::set_context_base_array_pointer(uint64_t value) {
  _internal_set_context_base_array_pointer(value);
  // @@protoc_insertion_point(field_set:XhciHostState.Operational.context_base_array_pointer)
}

// uint32 configure = 6;
inline void XhciHostState_Operational::clear_configure() {
  configure_ = 0u;
}
inline uint32_t XhciHostState_Operational::_internal_configure() const {
  return configure_;
}
inline uint32_t XhciHostState_Operational::configure() const {
  // @@protoc_insertion_point(field_get:XhciHostState.Operational.configure)
  return _internal_configure();
}
inline void XhciHostState_Operational::_internal_set_configure(uint32_t value) {
  
  configure_ = value;
}
inline void XhciHostState_Operational::set_configure(uint32_t value) {
  _internal_set_configure(value);
  // @@protoc_insertion_point(field_set:XhciHostState.Operational.configure)
}

// -------------------------------------------------------------------

// XhciHostState_Runtime

// uint32 microframe_index = 1;
inline void XhciHostState_Runtime::clear_microframe_index() {
  microframe_index_ = 0u;
}
inline uint32_t XhciHostState_Runtime::_internal_microframe_index() const {
  return microframe_index_;
}
inline uint32_t XhciHostState_Runtime::microframe_index() const {
  // @@protoc_insertion_point(field_get:XhciHostState.Runtime.microframe_index)
  return _internal_microframe_index();
}
inline void XhciHostState_Runtime::_internal_set_microframe_index(uint32_t value) {
  
  microframe_index_ = value;
}
inline void XhciHostState_Runtime::set_microframe_index(uint32_t value) {
  _internal_set_microframe_index(value);
  // @@protoc_insertion_point(field_set:XhciHostState.Runtime.microframe_index)
}

// -------------------------------------------------------------------

// XhciHostState_CommandRing

// uint32 dequeue = 1;
inline void XhciHostState_CommandRing::clear_dequeue() {
  dequeue_ = 0u;
}
inline uint32_t XhciHostState_CommandRing::_internal_dequeue() const {
  return dequeue_;
}
inline uint32_t XhciHostState_CommandRing::dequeue() const {
  // @@protoc_insertion_point(field_get:XhciHostState.CommandRing.dequeue)
  return _internal_dequeue();
}
inline void XhciHostState_CommandRing::_internal_set_dequeue(uint32_t value) {
  
  dequeue_ = value;
}
inline void XhciHostState_CommandRing::set_dequeue(uint32_t value) {
  _internal_set_dequeue(value);
  // @@protoc_insertion_point(field_set:XhciHostState.CommandRing.dequeue)
}

// bool consumer_cycle_bit = 2;
inline void XhciHostState_CommandRing::clear_consumer_cycle_bit() {
  consumer_cycle_bit_ = false;
}
inline bool XhciHostState_CommandRing::_internal_consumer_cycle_bit() const {
  return consumer_cycle_bit_;
}
inline bool XhciHostState_CommandRing::consumer_cycle_bit() const {
  // @@protoc_insertion_point(field_get:XhciHostState.CommandRing.consumer_cycle_bit)
  return _internal_consumer_cycle_bit();
}
inline void XhciHostState_CommandRing::_internal_set_consumer_cycle_bit(bool value) {
  
  consumer_cycle_bit_ = value;
}
inline void XhciHostState_CommandRing::set_consumer_cycle_bit(bool value) {
  _internal_set_consumer_cycle_bit(value);
  // @@protoc_insertion_point(field_set:XhciHostState.CommandRing.consumer_cycle_bit)
}

// -------------------------------------------------------------------

// XhciHostState_Port

// uint32 status_control = 1;
inline void XhciHostState_Port::clear_status_control() {
  status_control_ = 0u;
}
inline uint32_t XhciHostState_Port::_internal_status_control() const {
  return status_control_;
}
inline uint32_t XhciHostState_Port::status_control() const {
  // @@protoc_insertion_point(field_get:XhciHostState.Port.status_control)
  return _internal_status_control();
}
inline void XhciHostState_Port::_internal_set_status_control(uint32_t value) {
  
  status_control_ = value;
}
inline void XhciHostState_Port::set_status_control(uint32_t value) {
  _internal_set_status_control(value);
  // @@protoc_insertion_point(field_set:XhciHostState.Port.status_control)
}

// -------------------------------------------------------------------

// XhciHostState_Slot

// bool enabled = 1;
inline void XhciHostState_Slot::clear_enabled() {
  enabled_ = false;
}
inline bool XhciHostState_Slot::_internal_enabled() const {
  return enabled_;
}
inline bool XhciHostState_Slot::enabled() const {
  // @@protoc_insertion_point(field_get:XhciHostState.Slot.enabled)
  return _internal_enabled();
}
inline void XhciHostState_Slot::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void XhciHostState_Slot::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:XhciHostState.Slot.enabled)
}

// bool addressed = 2;
inline void XhciHostState_Slot::clear_addressed() {
  addressed_ = false;
}
inline bool XhciHostState_Slot::_internal_addressed() const {
  return addressed_;
}
inline bool XhciHostState_Slot::addressed() const {
  // @@protoc_insertion_point(field_get:XhciHostState.Slot.addressed)
  return _internal_addressed();
}
inline void XhciHostState_Slot::_internal_set_addressed(bool value) {
  
  addressed_ = value;
}
inline void XhciHostState_Slot::set_addressed(bool value) {
  _internal_set_addressed(value);
  // @@protoc_insertion_point(field_set:XhciHostState.Slot.addressed)
}

// -------------------------------------------------------------------

// XhciHostState_Interrupt

// uint32 management = 1;
inline void XhciHostState_Interrupt::clear_management() {
  management_ = 0u;
}
inline uint32_t XhciHostState_Interrupt::_internal_management() const {
  return management_;
}
inline uint32_t XhciHostState_Interrupt::management() const {
  // @@protoc_insertion_point(field_get:XhciHostState.Interrupt.management)
  return _internal_management();
}
inline void XhciHostState_Interrupt::_internal_set_management(uint32_t value) {
  
  management_ = value;
}
inline void XhciHostState_Interrupt::set_management(uint32_t value) {
  _internal_set_management(value);
  // @@protoc_insertion_point(field_set:XhciHostState.Interrupt.management)
}

// uint32 moderation = 2;
inline void XhciHostState_Interrupt::clear_moderation() {
  moderation_ = 0u;
}
inline uint32_t XhciHostState_Interrupt::_internal_moderation() const {
  return moderation_;
}
inline uint32_t XhciHostState_Interrupt::moderation() const {
  // @@protoc_insertion_point(field_get:XhciHostState.Interrupt.moderation)
  return _internal_moderation();
}
inline void XhciHostState_Interrupt::_internal_set_moderation(uint32_t value) {
  
  moderation_ = value;
}
inline void XhciHostState_Interrupt::set_moderation(uint32_t value) {
  _internal_set_moderation(value);
  // @@protoc_insertion_point(field_set:XhciHostState.Interrupt.moderation)
}

// uint32 event_ring_table_size = 3;
inline void XhciHostState_Interrupt::clear_event_ring_table_size() {
  event_ring_table_size_ = 0u;
}
inline uint32_t XhciHostState_Interrupt::_internal_event_ring_table_size() const {
  return event_ring_table_size_;
}
inline uint32_t XhciHostState_Interrupt::event_ring_table_size() const {
  // @@protoc_insertion_point(field_get:XhciHostState.Interrupt.event_ring_table_size)
  return _internal_event_ring_table_size();
}
inline void XhciHostState_Interrupt::_internal_set_event_ring_table_size(uint32_t value) {
  
  event_ring_table_size_ = value;
}
inline void XhciHostState_Interrupt::set_event_ring_table_size(uint32_t value) {
  _internal_set_event_ring_table_size(value);
  // @@protoc_insertion_point(field_set:XhciHostState.Interrupt.event_ring_table_size)
}

// uint64 event_ring_table_base = 4;
inline void XhciHostState_Interrupt::clear_event_ring_table_base() {
  event_ring_table_base_ = uint64_t{0u};
}
inline uint64_t XhciHostState_Interrupt::_internal_event_ring_table_base() const {
  return event_ring_table_base_;
}
inline uint64_t XhciHostState_Interrupt::event_ring_table_base() const {
  // @@protoc_insertion_point(field_get:XhciHostState.Interrupt.event_ring_table_base)
  return _internal_event_ring_table_base();
}
inline void XhciHostState_Interrupt::_internal_set_event_ring_table_base(uint64_t value) {
  
  event_ring_table_base_ = value;
}
inline void XhciHostState_Interrupt::set_event_ring_table_base(uint64_t value) {
  _internal_set_event_ring_table_base(value);
  // @@protoc_insertion_point(field_set:XhciHostState.Interrupt.event_ring_table_base)
}

// uint64 event_ring_dequeue_pointer = 5;
inline void XhciHostState_Interrupt::clear_event_ring_dequeue_pointer() {
  event_ring_dequeue_pointer_ = uint64_t{0u};
}
inline uint64_t XhciHostState_Interrupt::_internal_event_ring_dequeue_pointer() const {
  return event_ring_dequeue_pointer_;
}
inline uint64_t XhciHostState_Interrupt::event_ring_dequeue_pointer() const {
  // @@protoc_insertion_point(field_get:XhciHostState.Interrupt.event_ring_dequeue_pointer)
  return _internal_event_ring_dequeue_pointer();
}
inline void XhciHostState_Interrupt::_internal_set_event_ring_dequeue_pointer(uint64_t value) {
  
  event_ring_dequeue_pointer_ = value;
}
inline void XhciHostState_Interrupt::set_event_ring_dequeue_pointer(uint64_t value) {
  _internal_set_event_ring_dequeue_pointer(value);
  // @@protoc_insertion_point(field_set:XhciHostState.Interrupt.event_ring_dequeue_pointer)
}

// uint64 event_ring_segment_start = 6;
inline void XhciHostState_Interrupt::clear_event_ring_segment_start() {
  event_ring_segment_start_ = uint64_t{0u};
}
inline uint64_t XhciHostState_Interrupt::_internal_event_ring_segment_start() const {
  return event_ring_segment_start_;
}
inline uint64_t XhciHostState_Interrupt::event_ring_segment_start() const {
  // @@protoc_insertion_point(field_get:XhciHostState.Interrupt.event_ring_segment_start)
  return _internal_event_ring_segment_start();
}
inline void XhciHostState_Interrupt::_internal_set_event_ring_segment_start(uint64_t value) {
  
  event_ring_segment_start_ = value;
}
inline void XhciHostState_Interrupt::set_event_ring_segment_start(uint64_t value) {
  _internal_set_event_ring_segment_start(value);
  // @@protoc_insertion_point(field_set:XhciHostState.Interrupt.event_ring_segment_start)
}

// uint32 event_ring_segment_size = 7;
inline void XhciHostState_Interrupt::clear_event_ring_segment_size() {
  event_ring_segment_size_ = 0u;
}
inline uint32_t XhciHostState_Interrupt::_internal_event_ring_segment_size() const {
  return event_ring_segment_size_;
}
inline uint32_t XhciHostState_Interrupt::event_ring_segment_size() const {
  // @@protoc_insertion_point(field_get:XhciHostState.Interrupt.event_ring_segment_size)
  return _internal_event_ring_segment_size();
}
inline void XhciHostState_Interrupt::_internal_set_event_ring_segment_size(uint32_t value) {
  
  event_ring_segment_size_ = value;
}
inline void XhciHostState_Interrupt::set_event_ring_segment_size(uint32_t value) {
  _internal_set_event_ring_segment_size(value);
  // @@protoc_insertion_point(field_set:XhciHostState.Interrupt.event_ring_segment_size)
}

// uint64 event_ring_enqueue_index = 8;
inline void XhciHostState_Interrupt::clear_event_ring_enqueue_index() {
  event_ring_enqueue_index_ = uint64_t{0u};
}
inline uint64_t XhciHostState_Interrupt::_internal_event_ring_enqueue_index() const {
  return event_ring_enqueue_index_;
}
inline uint64_t XhciHostState_Interrupt::event_ring_enqueue_index() const {
  // @@protoc_insertion_point(field_get:XhciHostState.Interrupt.event_ring_enqueue_index)
  return _internal_event_ring_enqueue_index();
}
inline void XhciHostState_Interrupt::_internal_set_event_ring_enqueue_index(uint64_t value) {
  
  event_ring_enqueue_index_ = value;
}
inline void XhciHostState_Interrupt::set_event_ring_enqueue_index(uint64_t value) {
  _internal_set_event_ring_enqueue_index(value);
  // @@protoc_insertion_point(field_set:XhciHostState.Interrupt.event_ring_enqueue_index)
}

// bool event_ring_producer_cycle_bit = 9;
inline void XhciHostState_Interrupt::clear_event_ring_producer_cycle_bit() {
  event_ring_producer_cycle_bit_ = false;
}
inline bool XhciHostState_Interrupt::_internal_event_ring_producer_cycle_bit() const {
  return event_ring_producer_cycle_bit_;
}
inline bool XhciHostState_Interrupt::event_ring_producer_cycle_bit() const {
  // @@protoc_insertion_point(field_get:XhciHostState.Interrupt.event_ring_producer_cycle_bit)
  return _internal_event_ring_producer_cycle_bit();
}
inline void XhciHostState_Interrupt::_internal_set_event_ring_producer_cycle_bit(bool value) {
  
  event_ring_producer_cycle_bit_ = value;
}
inline void XhciHostState_Interrupt::set_event_ring_producer_cycle_bit(bool value) {
  _internal_set_event_ring_producer_cycle_bit(value);
  // @@protoc_insertion_point(field_set:XhciHostState.Interrupt.event_ring_producer_cycle_bit)
}

// -------------------------------------------------------------------

// XhciHostState

// .XhciHostState.Operational operational = 2;
inline bool XhciHostState::_internal_has_operational() const {
  return this != internal_default_instance() && operational_ != nullptr;
}
inline bool XhciHostState::has_operational() const {
  return _internal_has_operational();
}
inline void XhciHostState::clear_operational() {
  if (GetArenaForAllocation() == nullptr && operational_ != nullptr) {
    delete operational_;
  }
  operational_ = nullptr;
}
inline const ::XhciHostState_Operational& XhciHostState::_internal_operational() const {
  const ::XhciHostState_Operational* p = operational_;
  return p != nullptr ? *p : reinterpret_cast<const ::XhciHostState_Operational&>(
      ::_XhciHostState_Operational_default_instance_);
}
inline const ::XhciHostState_Operational& XhciHostState::operational() const {
  // @@protoc_insertion_point(field_get:XhciHostState.operational)
  return _internal_operational();
}
inline void XhciHostState::unsafe_arena_set_allocated_operational(
    ::XhciHostState_Operational* operational) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(operational_);
  }
  operational_ = operational;
  if (operational) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XhciHostState.operational)
}
inline ::XhciHostState_Operational* XhciHostState::release_operational() {
  
  ::XhciHostState_Operational* temp = operational_;
  operational_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XhciHostState_Operational* XhciHostState::unsafe_arena_release_operational() {
  // @@protoc_insertion_point(field_release:XhciHostState.operational)
  
  ::XhciHostState_Operational* temp = operational_;
  operational_ = nullptr;
  return temp;
}
inline ::XhciHostState_Operational* XhciHostState::_internal_mutable_operational() {
  
  if (operational_ == nullptr) {
    auto* p = CreateMaybeMessage<::XhciHostState_Operational>(GetArenaForAllocation());
    operational_ = p;
  }
  return operational_;
}
inline ::XhciHostState_Operational* XhciHostState::mutable_operational() {
  ::XhciHostState_Operational* _msg = _internal_mutable_operational();
  // @@protoc_insertion_point(field_mutable:XhciHostState.operational)
  return _msg;
}
inline void XhciHostState::set_allocated_operational(::XhciHostState_Operational* operational) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete operational_;
  }
  if (operational) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::XhciHostState_Operational>::GetOwningArena(operational);
    if (message_arena != submessage_arena) {
      operational = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, operational, submessage_arena);
    }
    
  } else {
    
  }
  operational_ = operational;
  // @@protoc_insertion_point(field_set_allocated:XhciHostState.operational)
}

// .XhciHostState.Runtime runtime = 3;
inline bool XhciHostState::_internal_has_runtime() const {
  return this != internal_default_instance() && runtime_ != nullptr;
}
inline bool XhciHostState::has_runtime() const {
  return _internal_has_runtime();
}
inline void XhciHostState::clear_runtime() {
  if (GetArenaForAllocation() == nullptr && runtime_ != nullptr) {
    delete runtime_;
  }
  runtime_ = nullptr;
}
inline const ::XhciHostState_Runtime& XhciHostState::_internal_runtime() const {
  const ::XhciHostState_Runtime* p = runtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::XhciHostState_Runtime&>(
      ::_XhciHostState_Runtime_default_instance_);
}
inline const ::XhciHostState_Runtime& XhciHostState::runtime() const {
  // @@protoc_insertion_point(field_get:XhciHostState.runtime)
  return _internal_runtime();
}
inline void XhciHostState::unsafe_arena_set_allocated_runtime(
    ::XhciHostState_Runtime* runtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_);
  }
  runtime_ = runtime;
  if (runtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XhciHostState.runtime)
}
inline ::XhciHostState_Runtime* XhciHostState::release_runtime() {
  
  ::XhciHostState_Runtime* temp = runtime_;
  runtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XhciHostState_Runtime* XhciHostState::unsafe_arena_release_runtime() {
  // @@protoc_insertion_point(field_release:XhciHostState.runtime)
  
  ::XhciHostState_Runtime* temp = runtime_;
  runtime_ = nullptr;
  return temp;
}
inline ::XhciHostState_Runtime* XhciHostState::_internal_mutable_runtime() {
  
  if (runtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::XhciHostState_Runtime>(GetArenaForAllocation());
    runtime_ = p;
  }
  return runtime_;
}
inline ::XhciHostState_Runtime* XhciHostState::mutable_runtime() {
  ::XhciHostState_Runtime* _msg = _internal_mutable_runtime();
  // @@protoc_insertion_point(field_mutable:XhciHostState.runtime)
  return _msg;
}
inline void XhciHostState::set_allocated_runtime(::XhciHostState_Runtime* runtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete runtime_;
  }
  if (runtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::XhciHostState_Runtime>::GetOwningArena(runtime);
    if (message_arena != submessage_arena) {
      runtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runtime, submessage_arena);
    }
    
  } else {
    
  }
  runtime_ = runtime;
  // @@protoc_insertion_point(field_set_allocated:XhciHostState.runtime)
}

// .XhciHostState.CommandRing command_ring = 4;
inline bool XhciHostState::_internal_has_command_ring() const {
  return this != internal_default_instance() && command_ring_ != nullptr;
}
inline bool XhciHostState::has_command_ring() const {
  return _internal_has_command_ring();
}
inline void XhciHostState::clear_command_ring() {
  if (GetArenaForAllocation() == nullptr && command_ring_ != nullptr) {
    delete command_ring_;
  }
  command_ring_ = nullptr;
}
inline const ::XhciHostState_CommandRing& XhciHostState::_internal_command_ring() const {
  const ::XhciHostState_CommandRing* p = command_ring_;
  return p != nullptr ? *p : reinterpret_cast<const ::XhciHostState_CommandRing&>(
      ::_XhciHostState_CommandRing_default_instance_);
}
inline const ::XhciHostState_CommandRing& XhciHostState::command_ring() const {
  // @@protoc_insertion_point(field_get:XhciHostState.command_ring)
  return _internal_command_ring();
}
inline void XhciHostState::unsafe_arena_set_allocated_command_ring(
    ::XhciHostState_CommandRing* command_ring) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_ring_);
  }
  command_ring_ = command_ring;
  if (command_ring) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XhciHostState.command_ring)
}
inline ::XhciHostState_CommandRing* XhciHostState::release_command_ring() {
  
  ::XhciHostState_CommandRing* temp = command_ring_;
  command_ring_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XhciHostState_CommandRing* XhciHostState::unsafe_arena_release_command_ring() {
  // @@protoc_insertion_point(field_release:XhciHostState.command_ring)
  
  ::XhciHostState_CommandRing* temp = command_ring_;
  command_ring_ = nullptr;
  return temp;
}
inline ::XhciHostState_CommandRing* XhciHostState::_internal_mutable_command_ring() {
  
  if (command_ring_ == nullptr) {
    auto* p = CreateMaybeMessage<::XhciHostState_CommandRing>(GetArenaForAllocation());
    command_ring_ = p;
  }
  return command_ring_;
}
inline ::XhciHostState_CommandRing* XhciHostState::mutable_command_ring() {
  ::XhciHostState_CommandRing* _msg = _internal_mutable_command_ring();
  // @@protoc_insertion_point(field_mutable:XhciHostState.command_ring)
  return _msg;
}
inline void XhciHostState::set_allocated_command_ring(::XhciHostState_CommandRing* command_ring) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete command_ring_;
  }
  if (command_ring) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::XhciHostState_CommandRing>::GetOwningArena(command_ring);
    if (message_arena != submessage_arena) {
      command_ring = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command_ring, submessage_arena);
    }
    
  } else {
    
  }
  command_ring_ = command_ring;
  // @@protoc_insertion_point(field_set_allocated:XhciHostState.command_ring)
}

// repeated .XhciHostState.Port ports = 5;
inline int XhciHostState::_internal_ports_size() const {
  return ports_.size();
}
inline int XhciHostState::ports_size() const {
  return _internal_ports_size();
}
inline void XhciHostState::clear_ports() {
  ports_.Clear();
}
inline ::XhciHostState_Port* XhciHostState::mutable_ports(int index) {
  // @@protoc_insertion_point(field_mutable:XhciHostState.ports)
  return ports_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XhciHostState_Port >*
XhciHostState::mutable_ports() {
  // @@protoc_insertion_point(field_mutable_list:XhciHostState.ports)
  return &ports_;
}
inline const ::XhciHostState_Port& XhciHostState::_internal_ports(int index) const {
  return ports_.Get(index);
}
inline const ::XhciHostState_Port& XhciHostState::ports(int index) const {
  // @@protoc_insertion_point(field_get:XhciHostState.ports)
  return _internal_ports(index);
}
inline ::XhciHostState_Port* XhciHostState::_internal_add_ports() {
  return ports_.Add();
}
inline ::XhciHostState_Port* XhciHostState::add_ports() {
  ::XhciHostState_Port* _add = _internal_add_ports();
  // @@protoc_insertion_point(field_add:XhciHostState.ports)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XhciHostState_Port >&
XhciHostState::ports() const {
  // @@protoc_insertion_point(field_list:XhciHostState.ports)
  return ports_;
}

// repeated .XhciHostState.Slot slots = 6;
inline int XhciHostState::_internal_slots_size() const {
  return slots_.size();
}
inline int XhciHostState::slots_size() const {
  return _internal_slots_size();
}
inline void XhciHostState::clear_slots() {
  slots_.Clear();
}
inline ::XhciHostState_Slot* XhciHostState::mutable_slots(int index) {
  // @@protoc_insertion_point(field_mutable:XhciHostState.slots)
  return slots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XhciHostState_Slot >*
XhciHostState::mutable_slots() {
  // @@protoc_insertion_point(field_mutable_list:XhciHostState.slots)
  return &slots_;
}
inline const ::XhciHostState_Slot& XhciHostState::_internal_slots(int index) const {
  return slots_.Get(index);
}
inline const ::XhciHostState_Slot& XhciHostState::slots(int index) const {
  // @@protoc_insertion_point(field_get:XhciHostState.slots)
  return _internal_slots(index);
}
inline ::XhciHostState_Slot* XhciHostState::_internal_add_slots() {
  return slots_.Add();
}
inline ::XhciHostState_Slot* XhciHostState::add_slots() {
  ::XhciHostState_Slot* _add = _internal_add_slots();
  // @@protoc_insertion_point(field_add:XhciHostState.slots)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XhciHostState_Slot >&
XhciHostState::slots() const {
  // @@protoc_insertion_point(field_list:XhciHostState.slots)
  return slots_;
}

// repeated .XhciHostState.Interrupt interrupts = 7;
inline int XhciHostState::_internal_interrupts_size() const {
  return interrupts_.size();
}
inline int XhciHostState::interrupts_size() const {
  return _internal_interrupts_size();
}
inline void XhciHostState::clear_interrupts() {
  interrupts_.Clear();
}
inline ::XhciHostState_Interrupt* XhciHostState::mutable_interrupts(int index) {
  // @@protoc_insertion_point(field_mutable:XhciHostState.interrupts)
  return interrupts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XhciHostState_Interrupt >*
XhciHostState::mutable_interrupts() {
  // @@protoc_insertion_point(field_mutable_list:XhciHostState.interrupts)
  return &interrupts_;
}
inline const ::XhciHostState_Interrupt& XhciHostState::_internal_interrupts(int index) const {
  return interrupts_.Get(index);
}
inline const ::XhciHostState_Interrupt& XhciHostState::interrupts(int index) const {
  // @@protoc_insertion_point(field_get:XhciHostState.interrupts)
  return _internal_interrupts(index);
}
inline ::XhciHostState_Interrupt* XhciHostState::_internal_add_interrupts() {
  return interrupts_.Add();
}
inline ::XhciHostState_Interrupt* XhciHostState::add_interrupts() {
  ::XhciHostState_Interrupt* _add = _internal_add_interrupts();
  // @@protoc_insertion_point(field_add:XhciHostState.interrupts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XhciHostState_Interrupt >&
XhciHostState::interrupts() const {
  // @@protoc_insertion_point(field_list:XhciHostState.interrupts)
  return interrupts_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_xhci_5fhost_2eproto
